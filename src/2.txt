<!--
* @description
* @filename RoyContainer.vue
* @author ROYIANS
* @date 2023/4/3 10:22
!-->
<template>
  <section :class="{ 'is-vertical': isVertical }" class="roy-container">
    <slot></slot>
  </section>
</template>

<script>
/**
 *  容器组件
 */
export default {
  name: 'RoyContainer',
  componentName: 'RoyContainer',
  components: {},
  props: {
    direction: String
  },
  data() {
    return {}
  },
  computed: {
    isVertical() {
      if (this.direction === 'vertical') {
        return true
      } else if (this.direction === 'horizontal') {
        return false
      }
      return this.$slots && this.$slots.default
        ? this.$slots.default.some((vnode) => {
            const tag = vnode.componentOptions && vnode.componentOptions.tag
            return tag === 'roy-header' || tag === 'roy-footer'
          })
        : false
    }
  },
  methods: {},
  created() {},
  mounted() {},
  watch: {}
}
</script>





<!--
* @description 主页
* @filename Home.vue
* @author ROYIANS
* @date 2022/9/29 9:23
!-->
<template>
  <roy-container id="roy-print-template-designer" class="roy-designer-container" theme="day">
    <roy-header class="roy-designer-header" height="40px">
      <div id="tttt" class="roy-designer-header__text">
        <i class="ri-pen-nib-line"></i>
        <span>打印模板设计器 | {{ pageConfig.title }}</span>
      </div>
      <div class="roy-designer__right">
        <div>
          <slot name="roy-designer-header-slot"></slot>
        </div>
        <div class="roy-night-mode">
          <i
            v-for="(tool, index) in headIconConfig"
            :key="index"
            :class="tool.icon"
            :title="tool.name"
            @click="tool.event"
          ></i>
          <i
            v-if="configIn.toolbarConfig.showNightMode && isNightMode"
            class="ri-haze-fill"
            title="切换到日间模式"
            @click="dayNightChange"
          ></i>
          <i
            v-if="configIn.toolbarConfig.showNightMode && !isNightMode"
            class="ri-moon-foggy-fill"
            title="切换到夜间模式"
            @click="dayNightChange"
          ></i>
        </div>
      </div>
    </roy-header>
    <roy-container style="height: calc(100% - 40px)">
      <roy-aside class="roy-designer-aside" width="auto">
        <DesignerAside :show-right.sync="defaultExpendAside" />
      </roy-aside>
      <roy-main class="roy-designer-main">
        <DesignerMain :show-right="defaultExpendAside">
          <template v-slot:roy-designer-toolbar-slot>
            <slot name="roy-designer-toolbar-slot"></slot>
          </template>
        </DesignerMain>
      </roy-main>
    </roy-container>
  </roy-container>
</template>

<script>
// import config from '../../../package.json'
import { mapActions, mapState } from 'vuex'
import DesignerAside from './DesignerAside.vue'
import DesignerMain from './DesignerMain.vue'
import shepherd from '@/printTemplate/components/RoyUserTour/userTour'
import toast from '@/printTemplate/utils/toast'
import commonMixin from '@/printTemplate/mixin/commonMixin'
import { renderers } from '@/printTemplate/components/config/renderers'

// const VERSION = config.version
const VERSION='0.1.15'//
/**
 * 主页
 */
export default {
  name: 'RoyPrintDesigner',
  components: {
    DesignerAside,
    DesignerMain
  },
  mixins: [commonMixin],
  props: {
    preComponentData: {
      type: [Array, Boolean],
      default: false
    },
    prePageConfig: {
      type: [Object, Boolean],
      default: false
    },
    preDataSource: {
      type: [Array, Boolean],
      default: false
    },
    preDataSet: {
      type: [Object, Boolean],
      default: false
    },
    config: {
      type: Object,
      default: () => {
        return {}
      }
    }
  },
  data() {
    return {
      defaultExpendAside: true,
      configIn: {
        toolbarConfig: {
          buttons: ['guide', 'exportTemplate', 'importTemplate'],
          showNightMode: true
        }
      },
      headIcons: [
        {
          code: 'guide',
          name: '界面指引',
          icon: 'ri-question-line',
          event: this.showUserGuide
        },
        {
          code: 'exportTemplate',
          name: '保存模板为文件',
          icon: 'ri-file-download-line',
          event: this.exportJSON
        },
        {
          code: 'importTemplate',
          name: '从模板文件导入',
          icon: 'ri-file-upload-line',
          event: this.importFile
        }
      ]
    }
  },
  computed: {
    ...mapState({
      isNightMode: (state) => state.printTemplateModule.nightMode.isNightMode,
      pageConfig: (state) => state.printTemplateModule.pageConfig,
      componentData: (state) => state.printTemplateModule.componentData,
      dataSource: (state) => state.printTemplateModule.dataSource
    }),
    headIconConfig() {
      return this.headIcons.filter((item) => {
        return (
          this.configIn.toolbarConfig.buttons &&
          this.configIn.toolbarConfig.buttons.includes(item.code)
        )
      })
    }
  },
  methods: {
    ...mapActions({
      initNightMode: 'printTemplateModule/nightMode/initNightMode',
      toggleNightMode: 'printTemplateModule/nightMode/toggleNightMode'
    }),
    async initMounted() {
      console.log(
        `\n %c PrintTemplateDesigner® v${VERSION} %c`,
        'color:#fff;background:linear-gradient(90deg,#4579e1,#009688);padding:5px 0;',
        'color:#000;background:linear-gradient(90deg,#009688,#ffffff);padding:5px 10px 5px 0px;'
      )
      this.initConfig()
      await this.registerTableRender(renderers)
    },
    registerTableRender(renderers) {
      // 注册渲染器
      for (let i in renderers) {
        this.$VXETable.renderer.add(i, renderers[i])
      }
    },
    initConfig() {
      this.initNightMode()
      this.configIn = Object.assign({}, this.configIn, this.config)
      if (this.preComponentData) {
        this.$store.commit('printTemplateModule/setComponentData', this.preComponentData)
      }
      if (this.prePageConfig) {
        this.$store.commit('printTemplateModule/setPageConfig', this.prePageConfig)
      }
      if (this.preDataSource) {
        this.$store.commit('printTemplateModule/setDataSource', this.preDataSource)
      }
      if (this.preDataSet) {
        this.$store.commit('printTemplateModule/setDataSet', this.preDataSet)
      }
    },
    dayNightChange() {
      this.toggleNightMode(!this.isNightMode)
    },
    showUserGuide() {
      const driver = shepherd()
      driver.addSteps([
        {
          attachTo: {
            element: document.querySelector('#royians-guide'),
            on: 'auto'
          },
          title: '打印模板设计器界面指引',
          text: '欢迎使用！接下来介绍整个界面。',
          buttons: [
            {
              action() {
                return this.next()
              },
              text: '下一步'
            }
          ]
        },
        {
          attachTo: {
            element: this.$el.querySelector('.roy-designer-header'),
            on: 'auto'
          },
          title: '打印模板设计器界面指引',
          text: '这是标题栏，左侧显示”打印模板设计器”字样和当前模板名称，右侧是开发者自定义插槽和夜间模式切换按钮。',
          buttons: [
            {
              action() {
                return this.next()
              },
              text: '下一步'
            }
          ]
        },
        {
          attachTo: {
            element: this.$el.querySelector('.roy-designer-aside'),
            on: 'auto'
          },
          title: '打印模板设计器界面指引',
          text: '这是左侧面板，包含四个模块。',
          buttons: [
            {
              action() {
                return this.next()
              },
              text: '下一步'
            }
          ]
        },
        {
          attachTo: {
            element: this.$el.querySelector('.roy-designer-main'),
            on: 'bottom-start'
          },
          title: '打印模板设计器界面指引',
          text: '这是右侧面版，包含一个工具栏和一个主窗口。',
          buttons: [
            {
              action() {
                return this.next()
              },
              text: '下一步'
            }
          ]
        },
        {
          attachTo: {
            element: document.querySelector('#royians-guide'),
            on: 'auto'
          },
          title: '打印模板设计器界面指引',
          text: '本系统由ROYIANS设计，欢迎使用。',
          buttons: [
            {
              action() {
                return this.cancel()
              },
              text: '完成'
            }
          ]
        }
      ])
      driver.start()
    },
    readFile(options) {
      const opts = Object.assign({}, options)
      const parseFile = (file) => {
        const name = file.name
        const tIndex = name.lastIndexOf('.')
        const type = name.substring(tIndex + 1, name.length)
        const filename = name.substring(0, tIndex)
        return { filename, type }
      }
      let fileForm = document.createElement('form')
      let fileInput = document.createElement('input')
      fileInput.name = 'file'
      fileInput.type = 'file'
      fileForm.appendChild(fileInput)
      fileForm.style.display = 'none'
      document.body.appendChild(fileForm)
      return new Promise((resolve, reject) => {
        const types = opts.types || []
        const isAllType = !types.length || types.some((type) => type === '*')
        fileInput.multiple = !!opts.multiple
        fileInput.accept = isAllType ? '' : `.${types.join(', .')}`
        fileInput.onchange = (evnt) => {
          const { files } = evnt.target
          const file = files[0]
          let errType = ''
          // 校验类型
          if (!isAllType) {
            for (let fIndex = 0; fIndex < files.length; fIndex++) {
              const { type } = parseFile(files[fIndex])
              if (!types.includes(type)) {
                errType = type
                break
              }
            }
          }
          if (!errType) {
            resolve({ status: true, files, file })
          } else {
            if (opts.message !== false) {
              toast({
                message: `不支持上传此格式文件：${errType}`,
                status: 'error'
              })
            }
            const params = { status: false, files, file }
            reject(params)
          }
        }
        fileForm.reset()
        fileInput.click()
        document.body.removeChild(fileForm)
      })
    },
    async importFile() {
      try {
        const { file } = await this.readFile({ types: ['rptd'] })
        let reader = new FileReader()
        reader.readAsText(file, 'UTF-8')
        reader.onload = (e) => {
          this.$XModal.confirm('确定要读取该文件？将覆盖当前编辑内容！').then((type) => {
            if (type === 'confirm') {
              const result = e.target.result
              try {
                const resultParsed = JSON.parse(`${result}`)
                if (!resultParsed.pageConfig || !resultParsed.componentData) {
                  toast('文件格式错误，转换内容失败', 'warning')
                  return
                }
                this.loadTemplateData(resultParsed)
              } catch (e) {
                toast('文件损坏，转换内容失败', 'warning')
              }
            }
          })
        }
      } catch (e) {
        toast(`读取文件错误：${e.message}`, 'warning')
      }
    },
    exportJSON() {
      let eleA = document.createElement('a')
      eleA.download = `${this.pageConfig.title}.rptd`

      eleA.style.display = 'none'

      const saveData = {
        pageConfig: this.pageConfig,
        componentData: this.componentData,
        dataSource: this.dataSource
      }

      const blob = new Blob([JSON.stringify(saveData)])
      eleA.href = URL.createObjectURL(blob)

      document.body.appendChild(eleA)

      eleA.click()
      document.body.removeChild(eleA)
      toast('导出成功！', 'success')
    },
    loadTemplateData(resultParsed) {
      this.$store.commit('printTemplateModule/setComponentData', resultParsed.componentData)
      this.$store.commit('printTemplateModule/setPageConfig', resultParsed.pageConfig)
      this.$store.commit('printTemplateModule/setDataSource', resultParsed.dataSource)
    },
    getTemplateData() {
      return {
        type: 'rptd',
        pageConfig: this.pageConfig,
        componentData: this.componentData,
        dataSource: this.dataSource
      }
    }
  },
  created() {},
  mounted() {
    this.initMounted()
  },
  watch: {}
}
</script>

<style lang="scss" scoped>
.roy-designer-container {
  background: var(--prism-background);
  width: 100%;
  height: 100%;

  .roy-designer-header {
    background: var(--roy-menu-bar-background);
    width: 100%;
    display: flex;
    justify-content: space-between;

    .roy-designer-header__text {
      color: #fff;
      display: flex;
      height: 100%;
      align-items: center;

      i {
        margin-right: 5px;
      }
    }

    .roy-designer__right {
      float: right;
      color: #fff;
      width: 50%;
      display: flex;
      align-items: flex-end;
      justify-content: flex-end;
      height: 100%;
      line-height: 40px;
    }

    .roy-night-mode {
      color: #fff;
      line-height: 40px;
      height: 40px;
      overflow: hidden;
      cursor: pointer;

      i {
        float: left;
        color: #fff;
        display: flex;
        align-items: flex-end;
        justify-content: flex-end;
        height: 100%;
        line-height: 40px;
        padding: 0 8px;
        cursor: pointer;

        &:hover {
          background: var(--roy-color-primary-light-3);
        }
      }
    }
  }

  .roy-designer-aside {
    margin: 10px 5px 10px 10px;
    height: calc(100% - 20px);
  }

  .roy-designer-main {
    margin: 5px;
    border-radius: 2px;
    overflow: auto;
    padding: 0;
  }
}
</style>










<template>
  <canvas
    ref="$canvas"
    class="ruler"
    @click="handleClick"
    @mouseenter="handleEnter"
    @mouseleave="handleLeave"
    @mousemove="handleMove"
  />
</template>
<script>
import { drawHorizontalRuler, drawVerticalRuler } from './utils'

const getValueByOffset = (offset, start, scale) => Math.round(start + offset / scale)
export default {
  name: 'CanvasRuler',
  data() {
    return {
      $canvas: {},
      canvasContext: {}
    }
  },
  props: {
    vertical: Boolean,
    start: Number,
    scale: Number,
    width: Number,
    height: Number,
    canvasConfigs: Object,
    selectStart: Number,
    selectLength: Number
  },
  watch: {
    start() {
      this.drawRuler()
    },
    width() {
      this.updateCanvasContext()
      this.drawRuler()
    },
    height() {
      this.updateCanvasContext()
      this.drawRuler()
    }
  },
  methods: {
    initCanvasRef() {
      this.$canvas = this.$refs.$canvas
      this.canvasContext = this.$canvas && this.$canvas.getContext('2d')
    },
    updateCanvasContext() {
      const { ratio } = this.canvasConfigs

      // 比例宽高
      this.$canvas.width = this.width * ratio
      this.$canvas.height = this.height * ratio

      const ctx = this.$canvas.getContext('2d')
      ctx.font = `${12 * ratio}px -apple-system,
                "Helvetica Neue", ".SFNSText-Regular",
                "SF UI Text", Arial, "PingFang SC", "Hiragino Sans GB",
                "Microsoft YaHei", "WenQuanYi Zen Hei", sans-serif`
      ctx.lineWidth = 1
      ctx.textBaseline = 'middle'
    },
    drawRuler() {
      const options = {
        scale: this.scale,
        width: this.width,
        height: this.height,
        canvasConfigs: this.canvasConfigs
      }

      if (this.vertical) {
        drawVerticalRuler(
          this.canvasContext,
          this.start,
          { y: this.selectStart, height: this.selectLength },
          options
        )
      } else {
        drawHorizontalRuler(
          this.canvasContext,
          this.start,
          { x: this.selectStart, width: this.selectLength },
          options
        )
      }
    },
    handleClick(e) {
      const offset = this.vertical ? e.offsetY : e.offsetX
      const value = getValueByOffset(offset, this.start, this.scale)
      this.$emit('onAddLine', value)
    },
    handleEnter(e) {
      const offset = this.vertical ? e.offsetY : e.offsetX
      const value = getValueByOffset(offset, this.start, this.scale)
      this.$emit('onIndicatorShow', value)
    },
    handleMove(e) {
      const offset = this.vertical ? e.offsetY : e.offsetX
      const value = getValueByOffset(offset, this.start, this.scale)
      this.$emit('onIndicatorMove', value)
    },
    handleLeave() {
      this.$emit('onIndicatorHide')
    }
  },
  mounted() {
    this.initCanvasRef()
    this.updateCanvasContext()
    this.drawRuler()
  }
}
</script>



<!--
* @description 坐标
* @filename EditorCoordinate.vue
* @author ROYIANS
* @date 2022/10/21 16:44
!-->
<template>
  <div v-show="showCoordinate" :style="coordinateStyle" class="roy-editor-coordinate">
    {{ left }},{{ top }}
  </div>
</template>

<script>
import commonMixin from '@/printTemplate/mixin/commonMixin'
import eventBus from '@/printTemplate/utils/eventBus'
import { mapState } from 'vuex'
import Big from 'big.js'

/**
 * 坐标
 */
export default {
  name: 'EditorCoordinate',
  mixins: [commonMixin],
  components: {},
  props: {},
  computed: {
    ...mapState({
      curComponent: (state) => state.printTemplateModule.curComponent
    }),
    coordinateStyle() {
      return `left: ${this.x + 10}px; top: ${this.y + 10}px`
    }
  },
  data() {
    return {
      x: 0,
      y: 0,
      left: 0,
      top: 0,
      showCoordinate: false
    }
  },
  methods: {
    initMounted() {
      // 监听元素移动和不移动的事件
      eventBus.$on('move', (isDownward, isRightward, curX, curY) => {
        this.showCoordinate = true
        this.x = curX
        this.y = curY
        this.left = new Big(this.curComponent.style.left).div(new Big(5)).toNumber()
        this.top = new Big(this.curComponent.style.top).div(new Big(5)).toNumber()
      })

      eventBus.$on('unmove', () => {
        this.showCoordinate = false
      })
    }
  },
  created() {},
  mounted() {
    this.initMounted()
  },
  watch: {}
}
</script>

<style lang="scss">
.roy-editor-coordinate {
  height: 14px;
  font-size: 10px;
  line-height: 14px;
  text-align: center;
  padding: 3px 6px;
  background: var(--roy-color-primary);
  color: #ffffff;
  position: fixed;
  border-radius: 2px;
  transform: scale(0.9);
}
</style>



<template>
  <section :style="asideStyle" class="roy-designer-aside__main">
    <roy-sidebar-menu
      ref="sideMenu"
      :collapsed="true"
      :menu="menuList"
      :theme="isNightMode ? '' : 'white-theme'"
      width="150px"
      @item-click="onMenuSelect"
    />
    <keep-alive>
      <component
        :is="curActiveComponent"
        v-show="showRight"
        :key="curActiveComponentCode"
        class="roy-designer-aside__right_panel"
      />
    </keep-alive>
  </section>
</template>

<script>
import commonMixin from '@/printTemplate/mixin/commonMixin'
import { mapState } from 'vuex'

export default {
  name: 'DesignerAside',
  mixins: [commonMixin],
  data() {
    return {
      menuList: [
        {
          title: '组件',
          code: 'component',
          icon: 'ri-drag-drop-line',
          activeIcon: 'ri-drag-drop-fill',
          isActive: true,
          relativeComponent: () => import('./PageComponent.vue')
        },
        {
          title: '结构',
          code: 'toc',
          icon: 'ri-building-2-line',
          activeIcon: 'ri-building-2-fill',
          relativeComponent: () => import('./PageToc.vue')
        },
        {
          title: '属性',
          code: 'palette',
          icon: 'ri-palette-line',
          activeIcon: 'ri-palette-fill',
          relativeComponent: () => import('./PagePalette.vue')
        },
        {
          title: '数据源',
          code: 'datasource',
          icon: 'ri-database-2-line',
          activeIcon: 'ri-database-2-fill',
          relativeComponent: () => import('./DataSource.vue')
        },
        {
          title: '全局',
          code: 'setting',
          icon: 'ri-settings-6-line',
          activeIcon: 'ri-settings-6-fill',
          relativeComponent: () => import('./GlobalSetting.vue')
        }
      ],
      curActiveComponent: null,
      curActiveComponentCode: ''
    }
  },
  props: {
    showRight: {
      type: Boolean,
      default: true
    }
  },
  computed: {
    ...mapState({
      paletteCount: (state) => state.printTemplateModule.paletteCount,
      globalCount: (state) => state.printTemplateModule.globalCount,
      componentsCount: (state) => state.printTemplateModule.componentsCount,
      isNightMode: (state) => state.printTemplateModule.nightMode.isNightMode
    }),
    asideStyle() {
      return this.showRight ? 'width: 305px' : 'width: 65px'
    }
  },
  methods: {
    onMenuSelect(e, item) {
      this.curActiveComponent = item.relativeComponent
      this.curActiveComponentCode = item.code
      this.menuList.forEach((mItem) => {
        let isActive = false
        if (item.code === mItem.code) {
          isActive = true
        }
        this.$set(mItem, 'isActive', isActive)
      })
    },
    clickPaletteMenu() {
      this.$refs.sideMenu.$refs.menuItems.forEach((item) => {
        if (item.item.code === 'palette' && this.curActiveComponentCode !== 'palette') {
          this.onMenuSelect(null, item.item)
        }
      })
    },
    clickComponentMenu() {
      this.$refs.sideMenu.$refs.menuItems.forEach((item) => {
        if (item.item.code === 'component' && this.curActiveComponentCode !== 'component') {
          this.onMenuSelect(null, item.item)
        }
      })
    },
    clickGlobalMenu() {
      this.$refs.sideMenu.$refs.menuItems.forEach((item) => {
        if (item.item.code === 'setting' && this.curActiveComponentCode !== 'setting') {
          this.onMenuSelect(null, item.item)
        }
      })
    }
  },
  mounted() {
    this.curActiveComponent = this.menuList[0].relativeComponent
    this.curActiveComponentCode = this.menuList[0].code
  },
  watch: {
    paletteCount() {
      this.clickPaletteMenu()
    },
    componentsCount() {
      this.clickComponentMenu()
    },
    globalCount() {
      this.clickGlobalMenu()
    }
  }
}
</script>

<style lang="scss" scoped>
.roy-designer-aside__main {
  height: 100%;
  width: 100%;
  display: flex;
  position: relative;
  background: var(--roy-bg-color-overlay);

  .roy-designer-aside__menu {
    height: 100%;
    z-index: 1;

    .roy-designer-aside__menu__icon {
      display: grid;
      top: -7px;
      position: relative;

      i {
        padding: 0;
        margin: 0;
        font-size: 20px;
      }

      span {
        line-height: 14px;
        visibility: visible;
        height: auto;
        width: auto;
        font-size: 8px;
        top: -14px;
        position: relative;
      }
    }
  }

  .roy-designer-aside__right_panel {
    width: calc(100% - 64px);
    background: var(--roy-bg-color-overlay);
    position: absolute;
    right: 0;
    top: 0;
  }
}
</style>


<!--
* @description 提示
* @filename toast.vue
* @author ROYIANS
* @date 2022/4/21 10:57
!-->
<template>
  <div
    v-if="visible"
    :class="`roy-toast__status--${status} ${isPaused ? 'roy-toast--hover-tab' : ''}`"
    :style="positionStyle"
    class="roy-toast roy-toast--center"
    style="width: auto; opacity: 1"
    @mouseenter="doPause"
    @mouseleave="doContinue"
  >
    <div></div>
    <div class="roy-toast__main">
      <i :class="icon"></i>
      <span v-if="dangerouslyUseHTMLString" class="roy-toast__message" v-html="message"></span>
      <span v-else class="roy-toast__message">{{ message }}</span>
    </div>
    <i class="roy-toast__close ri-close-fill" @click="close"></i>
  </div>
</template>

<script>
/**
 * 提示
 */
export default {
  name: 'RoyToast',
  components: {},
  props: {},
  data() {
    return {
      visible: false,
      dangerouslyUseHTMLString: false,
      message: '',
      status: '',
      duration: 5000,
      copiedDuration: 0,
      onClose: null,
      verticalOffset: 0,
      timer: null,
      pauseTimer: null,
      isPaused: false,
      tikDownInterval: null
    }
  },
  computed: {
    icon() {
      switch (this.status) {
        case 'info':
          return 'ri-information-line'
        case 'success':
          return 'ri-checkbox-circle-line'
        case 'warning':
          return 'ri-error-warning-line'
        case 'error':
          return 'ri-close-circle-line'
        default:
          return ''
      }
    },
    positionStyle() {
      return {
        top: `${this.verticalOffset}px`,
        '--duration': `${Math.floor(this.duration / 1000)}s`
      }
    }
  },
  methods: {
    close() {
      this.visible = false
      this.onClose(this)
      this.$destroy()
      this.$el.parentNode.removeChild(this.$el)
    },
    clearTimer() {
      if (this.timer !== null) {
        clearTimeout(this.timer)
      }
      if (this.pauseTimer !== null) {
        clearTimeout(this.pauseTimer)
      }
      if (this.tikDownInterval !== null) {
        clearInterval(this.tikDownInterval)
      }
    },
    doPause() {
      this.pauseTimer = setTimeout(() => {
        this.doRestart(true)
      }, 2000)
    },
    doContinue() {
      if (this.timer !== null) {
        clearTimeout(this.pauseTimer)
      }
      this.doRestart(false)
      this.pauseTimer = null
    },
    doRestart(isIn) {
      if (isIn) {
        this.clearTimer()
        this.isPaused = true
      } else {
        if (this.isPaused) {
          this.startTimer()
          this.isPaused = false
        }
      }
    },
    startTimer() {
      if (this.copiedDuration === 0) {
        this.copiedDuration = this.duration
      }
      if (this.duration > 0) {
        this.timer = setTimeout(() => {
          this.close()
        }, this.copiedDuration)
        this.tikDownInterval = setInterval(() => {
          if (this.copiedDuration > 1000) {
            this.copiedDuration -= 1000
          }
        }, 1000)
      }
    }
  },
  created() {},
  mounted() {
    this.startTimer()
  },
  beforeDestroy() {
    this.clearTimer()
    this.timer = null
    this.pauseTimer = null
  },
  watch: {}
}
</script>

<style lang="scss">
.roy-toast {
  background: #4579e1;
  color: #fff;
  border-radius: 0;
  display: flex;
  justify-content: space-between;
  max-width: none;
  min-width: 100%;
  margin: 0;
  left: 0;
  transform: none;
  transition: all 0.5s ease;
  transition-property: top, right, bottom, left, opacity;
  font-size: 14px;
  min-height: 30px;
  max-height: 100px;
  position: fixed;
  align-items: center;
  padding: 5px 24px;
  bottom: -100px;
  top: -100px;
  opacity: 0;
  z-index: 9999;

  &.roy-toast--center {
    left: 50%;
    transform: translate(-50%, 0);
    bottom: auto;
    top: 0;
  }

  &.roy-toast__status--warning {
    color: #ffffff;
    background: #ffa522;
  }

  &.roy-toast__status--error {
    color: #fff;
    background: #ff4843;
  }

  &.roy-toast__status--success {
    color: #fff;
    background: #009688;
  }

  .roy-toast__main {
    width: 70%;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .roy-toast__message {
    max-height: 80px;
    max-width: 100%;
    overflow-y: auto;
    overflow-x: hidden;
    word-break: break-all;
    height: 100%;
    line-height: 30px;
    padding: 0;
  }

  span {
    margin: 0;
    padding: 0;
    line-height: 1em;
  }

  i {
    padding-right: 8px;
  }

  &::after {
    position: absolute;
    width: 0;
    height: 100%;
    left: 0;
    top: 0;
    background: #fff;
    opacity: 0.1;
    content: '';
    animation: roy-toast__snackbar-progress var(--duration) linear forwards;
    pointer-events: none;
  }

  &.roy-toast--hover-tab {
    &::after {
      animation-play-state: paused;
    }
  }

  .roy-toast__close {
    font-weight: bold;
    border-radius: 2px;
    padding: 0 5px;
    margin-right: 15px;
    cursor: pointer;

    &:hover {
      background: rgba(#fff, 0.4);
    }
  }

  @keyframes roy-toast__snackbar-progress {
    from {
      width: 0;
    }

    to {
      width: 100%;
    }
  }
}
</style>






<template>
  <div :style="panelWidth" class="roy-designer-main__page">
    <SketchRuler
      v-show="showRuler"
      ref="sketchRuler"
      :cornerActive="false"
      :height="rulerHeight"
      :horLineArr="lines.h"
      :lang="lang"
      :palette="palette"
      :scale="realScale"
      :shadow="shadow"
      :startX="startX"
      :startY="startY"
      :thick="thick"
      :verLineArr="lines.v"
      :width="rulerWidth"
      @handleLine="handleLine"
      @onCornerClick="handleCornerClick"
    >
    </SketchRuler>
    <div id="screens" ref="screensRef" @scroll="handleScroll" @wheel="handleWheel">
      <div ref="containerRef" class="screen-container">
        <div
          id="designer-page"
          v-contextmenu="'contextmenu'"
          :style="canvasStyle"
          @contextmenu="handleContextMenu"
          @mousedown="handleMouseDown"
        >
          <ComponentAdjuster
            v-for="(item, index) in componentData"
            :key="item.id"
            :active="item.id === (curComponent || {}).id"
            :class="{ lock: item.isLock }"
            :default-style="item.style"
            :element="item"
            :index="index"
            :scale="scale"
            :style="getShapeStyle(item.style)"
          >
            <component
              :is="item.component"
              :id="'roy-component-' + item.id"
              :active="item.id === (curComponent || {}).id"
              :bind-value="item.bindValue"
              :element="item"
              :prop-value="item.propValue"
              :scale="scale"
            />
          </ComponentAdjuster>
          <!-- 选中区域 -->
          <Area v-show="isShowArea" :height="height" :start="start" :width="width" />
          <!-- 标线 -->
          <EditorLine />
          <!-- 上下边距线 -->
          <div
            :style="`top: ${pageConfig.pageMarginTop * realScale}px`"
            class="roy-margin-top-line"
          ></div>
          <div
            :style="`bottom: ${pageConfig.pageMarginBottom * realScale}px`"
            class="roy-margin-bottom-line"
          ></div>
        </div>
      </div>
    </div>
    <Context ref="contextmenu" :theme="contextTheme">
      <ContextItem
        v-for="item in contextMenu"
        :key="item.code"
        :class="`roy-context--${item.status}`"
        @click="item.event"
      >
        <i :class="item.icon"></i>
        <span>{{ item.label }}</span>
      </ContextItem>
    </Context>
    <!-- 坐标-->
    <EditorCoordinate />
  </div>
</template>
<script>
import SketchRuler from '../SketchRuler/sketchRuler.vue'
import CONSTANT from '@/printTemplate/utils/constant.js'
import { mapActions, mapState } from 'vuex'
import { Context, ContextItem, directive } from '@/printTemplate/components/RoyContext'
import ComponentAdjuster from '@/printTemplate/components/Editor/ComponentAdjuster.vue'
import { getComponentRotatedStyle, getShapeStyle } from '@/printTemplate/utils/style-util.js'
import Big from 'big.js'
import RoyText from '@/printTemplate/components/PageComponents/RoyText.vue'
import RoySimpleText from '@/printTemplate/components/PageComponents/RoySimpleText.vue'
import RoyRect from '@/printTemplate/components/PageComponents/RoyRect.vue'
import RoyLine from '@/printTemplate/components/PageComponents/RoyLine.vue'
import RoyImage from '@/printTemplate/components/PageComponents/RoyImage.vue'
import RoyStar from '@/printTemplate/components/PageComponents/RoyStar.vue'
import RoyCircle from '@/printTemplate/components/PageComponents/RoyCircle.vue'
import RoySimpleTable from '@/printTemplate/components/PageComponents/RoyTable/RoySimpleTable.vue'
import RoyComplexTable from '@/printTemplate/components/PageComponents/RoyTable/RoyComplexTable.vue'
import RoyGroup from '@/printTemplate/components/PageComponents/RoyGroup.vue'
import RoyQRCode from '@/printTemplate/components/PageComponents/RoyQRCode.vue'
import RoyBarCode from '@/printTemplate/components/PageComponents/RoyBarCode.vue'
import Area from '@/printTemplate/components/Editor/Area.vue'
import commonMixin from '@/printTemplate/mixin/commonMixin'
import { $, isPreventDrop } from '@/printTemplate/utils/html-util.js'
import EditorLine from '@/printTemplate/components/Editor/EditorLine.vue'
import EditorCoordinate from '@/printTemplate/components/Editor/EditorCoordinate.vue'


const { MIN_SCALE, MAX_SCALE } = CONSTANT

export default {
  name: 'RoyEditor',
  directives: {
    contextmenu: directive
  },
  mixins: [commonMixin],
  components: {
    EditorCoordinate,
    EditorLine,
    SketchRuler,
    Context,
    ContextItem,
    ComponentAdjuster,
    RoyText,
    RoySimpleText,
    RoyGroup,
    RoyRect,
    RoyLine,
    RoyCircle,
    RoyStar,
    RoyImage,
    RoyQRCode,
    RoyBarCode,
    RoySimpleTable,
    RoyComplexTable,
    Area
  },
  props: {
    showRight: {
      type: Boolean,
      default: true
    }
  },
  data() {
    return {
      rulerWidth: 0,
      rulerHeight: 0,
      startX: -19,
      startY: -25,
      lines: {
        h: [],
        v: []
      },
      thick: 20,
      lang: 'zh-CN', // 中英文
      isShowRuler: true, // 显示标尺
      isShowReferLine: true, // 显示参考线
      palette: {
        bgColor: 'rgba(225,225,225, 0)',
        longfgColor: '#BABBBC',
        shortfgColor: '#C8CDD0',
        fontColor: '#7D8694',
        shadowColor: '#E8E8E8',
        lineColor: '#4579e1',
        borderColor: '#DADADC',
        cornerActiveColor: '#4579e1'
      },
      editorX: 0,
      editorY: 0,
      start: {
        // 选中区域的起点
        x: 0,
        y: 0
      },
      width: 0,
      height: 0,
      isShowArea: false,
      svgFilterAttrs: ['width', 'height', 'top', 'left', 'rotate']
    }
  },
  computed: {
    ...mapState({
      realScale: (state) => state.printTemplateModule.rulerThings.scale,
      rectWidth: (state) => state.printTemplateModule.rulerThings.rectWidth,
      rectHeight: (state) => state.printTemplateModule.rulerThings.rectHeight,
      needReDrawRuler: (state) => state.printTemplateModule.rulerThings.needReDrawRuler,
      showRuler: (state) => state.printTemplateModule.rulerThings.showRuler,
      componentData: (state) => state.printTemplateModule.componentData,
      curComponent: (state) => state.printTemplateModule.curComponent,
      editor: (state) => state.printTemplateModule.editor,
      pageConfig: (state) => state.printTemplateModule.pageConfig
    }),
    contextTheme() {
      return this.isNightMode ? 'dark' : 'default'
    },
    contextMenu() {
      if (!this.curComponent) {
        return [
          {
            code: 'setting',
            icon: 'ri-list-settings-line',
            label: '属性',
            status: 'default',
            event: () => {
              this.$store.commit('printTemplateModule/setGlobalCount')
            }
          },
          {
            code: 'paste',
            icon: 'ri-clipboard-line',
            label: '粘贴',
            status: 'default',
            event: () => {
              this.$store.commit('printTemplateModule/paste', true)
              this.$store.commit('printTemplateModule/recordSnapshot')
            }
          }
        ]
      }
      if (this.curComponent.isLock) {
        return [
          {
            code: 'unlock',
            icon: 'ri-lock-unlock-line',
            label: '解锁',
            status: 'default',
            event: () => {
              this.$store.commit('printTemplateModule/unlock')
            }
          }
        ]
      }
      return [
        {
          code: 'setting',
          icon: 'ri-list-settings-line',
          label: '属性',
          status: 'default',
          event: () => {
            this.$store.commit('printTemplateModule/setPaletteCount')
          }
        },
        {
          code: 'copy',
          icon: 'ri-file-copy-line',
          label: '复制',
          status: 'default',
          event: () => {
            this.$store.commit('printTemplateModule/copy')
          }
        },
        {
          code: 'cut',
          icon: 'ri-scissors-cut-line',
          label: '剪切',
          status: 'default',
          event: () => {
            this.$store.commit('printTemplateModule/cut')
          }
        },
        {
          code: 'del',
          icon: 'ri-delete-bin-line',
          label: '删除',
          status: 'danger',
          event: () => {
            this.$store.commit('printTemplateModule/deleteComponent')
            this.$store.commit('printTemplateModule/recordSnapshot')
          }
        },
        {
          code: 'lock',
          icon: 'ri-lock-line',
          label: '锁定',
          status: 'default',
          event: () => {
            this.$store.commit('printTemplateModule/lock')
          }
        },
        {
          code: 'top',
          icon: 'ri-align-top',
          label: '置顶',
          status: 'default',
          event: () => {
            this.$store.commit('printTemplateModule/topComponent')
            this.$store.commit('printTemplateModule/recordSnapshot')
          }
        },
        {
          code: 'bottom',
          icon: 'ri-align-bottom',
          label: '置底',
          status: 'default',
          event: () => {
            this.$store.commit('printTemplateModule/bottomComponent')
            this.$store.commit('printTemplateModule/recordSnapshot')
          }
        },
        {
          code: 'up',
          icon: 'ri-arrow-up-line',
          label: '上移',
          status: 'default',
          event: () => {
            this.$store.commit('printTemplateModule/upComponent')
            this.$store.commit('printTemplateModule/recordSnapshot')
          }
        },
        {
          code: 'down',
          icon: 'ri-arrow-down-line',
          label: '下移',
          status: 'default',
          event: () => {
            this.$store.commit('printTemplateModule/downComponent')
            this.$store.commit('printTemplateModule/recordSnapshot')
          }
        }
      ]
    },
    scale() {
      return new Big(this.realScale).div(new Big(5)).toNumber()
    },
    shadow() {
      return {
        x: 0,
        y: 0,
        width: this.rectWidth,
        height: this.rectHeight
      }
    },
    canvasStyle() {
      return {
        width: `${this.rectWidth * 5}px`,
        height: `${this.rectHeight * 5}px`,
        transform: `scale(${this.scale})`,
        background: this.pageConfig.background,
        color: this.pageConfig.color,
        fontFamily: this.pageConfig.fontFamily,
        fontSize: this.pageConfig.fontSize,
        lineHeight: this.pageConfig.lineHeight
      }
    },
    isNightMode() {
      return this.$store.state.printTemplateModule.nightMode.isNightMode
    },
    panelWidth() {
      return this.showRight ? 'width: calc(100% - 330px);' : 'width: calc(100% - 95px);'
    }
  },
  methods: {
    ...mapActions({
      reDrawRuler: 'printTemplateModule/rulerThings/reDrawRuler',
      setScale: 'printTemplateModule/rulerThings/setScale'
    }),
    getShapeStyle,
    handleMouseDown(e) {
      // 如果没有选中组件 在画布上点击时需要调用 e.preventDefault() 防止触发 drop 事件
      if (!this.curComponent || isPreventDrop(this.curComponent.component)) {
        e.preventDefault()
      }

      this.hideArea()

      // 获取编辑器的位移信息，每次点击时都需要获取一次。主要是为了方便开发时调试用。
      const rectInfo = this.editor.getBoundingClientRect()
      this.editorX = rectInfo.x
      this.editorY = rectInfo.y

      const startX = e.clientX
      const startY = e.clientY
      this.start.x = (startX - this.editorX) / this.scale
      this.start.y = (startY - this.editorY) / this.scale
      // 展示选中区域
      this.isShowArea = true

      const move = (moveEvent) => {
        this.width = Math.abs((moveEvent.clientX - startX) / this.scale)
        this.height = Math.abs((moveEvent.clientY - startY) / this.scale)
        if (moveEvent.clientX < startX) {
          this.start.x = (moveEvent.clientX - this.editorX) / this.scale
        }

        if (moveEvent.clientY < startY) {
          this.start.y = (moveEvent.clientY - this.editorY) / this.scale
        }
      }

      const up = (e) => {
        document.removeEventListener('mousemove', move)
        document.removeEventListener('mouseup', up)

        if (e.clientX === startX && e.clientY === startY) {
          this.hideArea()
          return
        }

        this.createGroup()
      }

      document.addEventListener('mousemove', move)
      document.addEventListener('mouseup', up)
    },
    handleContextMenu(e) {
      e.stopPropagation()
      e.preventDefault()
      let top = e.offsetY
      let left = e.offsetX

      this.$store.commit('printTemplateModule/showContextMenu', { top, left })
    },
    hideArea() {
      this.isShowArea = 0
      this.width = 0
      this.height = 0

      this.$store.commit('printTemplateModule/setAreaData', {
        style: {
          left: 0,
          top: 0,
          width: 0,
          height: 0
        },
        components: []
      })
    },
    createGroup() {
      // 获取选中区域的组件数据
      const areaData = this.getSelectArea()
      if (areaData.length <= 1) {
        this.hideArea()
        return
      }

      // 根据选中区域和区域中每个组件的位移信息来创建 Group 组件
      // 要遍历选择区域的每个组件，获取它们的 left top right bottom 信息来进行比较
      let top = Infinity,
        left = Infinity
      let right = -Infinity,
        bottom = -Infinity
      areaData.forEach((component) => {
        let style = {}
        if (component.component === 'Group') {
          component.propValue.forEach((item) => {
            const rectInfo = $(`#roy-component-${item.id}`).getBoundingClientRect()
            style.left = rectInfo.left - this.editorX
            style.top = rectInfo.top - this.editorY
            style.right = rectInfo.right - this.editorX
            style.bottom = rectInfo.bottom - this.editorY

            if (style.left < left) {
              left = style.left
            }
            if (style.top < top) {
              top = style.top
            }
            if (style.right > right) {
              right = style.right
            }
            if (style.bottom > bottom) {
              bottom = style.bottom
            }
          })
        } else {
          style = getComponentRotatedStyle(component.style)
        }

        if (style.left < left) {
          left = style.left
        }
        if (style.top < top) {
          top = style.top
        }
        if (style.right > right) {
          right = style.right
        }
        if (style.bottom > bottom) {
          bottom = style.bottom
        }
      })

      this.start.x = left
      this.start.y = top
      this.width = right - left
      this.height = bottom - top

      // 设置选中区域位移大小信息和区域内的组件数据
      this.$store.commit('printTemplateModule/setAreaData', {
        style: {
          left,
          top,
          width: this.width,
          height: this.height
        },
        components: areaData
      })
    },
    getSelectArea() {
      const result = []
      // 区域起点坐标
      const { x, y } = this.start
      // 计算所有的组件数据，判断是否在选中区域内
      this.componentData.forEach((component) => {
        if (component.isLock) {
          return
        }

        const { left, top, width, height } = getComponentRotatedStyle(component.style)
        if (
          x <= left &&
          y <= top &&
          left + width <= x + this.width &&
          top + height <= y + this.height
        ) {
          result.push(component)
        }
      })

      // 返回在选中区域内的所有组件
      return result
    },
    handleLine(lines) {
      this.lines = lines
    },
    handleCornerClick() {},
    handleScroll() {
      const screensRect = document.querySelector('#screens').getBoundingClientRect()
      const canvasRect = document.querySelector('#designer-page').getBoundingClientRect()
      // 标尺开始的刻度
      const startX = (screensRect.left + this.thick - canvasRect.left) / this.realScale
      const startY = (screensRect.top + this.thick - canvasRect.top) / this.realScale

      this.startX = startX
      this.startY = startY
    },
    // 控制缩放值
    handleWheel(e) {
      if (e.ctrlKey || e.metaKey) {
        e.preventDefault()
        const nextScale = parseFloat(Math.max(0.2, this.scale - e.deltaY / 500).toFixed(2))
        if (nextScale <= MAX_SCALE && nextScale >= MIN_SCALE) {
          this.setScale(nextScale)
        }
      }
      this.$nextTick(() => {
        this.handleScroll()
      })
    }
  },
  mounted() {
    this.rulerWidth = this.$el.offsetWidth
    this.rulerHeight = this.$el.offsetHeight
    this.$refs.screensRef.scrollLeft =
      this.$refs.containerRef.getBoundingClientRect().width / 2 - this.rectWidth
    // 获取编辑器元素
    this.$store.commit('printTemplateModule/getEditor')
  },
  watch: {
    isNightMode: {
      handler(newVal) {
        this.palette = {
          bgColor: 'rgba(225,225,225, 0)',
          longfgColor: '#BABBBC',
          shortfgColor: '#C8CDD0',
          fontColor: '#7D8694',
          shadowColor: newVal ? '#444444' : '#E8E8E8',
          lineColor: '#4579e1',
          borderColor: newVal ? '#636466' : '#DADADC',
          cornerActiveColor: '#4579e1'
        }
        this.reDrawRuler()
      }
    },
    showRight: {
      handler() {
        this.$nextTick(() => {
          this.rulerWidth = this.$el.offsetWidth
          this.rulerHeight = this.$el.offsetHeight
          this.$refs.screensRef.scrollLeft =
            this.$refs.containerRef.getBoundingClientRect().width / 2 - this.rectWidth
          this.reDrawRuler()
        })
      }
    },
    needReDrawRuler: {
      handler() {
        this.$nextTick(() => {
          this.handleScroll()
          this.$refs.sketchRuler?.$children[0]?.$children[0]?.drawRuler()
          this.$refs.sketchRuler?.$children[1]?.$children[0]?.drawRuler()
        })
      }
    }
  }
}
</script>
<style lang="scss">
#screens {
  position: absolute;
  width: 100%;
  height: 100%;
  overflow: auto;
}

.screen-container {
  position: absolute;
  width: 5000px;
  height: 5000px;
}

.roy-designer-main__page {
  position: absolute;
  height: calc(100% - 100px);
  border: 1px solid var(--roy-border-color);
  padding: 0 !important;
  margin: 0;
  background-color: rgb(255, 255, 255);
  background-image: linear-gradient(45deg, rgb(247, 247, 247) 25%, transparent 25%),
    linear-gradient(-45deg, rgb(247, 247, 247) 25%, transparent 25%),
    linear-gradient(45deg, transparent 75%, rgb(247, 247, 247) 75%),
    linear-gradient(-45deg, transparent 75%, rgb(247, 247, 247) 75%);
  background-size: 20px 20px;
  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;

  #designer-page {
    background: #fff;
    box-shadow: rgba(0, 0, 0, 0.12) 0 1px 3px, rgba(0, 0, 0, 0.24) 0 1px 2px;
    position: absolute;
    top: 60px;
    transform-origin: 50% 0;
    margin-left: -80px;
    left: 50%;

    .lock {
      opacity: 0.5;

      &:hover {
        cursor: not-allowed;
      }
    }
  }

  .roy-margin-top-line,
  .roy-margin-bottom-line {
    position: absolute;
    height: 0;
    width: 100%;
    border-top: 1px dashed #ccc;
  }
}

#roy-print-template-designer[theme='dark'] {
  .roy-designer-main__page {
    background-color: #1c1c1c;
    background-image: linear-gradient(45deg, #212121 25%, transparent 25%),
      linear-gradient(-45deg, #232323 25%, transparent 25%),
      linear-gradient(45deg, transparent 75%, #232323 75%),
      linear-gradient(-45deg, transparent 75%, #232323 75%);
  }

  #designer-page {
    filter: brightness(0.6);
  }
}
</style>
