表格查询功能
<a-config-provider :getPopupContainer="getPopupContainer">
    <ThemeProvider is-root v-bind="themeConfig" :apply-style="false">
      <stepin-view
        system-name="Stepin"
        logo-src="@/assets/vite.svg"
        :class="`${contentClass}`"
        :user="user"
        :navMode="navigation"
        :useTabs="useTabs"
        :themeList="themeList"
        v-model:show-setting="showSetting"
        v-model:theme="theme"
        @themeSelect="configTheme"
      >
      </stepin-view>
    </ThemeProvider>
  </a-config-provider>
  <login-modal :unless="['/login']" />



  import { reactive, ref } from 'vue';
import { useRouter } from 'vue-router';
import { useAccountStore, useMenuStore, useSettingStore, storeToRefs } from '@/store';
import avatar from '@/assets/avatar.png';
import { PageFooter, HeaderActions } from '@/components/layout';
import Setting from './components/setting';
import { LoginModal } from '@/pages/login';
import { configTheme, themeList } from '@/theme';
import { ThemeProvider } from 'stepin';
import { computed } from 'vue';

const { logout, profile } = useAccountStore();

// 获取个人信息
profile().then((response) => {
  const { account } = response;
  user.name = account.username;
  // user.avatar = account.avatar;
});

const showSetting = ref(false);
const router = useRouter();

useMenuStore().getMenuList();

const { navigation, useTabs, theme, contentClass } = storeToRefs(useSettingStore());
const themeConfig = computed(() => themeList.find((item) => item.key === theme.value)?.config ?? {});

const user = reactive({
  name: 'admin',
  avatar: avatar,
  menuList: [
    { title: '个人中心', key: 'personal', icon: 'UserOutlined', onClick: () => router.push('/profile') },
    { title: '设置', key: 'setting', icon: 'SettingOutlined', onClick: () => (showSetting.value = true) },
    { type: 'divider' },
    {
      title: '退出登录',
      key: 'logout',
      icon: 'LogoutOutlined',
      onClick: () => logout().then(() => router.push('/login')),
    },
  ],
});

function getPopupContainer() {
  return document.querySelector('.stepin-layout');
}



 "dayjs": "^1.11.7",
    "element-plus": "^2.2.28",
    "everright-filter": "^1.1.1", 
    "jss": "^10.9.2",
    "jss-preset-default": "^10.9.2",
    "lodash": "^4.17.21",
    "nanoid": "^4.0.0",
    "nzh": "^1.0.8",
    "signature_pad": "^4.1.4",
    "vant": "^4.0.8",
    "vite-svg-loader": "^4.0.0",
    "vuedraggable": "^4.1.0"
     "@vant/area-data": "^1.4.0",
    "@vant/touch-emulator": "^1.4.0",
    "@vue/shared": "^3.2.45",
    "@vuelidate/core": "^2.0.0",
    "@vuelidate/validators": "^2.0.0",
    "async": "^3.2.4",
    "axios": "^1.2.2",
    "canvas": "^2.11.2"


    class ControlInsertion {
    sortable:any
    constructor(sortable) {
      this.sortable = sortable;
    }
    dragStart(e) {
      // 处理拖拽开始逻辑
    }

    drop(e) {
      if (!prevEl || !e.activeSortable) {
        return false;
      }
      const isBlock = _.get(e, 'activeSortable.options.dataSource', false) === 'block';
      const { dragEl, target } = e;
      const oldEl = getDragElement(dragEl);
      const newElement = ER.wrapElement(_.cloneDeep(oldEl), inserRowIndex !== '', true, isBlock);

      if (!isBlock && oldEl.context) {
        oldEl.context.delete();
      }

      if (inserRowIndex !== '') {
        let store = [];
        if (prevSortable.options.parent.type === 'subform') {
          store = prevSortable.options.parent.list[0];
        } else {
          store = Array.isArray(prevSortable.options.parent)
            ? prevSortable.options.parent
            : prevSortable.options.parent.list;
        }
        store.splice(inserRowIndex, 0, newElement);
        utils.addContext(store[inserRowIndex], prevSortable.options.parent);
      }

      if (inserColIndex !== '') {
        const { list } = prevSortable.el.__draggable_component__;
        list.splice(inserColIndex, 0, newElement);
        //@ts-ignore
        utils.addContext(newElement, prevSortable.options.parent[sortableUtils.index(prevSortable.el.parentNode)]);
      }

      if (inserColIndex !== '' || inserRowIndex !== '') {
        utils.deepTraversal(newElement, (node) => {
          if (utils.checkIsField(node)) {
            ER.addField(node);
          }
        });
        nextTick(() => {
          ER.setSelection(newElement);
        });
      }
      this.resetStates();
    }

    dragOver(e) {
      e.cancel();
      this.resetStates();
      const {
        activeSortable: {
          constructor: {
            utils: SortableUtils
          },
          options: {
            dataSource
          },
          el: {
            __draggable_component__: {
              list
            }
          } 
        }, 
        activeSortable,
        target,
        originalEvent,
        dragEl,
        sortable
      } = e;

      if (sortable.options.dataSource === 'block' || target.dataset.layoutType === 'grid') {
        return false;
      }

      const dragNode = getDragElement(dragEl);
      const targetNode = getDragElement(target);
      if ((!utils.checkIsField(dragNode) || dragNode.type === 'subform') && utils.checkIsInSubform(targetNode)) {
        return false;
      }
      if (target.dataset.layoutType === 'subform' && (!utils.checkIsField(dragNode) || dragNode.type === 'subform')) {
        return false;
      }

      originalEvent.stopPropagation && originalEvent.stopPropagation();
      //@ts-ignore
      let newTarget = SortableUtils.closest(target, this.sortable.options.draggable, sortable.el);
      if (dragEl.contains(newTarget)) {
        return false;
      }

      if (/^(grid-col|tabs-col|td|collapse-col|root|inline|subform)$/.test(target.dataset.layoutType)) {
        newTarget = target;
        const state = newTarget.__draggable_component__ || newTarget.children[0].__draggable_component__;
        if (!state.list.length) {
          prevEl = target.dataset.layoutType === 'root' ? target : (newTarget.__draggable_component__ ? newTarget.children[0] : newTarget.parentNode);
          prevSortable = state._sortable;
          inserRowIndex = 0;
          setBorder(prevEl, 'drag-line-top');
        } else {
          if (/^(root|grid-col)$/.test(target.dataset.layoutType)) {
            prevEl = lastChild(sortable.el);
            if (prevEl === dragEl.parentNode.parentNode && list.length === 1) {
              prevEl = '';
              return false;
            }
            setBorder(prevEl, 'drag-line-bottom');
            inserRowIndex = sortable.el.children.length;
            prevSortable = state._sortable;
          }
          if (target.dataset.layoutType === 'inline' && !disableBothSides(ER)) {

            prevEl = lastChild(sortable.el);
            if (prevEl.contains(dragEl) && list.length === 1) {
              prevEl = '';
              return false;
            }
            inserColIndex = sortable.el.children.length;
            prevSortable = state._sortable;
            setBorder(prevEl, 'drag-line-right');
          }
        }
      } else {
        this.setStates(newTarget, e, ER);
      }
    }

    resetStates() {
      prevEl = null;
      prevSortable = null;
      inserRowIndex = '';
      inserColIndex = '';
    }

    setStates(newTarget, e, ER) {
      // 处理插入状态的逻辑
    }
  }
  return Object.assign(ControlInsertion, {
    pluginName: 'ControlInsertion',
    initializeByDefault: true
  });












  function ControlInsertion (sortable) {
  }
  ControlInsertion.prototype = {
    dragStart (e) {
    },
    drop (e) {
      if (!prevEl || !e.activeSortable) {
        return false
      }
      const isBlock = _.get(e, 'activeSortable.options.dataSource', false) === 'block'
      const {
        dragEl,
        target
      } = e
      const oldEl = getDragElement(dragEl)
      const newElement = ER.wrapElement(_.cloneDeep(oldEl), inserRowIndex !== '', true, isBlock)
      if (!isBlock) {
        if (oldEl.context) {
          oldEl.context.delete()
          // utils.deepTraversal(oldEl, (node) => {
          //   if (utils.checkIsField(node) && node.type !== 'subform') {
          //     ER.delField(node)
          //   }
          // })
        }
      }
      if (inserRowIndex !== '') {
        let store = []
        if (prevSortable.options.parent.type === 'subform') {
          store = prevSortable.options.parent.list[0]
        } else {
          store = Array.isArray(prevSortable.options.parent) ? prevSortable.options.parent : prevSortable.options.parent.list
        }
        store.splice(inserRowIndex, 0, newElement)
        utils.addContext(store[inserRowIndex], prevSortable.options.parent)
      }
      if (inserColIndex !== '') {
        const {
          el: {
            __draggable_component__: {
              list
            }
          },
          el,
          constructor: {
            utils: sortableUtils
          }
        } = prevSortable
        list.splice(inserColIndex, 0, newElement)
        utils.addContext(newElement, prevSortable.options.parent[sortableUtils.index(prevSortable.el.parentNode)])
      }
      if (inserColIndex !== '' || inserRowIndex !== '') {
        utils.deepTraversal(newElement, (node) => {
          if (utils.checkIsField(node)) {
            ER.addField(node)
          }
        })
        nextTick(() => {
          ER.setSelection(newElement)
        })
      }
      resetStates()
    },
    dragOver (e) {
      // e.originalEvent && e.originalEvent.stopPropagation()
      e.cancel()
      resetStates()
      const {
        activeSortable: {
          constructor: {
            utils: SortableUtils
          },
          options: {
            dataSource
          },
          el: {
            __draggable_component__: {
              list
            }
          }
        },
        activeSortable,
        target,
        originalEvent,
        dragEl,
        sortable: {
          el,
          el: {
            __draggable_component__: {
              list: targetList
            }
          }
        },
        sortable
      } = e
      if (sortable.options.dataSource === 'block') {
        return false
      }
      if (target.dataset.layoutType === 'grid') {
        return false
      }
      const dragNode = getDragElement(dragEl)
      const targetNode = getDragElement(target)
      if ((!utils.checkIsField(dragNode) || dragNode.type === 'subform') && utils.checkIsInSubform(targetNode)) {
        return false
      }
      if (target.dataset.layoutType === 'subform') {
        // console.log(utils)
        if (!utils.checkIsField(dragNode) || dragNode.type === 'subform') {
          return false
        }
      }
      originalEvent.stopPropagation && originalEvent.stopPropagation()
      const direction = ''
      const targetContainer = el.parentNode
      const targetOnlyOne = targetList.length === 1
      let newTarget = SortableUtils.closest(target, this.options.draggable, sortable.el)
      if (dragEl.contains(newTarget)) {
        return false
      }
      if (/^(grid-col|tabs-col|td|collapse-col|root|inline|subform)$/.test(target.dataset.layoutType)) {
        newTarget = target
        const state = (newTarget.__draggable_component__ || newTarget.children[0].__draggable_component__)
        if (!state.list.length) {
          prevEl = target.dataset.layoutType === 'root' ? target : newTarget.__draggable_component__ ? newTarget.children[0] : newTarget.parentNode
          prevSortable = state._sortable
          inserRowIndex = 0
          setBorder(prevEl, 'drag-line-top')
        } else {
          if (/^(root|grid-col)$/.test(target.dataset.layoutType)) {
            const rows = el.children
            prevEl = lastChild(el)
            if (prevEl === dragEl.parentNode.parentNode && list.length === 1) {
              prevEl = ''
              return false
            }
            setBorder(prevEl, 'drag-line-bottom')
            inserRowIndex = rows.length
            prevSortable = state._sortable
          }
          if (target.dataset.layoutType === 'inline') {
            if (disableBothSides(ER)) return false
            const cols = el.children
            prevEl = lastChild(el)
            if (prevEl.contains(dragEl) && list.length === 1) {
              prevEl = ''
              return false
            }
            inserColIndex = cols.length
            prevSortable = state._sortable
            setBorder(prevEl, 'drag-line-right')
          }
        }
      } else {
        setStates(newTarget, e, ER)
      }
    }
  }
  return Object.assign(ControlInsertion, {
    pluginName: 'ControlInsertion',
    initializeByDefault: true
  })



  import { defineComponent, ref, unref, inject, PropType } from 'vue';
import { ElButton } from 'element-plus';
import { Button as VanButton } from 'vant';
import hooks from '@ER/hooks';

export default defineComponent({
  name: 'ErCompleteButton',
  props: {
    handle: Object as PropType<{ validate: () => Promise<void> }>,
    mode: {
      type: String as PropType<'edit' | 'preview'>,
      default: 'edit',
    },
  },
  setup(props) {
    const ER = inject('Everright') as any;
    const ns = hooks.useNamespace('CompleteButton');
    const { state, isPc } = hooks.useTarget();
    const element = ref<string | null>(null);

    const handleClick = async () => {
      if (props.mode === 'preview') return;
      try {
        await Promise.resolve(unref(props.handle)?.validate());
        ER.fireEvent('submit', ER.getData());
      } catch (e) {
        console.error(e);
      }
    };

    const dataset = process.env.NODE_ENV === 'test' ? { 'data-test': 'er-complete-button' } : {};

    return () => (
      <div {...dataset}>
        {isPc.value ? (
          <div style="text-align: center;">
            <ElButton
              onClick={handleClick}
              type="primary"
              style={{ backgroundColor: state.value.config[state.value.platform].completeButton.backgroundColor }}
            >
              <span style={{ color: state.value.config[state.value.platform].completeButton.color }}>
                {state.value.config[state.value.platform].completeButton.text}
              </span>
            </ElButton>
          </div>
        ) : (
          <VanButton
            onClick={handleClick}
            round
            block
            type="primary"
            style={{ backgroundColor: state.value.config[state.value.platform].completeButton.backgroundColor }}
          >
            <span style={{ color: state.value.config[state.value.platform].completeButton.color }}>
              {state.value.config[state.value.platform].completeButton.text}
            </span>
          </VanButton>
        )}
      </div>
    );
  },
});


 // const handleAction = (type) => {
    //   const index = type !== 5 && props.parent.indexOf(props.data);
    //   switch (type) {
    //     case 1:
    //       if (ER.props.delHandle(props.data) === false) return false;
    //       props.data.context.delete();
    //       utils.deepTraversal(props.data, (node) => {
    //         if (utils.checkIsField(node)) {
    //           ER.delField(node);
    //         }
    //       });
    //       if (/^(radio|checkbox|select)$/.test(props.data.type)) {
    //         delete state.data[props.data.options.dataKey];
    //       }
    //       if (props.parent.length > 0) {
    //         if (index === props.parent.length) {
    //           setSelection(props.parent[index - 1]);
    //         } else {
    //           setSelection(props.parent[index]);
    //         }
    //       } else {
    //         setSelection('root');
    //       }
    //       break;
    //     case 2:
    //       if (ER.props.copyHandle(props.data) === false) return false;
    //       props.data.context.copy();
    //       const copyData = props.parent[index + 1];
    //       setSelection(copyData);
    //       utils.deepTraversal(copyData, (node) => {
    //         ER.addFieldData(node, true);
    //         if (utils.checkIsField(node)) {
    //           ER.addField(node);
    //         }
    //       });
    //       break;
    //     case 3:
    //       //@ts-ignore
    //       _.last(props.data.context.columns[0]).context.insert('bottom');
    //       break;
    //     case 4:
    //       //@ts-ignore
    //       _.last(props.data.context.columns)[0].context.insert('right');
    //       break;
    //     case 5:
    //       let parent = props.data.context.parent;
    //       if (/^(inline|tr)$/.test(parent.type)) {
    //         parent = parent.context.parent;
    //       }
    //       setSelection(Array.isArray(parent) ? 'root' : parent);
    //       break;
    //     case 6:
    //       props.data.context.appendCol();
    //       break;
    //   }
    // };



    // export const addContext = (node, parent?: any, fn?: any) => {
//   let arr = []
//   const isArray = Array.isArray(parent)
//   if (isArray) {
//     arr = parent
//   } else {
//     arr = parent.columns || parent.list || parent.rows
//   }
//   fn && fn(node) 
//   const context = {
//     get props() {
//       return (isPc) => computed(() => {
//         const {
//           options
//         } = node
//         const result: any = {
//           disabled: options.disabled,
//           placeholder: options.placeholder,
//           clearable: options.clearable,
//           required: options.required
//         }
//         if (isPc) {
//           // result.style = {
//           //   width: options.width + options.widthType
//           // }
//         } else {
//           result.label = node.label
//         }
//         switch (node.type) {
//           case 'input':
//             if (options.isShowWordLimit) {
//               result.maxlength = options.max
//               result['show-word-limit'] = options.isShowWordLimit
//             }
//             if (isPc) {
//               result.showPassword = options.showPassword
//               result.prepend = options.prepend
//               result.append = options.append
//             } else {
//               if (options.showPassword) {
//                 result.type = 'password'
//               }
//               if (options.renderType === 4) {
//                 result.type = 'tel'
//               }
//             }
//             break
//           case 'textarea':
//             result.type = 'textarea'
//             result.rows = options.rows
//             break
//           case 'number':
//             if (isPc) {
//               result.controls = options.controls
//               if (options.controls) {
//                 result['controls-position'] = options.controlsPosition ? 'right' : ''
//               }
//             }
//             if (options.isShowWordLimit) {
//               result.min = options.min
//               result.max = options.max
//             }
//             result.step = options.step
//             result.precision = options.precision
//             break
//           case 'radio':
//           case 'checkbox':
//             break
//           case 'select':
//             break
//           case 'time':
//             result.format = options.format
//             if (isPc) {
//               result.valueFormat = options.valueFormat
//             }
//             break
//           case 'date':
//             result.placeholder = options.placeholder
//             result.startPlaceholder = options.startPlaceholder
//             result.endPlaceholder = options.endPlaceholder
//             result.format = options.format
//             result.type = options.type
//             if (isPc) {
//               result.disabledDate = (time) => {
//                 const {
//                   startTime,
//                   endTime,
//                   weeks,
//                   isShowWeeksLimit
//                 } = options
//                 const startDate = dayjs.unix(startTime)
//                 const endDate = dayjs.unix(endTime)
//                 const currentDate = dayjs(time)
//                 const result = currentDate.isBefore(startDate) || currentDate.isAfter(endDate)
//                 return result
//               }
//             } else {
//               const {
//                 startTime,
//                 endTime,
//                 weeks,
//                 isShowWeeksLimit
//               } = options
//               switch (options.type) {
//                 case 'date':
//                 case 'datetime':
//                   if (startTime) {
//                     result.minDate = dayjs.unix(startTime).toDate()
//                   } else {
//                     result.minDate = dayjs.unix(0).toDate()
//                   }
//                   if (endTime) {
//                     result.maxDate = dayjs.unix(endTime).toDate()
//                   } else {
//                     result.maxDate = dayjs().add(20, 'year').toDate()
//                   }
//                   break
//                 case 'dates':
//                   if (options.defaultValue) {
//                     result.defaultDate = options.defaultValue.map(e => dayjs.unix(e).toDate())
//                   } else {
//                     result.defaultDate = null
//                   }
//                   if (startTime) {
//                     result.minDate = dayjs.unix(startTime).toDate()
//                   } else {
//                     result.minDate = dayjs().subtract(1, 'year').toDate()
//                   }
//                   if (endTime) {
//                     result.maxDate = dayjs.unix(endTime).toDate()
//                   } else {
//                     result.maxDate = dayjs().add(1, 'year').toDate()
//                   }
//                   break
//                 case 'daterange':
//                   if (options.defaultValue) {
//                     result.defaultDate = options.defaultValue.map(e => dayjs.unix(e).toDate())
//                   } else {
//                     result.defaultDate = null
//                   }
//                   if (startTime) {
//                     result.minDate = dayjs.unix(startTime).toDate()
//                   } else {
//                     result.minDate = dayjs().subtract(1, 'year').toDate()
//                   }
//                   if (endTime) {
//                     result.maxDate = dayjs.unix(endTime).toDate()
//                   } else {
//                     result.maxDate = dayjs().add(1, 'year').toDate()
//                   }
//                   break
//               }
//             }
//             break
//           case 'cascader':
//             result.props = {
//               multiple: options.multiple,
//               checkStrictly: options.checkStrictly
//             }
//             result.options = options.options
//             break
//           case 'slider':
//             result.step = options.step
//             result.min = options.min
//             result.max = options.max
//             break
//           case 'divider':
//             result.contentPosition = options.contentPosition
//             break
//           case 'uploadfile':
//             result.multiple = options.multiple
//             result.action = options.action
//             result.limit = options.limit
//             result.size = options.size
//             result.accept = options.accept
//             break
//         }
//         return result
//       })
//     },
//     get row() {
//       let result: any = ''
//       if (isArray || node.type === 'tr') {
//         result = arr.indexOf(node)
//       } else {
//         result = parent.context.row
//       }
//       return result
//     },
//     get col() {
//       let result: any = ''
//       if (isArray) {
//         result = 0
//       } else {
//         if (parent.type === 'grid' || parent.type === 'tr' || parent.type === 'td' || parent.type === 'col' || parent.type === 'tabsCol' || parent.type === 'collapseCol') {
//           result = arr.indexOf(node)
//         } else {
//           result = parent.context.col
//         }
//       }
//       return result
//     },
//     get root() {
//       let result = {}
//       switch (node.type) {
//         case 'grid':
//         case 'table':
//           result = node
//           break
//         default:
//           result = parent.context.root
//       }
//       return result
//     },
//     state: node,
//     parent,
//     get parents() {
//       const result = []
//       let cursor = node
//       while (cursor) {
//         result.unshift(cursor)
//         if (cursor.context.parent && !_.isArray(cursor.context.parent)) {
//           cursor = cursor.context.parent
//         } else {
//           cursor = ''
//         }
//       }
//       return result
//     },
//     copy() {
//       const index = arr.indexOf(node)
//       const newNode = reactive(_.cloneDeep(toRaw(node)))
//       delete newNode.context
//       newNode.id = nanoid()
//       newNode.key = `${newNode.type}_${newNode.id}`
//       addContext(newNode, parent, (node) => {
//         node.id = nanoid()
//         node.key = `${node.type}_${node.id}-copy`
//       })
//       arr.splice(index + 1, 0, newNode)
//     },
//     delete() {
//       if (utils.checkIsInSubform(node) && node.type === 'inline') {
//         arr[0].splice(arr[0].indexOf(node), 1)
//       } else {
//         arr.splice(arr.indexOf(node), 1)
//       }
//     },
//     appendCol() {
//       const newNode = wrapElement({
//         options: {
//           span: 6,
//           offset: 0,
//           pull: 0,
//           push: 0
//         },
//         type: 'col',
//         list: [
//         ]
//       })
//       node.columns.push(newNode)
//       addContext(newNode, node)
//     },
//     get columns() {
//       const result = []
//       switch (node.type) {
//         case 'table':
//           node.rows.forEach((item0, index0) => {
//             item0.columns.forEach((item1, index1) => {
//               if (!index0) {
//                 result.push([])
//               }
//               result[index1].push(item1)
//             })
//           })
//           break
//         default:
//       }
//       return result
//     },
//     get isDisableMargeLeft() {
//       const {
//         context: {
//           root,
//           col,
//           row
//         }
//       } = node
//       const nodes = root.rows[row].columns
//       let result = col <= 0
//       if (!result) {
//         let onOff = true
//         findNode(node, 'before', 'colspan', (nodes) => {
//           onOff = result = !nodes.every(e => e.options.rowspan === node.options.rowspan) || nodes.every(e => e.options.isMerged)
//         })
//         result = onOff
//       }
//       return result
//     },
//     get isDisableMargeRight() {
//       const {
//         context: {
//           root,
//           col,
//           row
//         }
//       } = node
//       const nodes = root.rows[row].columns
//       let result = col >= nodes.length - 1
//       if (!result) {
//         let onOff = true
//         findNode(node, 'after', 'colspan', (nodes) => {
//           onOff = result = !nodes.every(e => e.options.rowspan === node.options.rowspan) || nodes.every(e => e.options.isMerged)
//         })
//         result = onOff
//       }
//       return result
//     },
//     get isDisableMargeRow() {
//       const nodes = getNodes(node, 'colspan')
//       return this.isDisableDelRow || nodes.length === node.options.colspan
//     },
//     get isDisableMargeColumn() {
//       const nodes = getNodes(node, 'rowspan')
//       return this.isDisableDelColumn || nodes.length === node.options.rowspan
//     },
//     get isDisableMargeBottom() {
//       const {
//         context: {
//           root,
//           col,
//           row
//         }
//       } = node
//       const columns = root.context.columns
//       let result = row >= columns[col].length - 1
//       if (!result) {
//         let onOff = true
//         findNode(node, 'after', 'rowspan', (nodes) => {
//           onOff = result = !nodes.every(e => e.options.colspan === node.options.colspan) || nodes.every(e => e.options.isMerged)
//         })
//         result = onOff
//       }
//       return result
//     },
//     get isDisableMargeTop() {
//       const {
//         context: {
//           root,
//           col,
//           row
//         }
//       } = node
//       const columns = root.context.columns
//       let result = row <= 0
//       if (!result) {
//         let onOff = true
//         findNode(node, 'before', 'rowspan', (nodes) => {
//           onOff = result = !nodes.every(e => e.options.colspan === node.options.colspan) || nodes.every(e => e.options.isMerged)
//         })
//         result = onOff
//       }
//       return result
//     },
//     get isDisableSplitColumn() {
//       return node.options.colspan === 1
//     },
//     get isDisableSplitRow() {
//       return node.options.rowspan === 1
//     },
//     get isDisableDelRow() {
//       const nodes = getNodes(node, 'colspan')
//       const rowspanNodes = getNodes(node, 'rowspan')
//       return (rowspanNodes.length === 1 || rowspanNodes.filter(e => !e.options.isMerged).length === 1) || !nodes.every(e => e.options.rowspan === node.options.rowspan)
//     },
//     get isDisableDelColumn() {
//       const nodes = getNodes(node, 'rowspan')
//       const colspanNodes = getNodes(node, 'colspan')
//       return (colspanNodes.length === 1 || colspanNodes.filter(e => !e.options.isMerged).length === 1) || !nodes.every(e => e.options.colspan === node.options.colspan)
//     },
//     merge(type) {
//       const {
//         context: {
//           root,
//           col,
//           row
//         }
//       } = node
//       switch (type) {
//         case 'left':
//           findNode(node, 'before', 'colspan', (nodes, callBack) => {
//             callBack()
//           })
//           break
//         case 'right':
//           findNode(node, 'after', 'colspan', (nodes, callBack) => {
//             callBack()
//           })
//           break
//         case 'top':
//           findNode(node, 'before', 'rowspan', (nodes, callBack) => {
//             callBack()
//           })
//           break
//         case 'bottom':
//           findNode(node, 'after', 'rowspan', (nodes, callBack) => {
//             callBack()
//           })
//           break
//         case 'row':
//           while (root.rows[row].columns.length > root.rows[row].columns[0].options.colspan) {
//             findNode(root.rows[row].columns[0], 'after', 'colspan', (nodes, callBack) => {
//               callBack()
//             })
//           }
//           break
//         case 'column':
//           while (root.context.columns[col].length > root.context.columns[col][0].options.rowspan) {
//             findNode(root.context.columns[col][0], 'after', 'rowspan', (nodes, callBack) => {
//               callBack()
//             })
//           }
//           break
//         default:
//       }
//     },
//     insert(type) {
//       const {
//         context: {
//           root,
//           col,
//           row
//         }
//       } = node
//       switch (type) {
//         case 'left':
//           appendNodes(node, 'before', 'colspan')
//           // root.rows.forEach(e => {
//           //   addContext(e, root, false)
//           // })
//           break
//         case 'right':
//           appendNodes(node, 'after', 'colspan')
//           break
//         case 'top':
//           appendNodes(node, 'before', 'rowspan')
//           break
//         case 'bottom':
//           appendNodes(node, 'after', 'rowspan')
//           break
//       }
//     },
//     split(type) {
//       const {
//         context: {
//           root,
//           col,
//           row
//         }
//       } = node
//       const nodes = getNodes(node, type === 'column' ? 'colspan' : 'rowspan')
//       switch (type) {
//         case 'column':
//           //  zheliyoudu  没有考虑底层
//           nodes.slice(col, col + node.options.colspan).forEach(e => {
//             e.options.colspan = 1
//             e.options.isMerged = false
//             if (e.options.rowspan > 1) {
//               const nodes = getNodes(e, 'rowspan')
//               nodes.slice(row + 1, row + e.options.rowspan).forEach((e) => {
//                 e.options.colspan = 1
//               })
//             }
//           })
//           break
//         case 'row':
//           nodes.slice(row, row + node.options.rowspan).forEach(e => {
//             e.options.rowspan = 1
//             e.options.isMerged = false
//             if (e.options.colspan > 1) {
//               const nodes = getNodes(e, 'colspan')
//               nodes.slice(col + 1, col + e.options.colspan).forEach((e) => {
//                 e.options.rowspan = 1
//               })
//             }
//           })
//           break
//       }
//     },
//     del(type) {
//       const {
//         context: {
//           root,
//           col,
//           row
//         }
//       } = node
//       const nodes = getNodes(node, type === 'column' ? 'colspan' : 'rowspan')//
//       switch (type) {
//         case 'column':
//           root.rows.forEach(e => {
//             e.columns.splice(col, node.options.colspan)
//             addContext(e, root)
//           })
//           break
//         case 'row':
//           root.rows.splice(row, node.options.rowspan)
//           root.rows.forEach(e => {
//             addContext(e, root)
//           })
//           break
//       }
//     }
//   }

//   Object.defineProperty(node, 'context', {
//     value: context,
//     writable: false,
//     enumerable: false,
//     configurable: true
//   })
//   let nodes = []
//   if (node.type === 'subform') {
//     nodes = node.list[0]
//   } else {
//     nodes = node.columns || node.list || node.rows || []
//   }
//   nodes.forEach(e => {
//     addContext(e, node, fn)
//   })
// }


 return <el-aside class={[ns.b()]} width={ER.props.configPanelWidth}>
        <el-breadcrumb
          class={[ns.e('breadcrumb')]}
          separator-icon={() => (
            <svg viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg">
              <path
                fill="currentColor"
                d="M340.864 149.312a30.592 30.592 0 0 0 0 42.752L652.736 512 340.864 831.872a30.592 30.592 0 0 0 0 42.752 29.12 29.12 0 0 0 41.728 0L714.24 534.336a32 32 0 0 0 0-44.672L382.592 149.376a29.12 29.12 0 0 0-41.728 0z"
              />
            </svg>
          )}
          {...utils.addTestId('configPanel:breadcrumb')}
        >
          {bars.value.map((item, index) => (
            <el-breadcrumb-item
              key={index}
              onClick={() => {
                if (index !== bars.value.length - 1 && item.node.value !== 'placeholder') {
                  handleBreadcrumbClick(item.node);
                }
              }}
            >
              {item.node.value === 'placeholder' ? '...' : item.label}
            </el-breadcrumb-item>
          ))}
        </el-breadcrumb>

        <el-form ref="form" model={target} rules={rules} label-width="120px" label-position="top">
          <el-scrollbar>
            <div class={[ns.e('wrap')]}>
              {isSelectAnyElement && <PanelsConfigComponentsPropsPanel key={target.id} />}
              {isSelectRoot && <GlobalConfigPanel />}
            </div>
          </el-scrollbar>
        </el-form>
      </el-aside>


<<<<<<< HEAD
       // case 'subform':
          //   if (unref(isEditModel) || _.get(state.fieldsLogicState.get(element), 'visible', undefined) !== 0) {
          //     node = (<LayoutSubformLayout key={element.id} data={element} parent={props.data}></LayoutSubformLayout>)
          //   }
          //   break




          // let form = this.form
        // let items = form.items
        // let curIndex = items.findIndex((item) => item === this)
        // if (curIndex === -1) {
        //     curIndex = items.length//
        // }
        // let preItems = items.slice(0, curIndex)
        // let preSpans = preItems.map((item) => item.getSpan())
        // let preSpan = preSpans.reduce((a, b) => a + b, 0)//
        // let rowIndex = Math.ceil((preSpan + this.getSpan()) / 24)
        // let rows = form.getLayoutRows()//
        // let length = rows.length
        // let tr: TableRow = null
        // if (length < rowIndex) {
        //     tr = this.createTrRow()
        //     form.addTrRow(tr)
        // } else {
        //     tr = rows.slice(-1).pop()
        // }
        // return tr
=======
      // drop(e) {
    //   if (!prevEl || !e.activeSortable) {
    //     return false
    //   }
    //   const isBlock = _.get(e, 'activeSortable.options.dataSource', false) === 'block'
    //   const {
    //     dragEl,
    //     target
    //   } = e
    //   const oldEl = getDragElement(dragEl)
    //   const newElement = ER.wrapElement(_.cloneDeep(oldEl), inserRowIndex !== '', true, isBlock)
    //   if (!isBlock) {
    //     if (oldEl.context) {
    //       oldEl.context.delete()
    //     }
    //   }
    //   if (inserRowIndex !== '') {
    //     let store = []
    //     if (prevSortable.options.parent.type === 'subform') {
    //       store = prevSortable.options.parent.list[0]
    //     } else {
    //       store = Array.isArray(prevSortable.options.parent) ? prevSortable.options.parent : prevSortable.options.parent.list
    //     }
    //     store.splice(inserRowIndex, 0, newElement)
    //     utils.addContext(store[inserRowIndex], prevSortable.options.parent)
    //   }
    //   if (inserColIndex !== '') {
    //     const {
    //       el: {
    //         __draggable_component__: {
    //           list
    //         }
    //       },
    //       el,
    //       constructor: {
    //         utils: sortableUtils
    //       }
    //     } = prevSortable
    //     list.splice(inserColIndex, 0, newElement)
    //     utils.addContext(newElement, prevSortable.options.parent[sortableUtils.index(prevSortable.el.parentNode)])
    //   }
    //   if (inserColIndex !== '' || inserRowIndex !== '') {
    //     utils.deepTraversal(newElement, (node) => {
    //       if (utils.checkIsField(node)) {
    //         ER.addField(node)
    //       }
    //     })
    //     nextTick(() => {
    //       ER.setSelection(newElement)
    //     })
    //   }
    //   resetStates()
    // }
>>>>>>> refs/remotes/origin/main


// const addValidate = (result, node, isPc, t, state, ExtraParams) => {
//   const {
//     options
//   } = node
//   if (isPc) {
//     result.prop = node.context && node.context.parents.map((e, index) => {
//       let result = ''
//       if (!index) {
//         result = e.context.parent.indexOf(e)
//       } else {
//         const parent = e.context.parent
//         let nodes = []
//         if (parent.type === 'subform') {
//           const {
//             x,
//             y
//           } = findPosition(e, parent)
//           result += `list.${y}.${x}`
//         } else {
//           if (parent.columns) {
//             nodes = parent.columns
//             result += 'columns.'
//           } else if (parent.list) {
//             nodes = parent.list
//             result += 'list.'
//           } else if (parent.rows) {
//             nodes = parent.rows
//             result += 'rows.'
//           }
//           result += nodes.indexOf(e)
//         }
//       }
//       return result
//     }).join('.') + '.options.defaultValue'
//   }

//   const obj: any = {
//   }
//   const validator = (...arg0) => new Promise((...arg1: any) => {
//     const resolve = () => {
//       arg1[0]()
//     }
//     const reject = isPc
//       ? arg1[1]
//       : (message) => {
//         obj.message = message
//         arg1[0](false)
//       }
//     let value = isPc ? arg0[1] : arg0[0]
//     if (/^(signature|radio|checkbox|select|html)$/.test(node.type)) {
//       value = options.defaultValue
//     }
//     const newValue = options.isShowTrim ? value.trim() : value
//     if (node.type === 'subform') {
//       const allFields = utils.findSubFormAllFields(node)
//       if (result.required) {
//         if (allFields.length) {
//           if (allFields.some(e => utils.isEmpty(e.options.isShowTrim ? e.options.defaultValue.trim() : e.options.defaultValue))) {
//             reject(t('er.validateMsg.required'))
//           }
//         } else {
//           reject(t('er.validateMsg.required'))
//         }
//       } else {
//         resolve()
//       }
//     } else {
//       let isRequired = result.required
//       if (state.mode === 'preview' && utils.checkIsInSubform(node)) {
//         const parent = node?.context?.parent?.context?.parent
//         if (parent) {
//           const {
//             readOnly,
//             required
//           } = getLogicStateByField(parent, state.fieldsLogicState)
//           const parentProps: any = useProps(state, parent, isPc, false, false, t, ExtraParams).value
//           if (required !== undefined) {
//             isRequired = parentProps.required
//           }
//         }
//       }
//       if (isRequired && node.type !== 'subform' && utils.isEmpty(newValue)) {
//         reject(t('er.validateMsg.required'))
//         return
//       }
//       if (/^(select|checkbox|radio)$/.test(node.type)) {
//         if ((_.isArray(node.options.defaultValue) ? node.options.defaultValue : [node.options.defaultValue]).includes('other')) {
//           const key = node.key + '_other'
//           if (!state.othersFiles[key]) {
//             reject(t('er.validateMsg.placeholder3'))
//             return false
//           }
//         }
//       }
//     }
//     switch (node.type) {
//       case 'input':
//         switch (options.renderType) {
//           case 1:
//             if (!!newValue && options.isShowWordLimit && newValue.length < options.min) {
//               reject(t('er.validateMsg.limitWord', { min: options.min }))
//             } else {
//               resolve()
//             }
//             break
//           case 2:
//             if (!!newValue && !/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/.test(newValue)) {
//               reject(t('er.validateMsg.email'))//
//             } else {
//               resolve()
//             }
//             break
//           case 3:
//             if (!!newValue && !/^(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)|(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$)$/.test(newValue)) {
//               reject(t('er.validateMsg.IdNumber'))
//             } else {
//               resolve()
//             }
//             break
//           case 4:
//             if (!!newValue && !/^(13[0-9]|15[012356789]|166|17[3678]|18[0-9]|14[57])[0-9]{8}$/.test(newValue)) {
//               reject(t('er.validateMsg.phone'))
//             } else {
//               resolve()
//             }
//             break
//           case 5:
//             if (!!newValue && !/^https?:\/\/(([a-zA-Z0-9_-])+(\.)?)*(:\d+)?(\/((\.)?(\?)?=?&?[a-zA-Z0-9_-](\?)?)*)*$/i.test(newValue)) {
//               reject(t('er.validateMsg.http'))
//             } else {
//               resolve()
//             }
//             break
//         }
//         break
//       case 'textarea':
//         if (!!newValue && options.isShowWordLimit && newValue.length < options.min) {
//           reject(t('er.validateMsg.limitWord', { min: options.min }))
//         } else {
//           resolve()
//         }
//         break
//       default:
//         resolve()
//         break
//     }
//   })
//   if (isPc) {
//     obj.required = options.required
//     obj.asyncValidator = validator
//   } else {
//     obj.validator = validator
//   }
//   result.rules = [obj]
// }













<template>
    <div class="container">
        <h2 class="title">拖拽排序示例</h2>
        <draggable v-model="items" group="list" @start="onStart" @end="onEnd" @change="onChange" item-key="id"
            class="list">
            <template #item="{ element }">
                <div class="list-item">{{ element.name }}</div>
            </template>
        </draggable> 
    </div>
</template>

<script>
import draggable from "@ER/vueDraggable/vuedraggable";

export default {
    components: { draggable },
    data() {
        return {
            items: [
                { id: 1, name: "苹果 🍎" },
                { id: 2, name: "香蕉 🍌" },
                { id: 3, name: "橙子 🍊" },
                { id: 4, name: "葡萄 🍇" }
            ]
        };
    },
    methods: {
        onStart(evt) {
            console.log("开始拖拽:", evt);
        },
        onEnd(evt) {
            console.log("拖拽结束:", evt);
        },
        onChange(evt) {
            console.log("列表已更新:", this.items);
        }
    }
};
</script>

<style>
.container {
    max-width: 400px;
    margin: auto;
    text-align: center;
}

.title {
    font-size: 20px;
    margin-bottom: 10px;
}

.list {
    border: 2px dashed #ccc;
    padding: 10px;
    border-radius: 8px;
}

.list-item {
    padding: 10px;
    margin: 5px 0;
    background: #f8f8f8;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: grab;
}
</style>








//在代码演示中，我们展示了如何在表格中渲染自定义的 Vue 组件。具体包括：
//- **性别列**：通过 `ArcoDesignVue.Tag` 组件来渲染性别信息，并根据性别值动态改变标签颜色。
//- **评论列**：通过 `ArcoDesignVue.Comment` 组件来渲染评论信息，并包含点赞、收藏、回复等操作按钮。

const app = createApp({
  template: `
    <vue-list-table :options="option" :records="records" ref="tableRef" />
  `,
  data() {
    return {
      tableRef: ref(null),
      option: {
        records: [
          { gender: '男', name: '张三', age: 20, city: '北京' },
          { gender: '女', name: '李四', age: 21, city: '上海' },
          { gender: '男', name: '王五', age: 22, city: '广州' },
          { gender: '女', name: '赵六', age: 23, city: '深圳' },
          { gender: '男', name: '孙七', age: 24, city: '成都' },
          { gender: '女', name: '周八', age: 25, city: '重庆' },
          { gender: '男', name: '吴九', age: 26, city: '西安' }
        ],
        columns: [
          {
            field: 'name',
            title: '姓名',
            width: 200,
             headerCustomLayout: args => {
              const { table, row, col, rect, value } = args;
              const { height, width } = rect ?? table.getCellRect(col, row);

              const container = new VTable.CustomLayout.Group({
                height,
                width,
                display: 'flex',
                alignItems: 'center',
                vue: {
                  element: h(ArcoDesignVue.Tag, { color: 'green' }, value),
                  container: table.headerDomContainer
                }
              });
              return {
                rootContainer: container,
                renderDefault: false
              };
            },
            customLayout: args => {
              const { table, row, col, rect, value } = args;
              const { height, width } = rect ?? table.getCellRect(col, row);

              const container = new VTable.CustomLayout.Group({
                height,
                width,
                display: 'flex',
                alignItems: 'center',
                vue: {
                  element: h('div', { color: value === '女' ? 'magenta' : 'arcoblue' }, value),
                  container: table.bodyDomContainer
                }
              });

              return {
                rootContainer: container,
                renderDefault: false
              };
            }
          },
          { field: 'age', title: '年龄', width: 150 },
          { field: 'city', title: '城市', width: 200 },
          {
            field: 'gender',
            title: '性别',
            width: 100,
            headerCustomLayout: args => {
              const { table, row, col, rect, value } = args;
              const { height, width } = rect ?? table.getCellRect(col, row);

              const container = new VTable.CustomLayout.Group({
                height,
                width,
                display: 'flex',
                alignItems: 'center',
                vue: {
                  element: h(ArcoDesignVue.Tag, { color: 'green' }, value),
                  container: table.headerDomContainer
                }
              });
              return {
                rootContainer: container,
                renderDefault: false
              };
            },
            customLayout: args => {
              const { table, row, col, rect, value } = args;
              const { height, width } = rect ?? table.getCellRect(col, row);

              const container = new VTable.CustomLayout.Group({
                height,
                width,
                display: 'flex',
                alignItems: 'center',
                vue: {
                  element: h('div', { color: value === '女' ? 'magenta' : 'arcoblue' }, value),
                  container: table.bodyDomContainer
                }
              });

              return {
                rootContainer: container,
                renderDefault: false
              };
            }
          },
          {
            field: 'comment',
            title: '评论',
            width: 300,
            customLayout: args => {
              const { table, row, col, rect, value } = args;
              const { height, width } = rect ?? table.getCellRect(col, row);

              const container = new VTable.CustomLayout.Group({
                height,
                width,
                display: 'flex',
                alignItems: 'center',
                vue: {
                  element: h(
                    ArcoDesignVue.Comment,
                    { author: 'Socrates', content: value, datetime: '1 hour' },
                    {
                      actions: () => [
                        h('span', { key: 'heart', style: { cursor: 'pointer' } }, [h('span', 'Like')]),
                        h('span', { key: 'star', style: { cursor: 'pointer' } }, [h('span', 'Collect')]),
                        h('span', { key: 'reply', style: { cursor: 'pointer' } }, [h('span', 'Reply')])
                      ],
                      avatar: () => [
                        h(
                          ArcoDesignVue.Avatar,
                          {},
                          {
                            default: () => [
                              h('img', {
                                alt: 'avatar',
                                src: 'https://p1-arco.byteimg.com/tos-cn-i-uwbnlip3yd/3ee5f13fb09879ecb5185e440cef6eb9.png~tplv-uwbnlip3yd-webp.webp'
                              })
                            ]
                          }
                        )
                      ]
                    }
                  ),
                  container: table.bodyDomContainer
                }
              });

              return {
                rootContainer: container,
                renderDefault: false
              };
            }
          }
        ],
        defaultHeaderRowHeight: 40,
        defaultRowHeight: 80,
        customConfig: {
          createReactContainer: true
        }
      }
    };
  }
});





 com = (
                  <dropdownCom
                    class={ns.b()}
                    ref={(e) => btn.registerRef('dropdown', e)}
                    items={btn.buttons.map((item) => {
                      return { button: item }
                    })}
                    v-slots={{
                      default: (item) => {
                        return (
                          <ElButton
                            onClick={() => runBtnFn(btn)}
                            style={{ height: '100%' }}
                          >
                            {btn.getLabel()}
                          </ElButton>
                        )
                      },
                      dropdown: (item) => {
                        let mc = (
                          <MenuCom
                            class={btnG.b()}
                            items={btn.buttons.map((item) => {
                              return { button: item } //
                            })}
                            v-slots={{
                              itemTitle: (item) => {
                                let _btn = item.config.button
                                return (
                                  <ElButton
                                    onClick={() => runBtnFn(_btn)}
                                    style={{ height: '100%' }}
                                  >
                                    {_btn.getLabel()}
                                  </ElButton>
                                )
                              },
                            }}
                          ></MenuCom>
                        )
                        return mc
                      },
                    }}
                  ></dropdownCom>
                )



                 // com = (
                //   <dropdownCom
                //     v-slots={{
                //       default: (config) => {
                //         const dropdown = config.dropdown
                //         let _com1 = (
                //           <div
                //             onClick={() => {
                //               dropdown.showDropdown()
                //             }}
                //             onMouseleave={() => {}}
                //             class="v-contextmenu"
                //             style={{ width: '100px', position: 'relative' }}
                //           >
                //             <ContextmenuItem>{btn.getLabel()}</ContextmenuItem>
                //           </div>
                //         )
                //         return _com1
                //       },

                //       dropdown: () => {
                //         let menu = <Contextmenu></Contextmenu>
                //         return menu
                //       },
                //     }} //
                //   ></dropdownCom>
                // )



                // if (this.permission.loadData == false) {
    //   //@ts-ignore
    //   if (this.permission.loadDataTime != null) {
    //     return
    //   }
    //   //@ts-ignore
    //   this.permission.loadDataTime = setTimeout(() => {
    //     this.permission.loadDataTime = null
    //     this.permission.loadData = true
    //     this.loadData()
    //   }, 1000);
    //   return //
    // }


    // nextTick(async () => {
    //   let now = Date.now().toString()
    //   console.time(now)
    //   if (globalValue.length > 0) {
    //     _data1 = _data1.filter((v) => {
    //       let _shtml = v['_shtml'] //
    //       let reg = new RegExp(globalValue, 'g') //
    //       if (reg.test(_shtml)) {
    //         return true
    //       }
    //       return false
    //     })
    //   }
    //   const sortconfig = _sortState //自定义的排序配置
    //   //@ts-ignore
    //   const _sortConfig = sortconfig?.sort((s1, s2) => {
    //     //@ts-ignore
    //     return 0 //
    //   })
    //   let _data3 = _data1 //
    //   if (_filterConfig.length > 0) {
    //     for (const { field, indexArr } of _filterConfig) {
    //       if (indexArr?.length > 0) {
    //         const indexSet = new Set(indexArr)
    //         _data3 = _data3.filter((item) => indexSet.has(item[field]))
    //       }
    //     }
    //   }
    //   _data3 = _sortConfig//
    //     ?.reduce((res, item, i) => {
    //       const field = item.field
    //       const type = item.type
    //       let order = item.order
    //       // debugger//
    //       const colType: string = 'number' //类型//
    //       const _data4 = combineAdjacentEqualElements(
    //         res, //
    //         field,
    //         i,
    //         // colType,
    //         // type,
    //         type,
    //         order,
    //       )
    //       return _data4
    //     }, _data1)
    //     .flat(sortconfig?.length)

    //   console.timeEnd(now) //
    //   this.updateCanvas({
    //     data: _data3, //
    //   })
    // })
    

     // _internalIconsStyle: {},
    // isPivot: false,
    // name: 'DEFAULT',
    // internalTheme: {
    //   obj: {
    //     name: 'DEFAULT',
    //     underlayBackgroundColor: '#FFF',
    //     defaultStyle: {
    //       borderColor: '#E1E4E8',
    //       color: '#000',
    //       bgColor: '#ECF1F5',
    //     },
    //     headerStyle: {
    //       fontSize: 16,
    //       fontWeight: 'bold',
    //       bgColor: '#ECF1F5',
    //       hover: {
    //         cellBgColor: '#CCE0FF',
    //         inlineRowBgColor: '#F3F8FF',
    //         inlineColumnBgColor: '#F3F8FF',
    //       },
    //     },
    //     rowHeaderStyle: {
    //       fontSize: 16,
    //       fontWeight: 'bold',
    //       bgColor: '#ECF1F5',
    //       hover: {
    //         cellBgColor: '#CCE0FF',
    //         inlineRowBgColor: '#F3F8FF',
    //         inlineColumnBgColor: '#F3F8FF',
    //       },
    //     },
    //     cornerHeaderStyle: {
    //       fontSize: 16,
    //       fontWeight: 'bold',
    //     },
    //     bodyStyle: {
    //       fontSize: 14,
    //       hover: {
    //         cellBgColor: '#CCE0FF',
    //         inlineRowBgColor: '#F3F8FF',
    //         inlineColumnBgColor: '#F3F8FF',
    //       },
    //     },
    //     frameStyle: {
    //       borderColor: '#E1E4E8',
    //       borderLineWidth: 1,
    //       borderLineDash: [],
    //       cornerRadius: 0,
    //       shadowBlur: 0,
    //       shadowOffsetX: 0,
    //       shadowOffsetY: 0,
    //       shadowColor: 'black',
    //     },
    //     columnResize: {
    //       lineWidth: 1,
    //       lineColor: '#416EFF',
    //       bgColor: '#D9E2FF',
    //       width: 3,
    //     },
    //     frozenColumnLine: {
    //       shadow: {
    //         width: 3,
    //         startColor: 'rgba(225, 228, 232, 0.6)',
    //         endColor: 'rgba(225, 228, 232, 0.6)',
    //       },
    //     },
    //     selectionStyle: {
    //       cellBgColor: 'rgba(0, 0, 255,0.1)',
    //       cellBorderLineWidth: 2,
    //       cellBorderColor: '#0000ff',
    //     },
    //     tooltipStyle: {
    //       bgColor: '#FFF',
    //       color: '#000',
    //       fontSize: 12,
    //       fontFamily: 'Arial,sans-serif',
    //     },
    //   },
    //   superTheme: {
    //     name: 'DEFAULT',
    //     underlayBackgroundColor: '#FFF',
    //     defaultStyle: {
    //       borderColor: '#E1E4E8',
    //       color: '#000',
    //       bgColor: '#ECF1F5',
    //     },
    //     headerStyle: {
    //       fontSize: 16,
    //       fontWeight: 'bold',
    //       bgColor: '#ECF1F5',
    //       hover: {
    //         cellBgColor: '#CCE0FF',
    //         inlineRowBgColor: '#F3F8FF',
    //         inlineColumnBgColor: '#F3F8FF',
    //       },
    //     },
    //     rowHeaderStyle: {
    //       fontSize: 16,
    //       fontWeight: 'bold',
    //       bgColor: '#ECF1F5',
    //       hover: {
    //         cellBgColor: '#CCE0FF',
    //         inlineRowBgColor: '#F3F8FF',
    //         inlineColumnBgColor: '#F3F8FF',
    //       },
    //     },
    //     cornerHeaderStyle: {
    //       fontSize: 16,
    //       fontWeight: 'bold',
    //     },
    //     bodyStyle: {
    //       fontSize: 14,
    //       hover: {
    //         cellBgColor: '#CCE0FF',
    //         inlineRowBgColor: '#F3F8FF',
    //         inlineColumnBgColor: '#F3F8FF',
    //       },
    //     },
    //     frameStyle: {
    //       borderColor: '#E1E4E8',
    //       borderLineWidth: 1,
    //       borderLineDash: [],
    //       cornerRadius: 0,
    //       shadowBlur: 0,
    //       shadowOffsetX: 0,
    //       shadowOffsetY: 0,
    //       shadowColor: 'black',
    //     },
    //     columnResize: {
    //       lineWidth: 1,
    //       lineColor: '#416EFF',
    //       bgColor: '#D9E2FF',
    //       width: 3,
    //     },
    //     frozenColumnLine: {
    //       shadow: {
    //         width: 3,
    //         startColor: 'rgba(225, 228, 232, 0.6)',
    //         endColor: 'rgba(225, 228, 232, 0.6)',
    //       },
    //     },
    //     selectionStyle: {
    //       cellBgColor: 'rgba(0, 0, 255,0.1)',
    //       cellBorderLineWidth: 2,
    //       cellBorderColor: '#0000ff',
    //     },
    //     tooltipStyle: {
    //       bgColor: '#FFF',
    //       color: '#000',
    //       fontSize: 12,
    //       fontFamily: 'Arial,sans-serif',
    //     },
    //   },
    // },
    nextTick(async () => {
      // let system = this.getSystem()
      // let tableConfig = await system.getDefaultPageLayout(this.tableName) //
      // console.log(tableConfig, 'tableConfig') //
    })


     com = (
        <formCom
          itemSpan={24}
          items={[
            {
              field: 'email',
              label: '邮箱',
              required: true,
            },
            {
              field: 'password',
              label: '密码',
              required: true,
              password: true,
            },
          ]} //
        ></formCom> //
      )


       let btns = [
      {
        label: '按钮1',
      },

      {
        label: '按钮5',
        children: [
          {
            label: '按钮5-111',
          },
        ],
        items: [
          {
            label: '按钮5-222',
          },
          {
            label: '按钮5-333',
            items: [
              {
                label: '按钮5-444',
                disabled: true,
              }, //
            ],
          },
        ],
      },
    ]


    {/* {isFoldFields.value && (
                  <ElHeader class="operation" style="display: flex;flex-derection: row;justify-content: space-between;">
                    <div>
                      <Icon class="icon" icon="save" onClick={() => handleOperation(4)} />
                      {props.isShowClear && <Icon class="icon" icon="clear0" onClick={() => handleOperation(2)} />}
                      {slots['operation-left'] && slots['operation-left']()}
                    </div>
                    <div>
                      <DeviceSwitch modelValue={state.platform} onUpdate:modelValue={switchPlatform} />
                      <ElButton
                        onClick={() => {
                          formIns.runTestMethod() //
                        }}
                      >
                        测试
                      </ElButton>
                    </div>
                    <div>
                      {slots['operation-right'] && slots['operation-right']()}
                      {props.isShowI18n && (
                        <ElDropdown onCommand={(command) => fireEvent('lang', command)}>
                          <Icon class="icon" icon="language" />
                          {{
                            dropdown: () => (
                              //
                              <ElDropdownMenu>
                                <ElDropdownItem command="zh-cn" disabled={lang.value === 'zh-cn'}>
                                  中文
                                </ElDropdownItem>
                                <ElDropdownItem command="en" disabled={lang.value === 'en'}>
                                  English
                                </ElDropdownItem>
                              </ElDropdownMenu>
                            ),
                          }}
                        </ElDropdown>
                      )}
                      <Icon class="icon" icon="preview" onClick={() => handleOperation(3)} />
                    </div>
                  </ElHeader>
                )} */}




                let items = this.items
    let rows = []
    let _pcLayout = this._pcLayout
    if (_pcLayout != null) {
      return _pcLayout //
    }
    let _index = 0
    for (const item of items) {
      let index = item.getRowIndex()
      let _row = rows[index]
      if (_row == null) {
        let nRow = this.createTrRow()
        rows[index] = nRow
        let initCols = Array(24)
          .fill(null)
          .map((row, i) => {
            let id = this.uuid()
            return {
              type: 'td',
              style: {},
              options: {
                colspan: 1,
                rowspan: 1,
                isMerged: false,
              },
              id: id,
              key: `td_${id}`,
              list: [],
            }
          })
        nRow.columns.push(...initCols)
        _row = nRow
        _index = 0
      }
      let _cols = item.getTdColumn()
      let span = item.getSpan()
      // _row.columns.push(...item.getTdColumn())
      _row.columns.splice(_index, span, ..._cols)
      _index += span //
    }
    let pcLayout = this.pcLayout
    pcLayout.columns[0].rows = rows
    if (pcLayout.columns[0].rows.length == 0) {
      let nRow = this.createTrRow()
      let td = Array(1)
        .fill(null)
        .map((row, i) => {
          let id = this.uuid()
          return {
            type: 'td',
            style: {},
            options: {
              colspan: 1,
              rowspan: 1,
              isMerged: false,
            },
            id: id,
            key: `td_${id}`,
            list: [],
          }
        })
      nRow.columns.push(...td)
      pcLayout.columns[0].rows.push(nRow) //
    }
    return pcLayout

     let offset = Math.ceil(
                (oldWidth +
                  Math.round((e.clientX - oldX) / columnWidth) * columnWidth) /
                  columnWidth,
              )
              if (offset >= 24) {
                offset = 24
              }
              if (offset <= 6) {
                offset = 6
              }
              let isCol = props.data.type == 'col'
              if (isCol) {
                let allCols = props.data?.context?.parent?.columns || []
                let allSpan = allCols
                  .filter((col) => col.id !== props.data.id)
                  .map((col) => col.options.span)
                  .reduce((pre, cur) => pre + cur)
                let _allSpan = allSpan + offset
                if (_allSpan > 24) {
                  return //
                }
                props.data.options.span = offset
              }


              // _props.headerCustomLayout = (args) => {
    //   const { table, row, col, rect } = args
    //   const { height, width } = rect ?? table.getCellRect(col, row)
    //   // console.log(width,'testWidth')//
    //   const container = createGroup({
    //     height,
    //     width,
    //     display: 'flex',
    //     flexDirection: 'column',
    //     alignItems: 'center',
    //     justifyContent: 'center',
    //   })
    //   const checkboxGroup = createGroup({
    //     display: 'flex',
    //     flexDirection: 'column',
    //     boundsPadding: [0, 0, 0, 0],
    //     justifyContent: 'center', //
    //   })
    //   container.appendChild(checkboxGroup)
    //   const checkbox1 = new CheckBox({
    //     text: {
    //       text: '', //
    //     },
    //     disabled: false, //
    //     checked: _this.table.isCheckAll, //
    //     boundsPadding: [0, 0, 0, 0],
    //   }) //
    //   checkbox1.render()
    //   checkboxGroup.appendChild(checkbox1)
    //   checkbox1.addEventListener('checkbox_state_change', (e) => {
    //     const target = e.target ////
    //     let attributes = target.attribute //
    //     let checked = attributes.checked
    //     _this.table.updateCheckboxAll(checked)
    //   }) //
    //   return {
    //     rootContainer: container,
    //     renderDefault: false,
    //   }
    // } //



    let allFields = row.fields
    let allDetailTable = allFields
      .map((row) => {
        let tableType = row['tableType']
        if (tableType == 'detail') {
          return row
        }
      })
      .filter((row) => row != null) //获取所有的子表
    let tabLayout = {
      // ...this.createNodeIdKey('tab'),
      ...this.createNodeIdKey('inline'),
      columns: [
        {
          ...this.createNodeIdKey('grid'),
          options: {
            span: 24,
            offset: 0,
            push: 0,
            pull: 0,
            style: {},
          },
          columns: [
            {
              ...this.createNodeIdKey('col'),
              list: [
                {
                  ...this.createNodeIdKey('inline'),
                  columns: [
                    {
                      ...this.createNodeIdKey('tabs'),
                      columns: [
                        allDetailTable.map((row) => {
                          let _t = this.createColLayout(row.id)
                          return _t //
                        }),
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    }
    let fL = []
    let _formLayout = {
      ...this.createNodeIdKey('inline'),
      columns: [
        {
          ...this.createNodeIdKey('grid'),
          options: {
            span: 24,
            offset: 0,
            push: 0,
            pull: 0,
            style: {},
          },
          columns: [
            {
              ...this.createNodeIdKey('col'),
              list: [
                {
                  ...this.createNodeIdKey('inline'),
                  columns: [
                    {
                      ...this.createNodeIdKey('tabs'),
                      columns: fL,
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    }
    let pcLayout = [_formLayout]
    if (allDetailTable.length > 0) {
      pcLayout.push(tabLayout) //
    }
    return pcLayout
    // let _props = getDefaultPageProps()
    // let obj = {} //
    // Object.entries(_props).forEach(([key, value]) => {
    //   //@ts-ignore
    //   let _default = value.default
    //   if (typeof _default == 'function' && value.type != Function) {
    //     //@ts-ignore
    //     _default = _default() //
    //   }
    //   obj[key] = _default //
    // })
    // obj = {
    //   ...obj,
    //   ...layoutConfig,
    // } //
    // //@ts-ignore
    // obj.tableName = tableName
    // let pageDesign = new PageDesign(obj)
    // pageDesign.tableName = tableName //
    // pageDesign.setLayoutData(layoutConfig)
    // //这是编辑的页面//
    // return pageDesign


     // {
        //   type: 'dform',
        //   label: '表单',
        //   icon: 'input',
        //   id: 'KRg51faFSk3H2piRFbrQg',
        //   options: {
        //     clearable: true,
        //     isShowWordLimit: false,
        //     renderType: 1,
        //     disabled: false,
        //     showPassword: false,
        //     defaultValue: '',
        //     placeholder: '',
        //     labelWidth: 100,
        //     isShowLabel: true,
        //     required: false,
        //     min: null,
        //     max: null,
        //   },
        //   style: {
        //     width: {
        //       pc: '100%',
        //       mobile: '100%',
        //     },
        //   },
        //   key: 'dform_KRg51faFSk3H2piRFbrQg',
        // },



          let arr = [
            {
              // text: '合并单元格',
              range: {
                start: {
                  col: 3,
                  row: 8,
                },
                end: {
                  col: 7,
                  row: 10,
                },
              },
              style: {
                bgColor: '#ccc',
              },
              customLayout: (args) => {
                const { table, row, col, rect, value } = args
                const { height, width } = rect ?? table.getCellRect(col, row)
                let c = createGroup({
                  height,
                  width,
                  display: 'flex',
                  alignItems: 'center',
                })
                let t = createText({
                  text: '测试',
                  fontSize: 16,
                  fill: 'black',
                  fontWeight: 'bold',
                  boundsPadding: [0, 0, 0, 0],
                  lineDashOffset: 0,
                })
                c.add(t) //
                return {
                  rootContainer: c, //
                }
              },
            },
          ]
          let ins = tableIns.getInstance()
          ins.options.customMergeCell = arr //


           {isFoldFields.value && (
                  <ElHeader class="operation" style="display: flex;flex-derection: row;justify-content: space-between;">
                    <div>
                      <Icon class="icon" icon="save" onClick={() => handleOperation(4)} />
                      {props.isShowClear && <Icon class="icon" icon="clear0" onClick={() => handleOperation(2)} />}
                      {slots['operation-left'] && slots['operation-left']()}
                    </div>
                    <div>
                      <DeviceSwitch modelValue={state.platform} onUpdate:modelValue={switchPlatform} />
                      <ElButton
                        onClick={() => {
                          formIns.runTestMethod() //
                        }}
                      >
                        测试
                      </ElButton>
                    </div>
                    <div>
                      {slots['operation-right'] && slots['operation-right']()}
                      {props.isShowI18n && (
                        <ElDropdown onCommand={(command) => fireEvent('lang', command)}>
                          <Icon class="icon" icon="language" />
                          {{
                            dropdown: () => (
                              //
                              <ElDropdownMenu>
                                <ElDropdownItem command="zh-cn" disabled={lang.value === 'zh-cn'}>
                                  中文
                                </ElDropdownItem>
                                <ElDropdownItem command="en" disabled={lang.value === 'en'}>
                                  English
                                </ElDropdownItem>
                              </ElDropdownMenu>
                            ),
                          }}
                        </ElDropdown>
                      )}
                      <Icon class="icon" icon="preview" onClick={() => handleOperation(3)} />
                    </div>
                  </ElHeader>
                )}


                 // if (gColumns != null) {
        //   list = gColumns
        //   let _el = {
        //     type: 'inline',
        //     columns: [newElement],
        //   }
        //   newElement = _el //
        //   _oldEl1.list.push(newElement) //
        //   newElement = _oldEl1
        //   newElement = ER.wrapElement(newElement, false, true, true) //
        //   inserColIndex = _nIndex //
        //   _parent2 = gColumns //
        // }



         // nSpan = _span - Number(_span1)
                // //使用col进行包裹
                // _nIndex = newIndex
                // _oldEl1 = {
                //   type: 'col',
                //   list: [],
                //   options: {
                //     span: _span1,
                //   },
                // }


                 // (col, row, table) => {
      //   let obj= {
      //     range: {
      //       start: {
      //         col: 3,
      //         row: 8,
      //       },
      //       end: {
      //         col: 7,
      //         row: 10,
      //       },
      //     },
      //     style: {
      //       bgColor: '#ccc',
      //     },
      //   } //
      //   return obj
      // },
      // multipleSort: true,


      _props.headerCustomLayout = (args) => {
      const { table, row, col, rect } = args
      const { height, width } = rect ?? table.getCellRect(col, row)
      // console.log(width,'testWidth')//
      const container = createGroup({
        height: height - 2,
        width: width - 2,
        x: 1,
        y: 1, //
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
      })
      const checkboxGroup = createGroup({
        display: 'flex',
        flexDirection: 'column',
        boundsPadding: [0, 0, 0, 0],
        justifyContent: 'center', //
      })
      container.appendChild(checkboxGroup)
      const checkbox1 = new CheckBox({
        text: {
          text: '', //
        },
        disabled: false, //
        checked: _this.table.isCheckAll, //
        boundsPadding: [0, 0, 0, 0],
      }) //
      checkbox1.render()
      checkboxGroup.appendChild(checkbox1)
      checkbox1.addEventListener('checkbox_state_change', (e) => {
        const target = e.target ////
        let attributes = target.attribute //
        let checked = attributes.checked
        _this.table.updateCheckboxAll(checked)
      }) //
      return {
        rootContainer: container,
        renderDefault: false,
      }
    }

     // borderColor: (config) => {
        //   let _table = config.table
        //   let record = _table.getRecordByCell(config.col, config.row)
        //   let color = 'RGB(225, 228, 232)' //
        //   let _index = record._index
        //   let validateMap = table.validateMap
        //   let errStr = validateMap[_index]
        //   //报错了//
        //   if (errStr) {
        //     let allField = errStr.map((row) => row.field)
        //     if (allField.includes(this.getField())) {
        //       color = 'red'
        //     } //
        //   }
        //   return color
        // },
        // borderLineWidth: (config) => {
        //   let _table = config.table
        //   let record = _table.getRecordByCell(config.col, config.row)
        //   let color = 1 //
        //   let _index = record._index
        //   let validateMap = table.validateMap
        //   let errStr = validateMap[_index]
        //   //报错了//
        //   if (errStr) {
        //     let allField = errStr.map((row) => row.field)
        //     if (allField.includes(this.getField())) {
        //       color = 3
        //     } //
        //   }
        //   return color
        // }, //
        // bgColor: (config) => {
        //   //
        //   let _table = config.table
        //   let record = _table.getRecordByCell(config.col, config.row)
        //   let gValue = table.globalConfig.value
        //   let value = config.value
        //   let color = null
        //   if (record == table.tableData.curRow) {
        //     color = 'RGB(200, 190, 230)'
        //   }
        //   if (gValue.length > 0) {
        //     let reg = new RegExp(gValue, 'g')
        //     if (reg.test(value)) {
        //       color = 'RGB(230, 220, 230)' //
        //     }
        //   }
        //   return color
        // }, //


        // let length = this.table.templateProps.data.length
      // let _length = length / 5



      // let dialogCom = (
      //   <ElDialog destroyOnClose fullscreen class="previewDialog" v-model={state.previewVisible} onClosed={() => (previewPlatform.value = 'pc')}>
      //     {{
      //       header: () => <DeviceSwitch modelValue={previewPlatform.value} onUpdate:modelValue={(val) => handleOperation(7, val)} />,
      //       default: () => (
      //         <ElScrollbar>
      //           <div class={{ previewDialogWrap: true, mobilePreview: previewPlatform.value === 'mobile' }}>
      //             <ErFormPreview {...props} formIns={formIns} ref={setPreviewRef} />
      //           </div>
      //         </ElScrollbar>
      //       ),
      //     }}
      //   </ElDialog>
      // )


      // let _arr = new Array(row).fill(null)
      // let _arr1 = []
      // for (let r of _arr) {
      //   let _r = await this.createDefaultRow(tableName) //
      // }

       // bgColor: (config) => {
        //   let row = config.row
        //   let _col = this.getIndexColor(row)
        //   return _col
        // }, //


         container.on('dblclick', (config) => {
        // console.log('我执行了') //
        // if (this.isHeaderdown != false) {
        //   //执行
        //   let title = this.getTitle()
        //   if (this.table.templateEditCell != null) {
        //     this.table.clearEditCell() //
        //     setTimeout(() => {
        //       this.table.startEditCell(col, row, title) //
        //     }, 100)
        //   } else {
        //     this.table.startEditCell(col, row, title) //
        //   }
        // }
        // this.isHeaderdown = true
        // setTimeout(() => {
        //   this.isHeaderdown = false ////
        // }, 300)
        // let title = this.getTitle()
        // if (this.table.templateEditCell != null) {
        //   this.table.clearEditCell() //
        //   setTimeout(() => {
        //     this.table.startEditCell(col, row, title) //
        //   }, 100)
        // } else {
        //   this.table.startEditCell(col, row, title) //
        // }
      })


        // let instance = this.getInstance()
    // let _index1 = instance.records.findIndex(
    //   (r) => r['_index'] == row['_index'],
    // )
    // let _index2 = instance.records.findIndex(
    //   (r) => r['_index'] == oldCurRow['_index'],
    // )
    // let id = this.uuid()
    // console.time(id)
    // let bodyIndex = instance.getTableIndexByRecordIndex(_index1)
    // let bodyIndex1 = instance.getTableIndexByRecordIndex(_index2)
    // // console.log(bodyIndex, bodyIndex1) //
    // // let _cell=instance.getCellInfo(null,bodyIndex)
    // // let cells = instance.getAllCells(null, bodyIndex)
    // // let cell1 = instance.getAllCells(null, bodyIndex1)
    // // console.log(cells) //
    // console.timeEnd(id) //


      // return () => {
    //   let leftMenu = (
    //     <menuCom
    //       items={systemIns.getMenuItems()}
    //       ref={registerMenu}
    //       showSearch={true}
    //       searchFn={(config) => {
    //         let value = config.value
    //         let item = config.item
    //         let _config = item.config.navname //
    //         let reg = new RegExp(value, 'gi') //
    //         let bool = false
    //         let tableName = item.config.tableName
    //         if (reg.test(_config)) {
    //           bool = true
    //         }
    //         if (reg.test(tableName)) {
    //           bool = true
    //         }
    //         return bool //
    //       }}
    //       v-slots={{
    //         subItemTitle: (item) => {
    //           let config = item.config
    //           let navname = config.navname
    //           return <div>{navname}</div>
    //         },
    //         itemTitle: (item) => {
    //           let config = item.config
    //           let navname = config.navname
    //           let com = <div>{navname}</div> //
    //           return com
    //         },
    //       }}
    //     ></menuCom>
    //   )
    //   let tableTab = (
    //     <tabCom
    //       height={30}
    //       items={systemIns.getTabItems()}
    //       v-slots={{
    //         item: (item) => {
    //           return (
    //             <div class="home-tab-item">
    //               <div class="home-tab-item-label">{item.getLabel()}</div>
    //             </div>
    //           )
    //         },
    //       }}
    //     ></tabCom>
    //   )
    //   const allShowEntity = systemIns.getShowEntityArr() //
    //   let _showCom = allShowEntity.map((item: any) => {
    //     //
    //     let _com = (
    //       <PageCom isDesign={false} key={item.id} formIns={item}></PageCom>
    //     )
    //     return _com
    //   })
    //   return (
    //     <div
    //       class={ns.b()}
    //       style={{ display: 'flex', width: '100vw', height: '100vh' }}
    //     >
    //       <div style={{ width: '300px', height: '100%' }}>{leftMenu}</div>
    //       <div class="flex flex-col flex-1 h-full bg-red">
    //         <div class="w-full bg-white tab-line">{tableTab}</div>
    //         <div class="" style={{ height: '30px' }}>
    //           <er-button-group
    //             items={[
    //               {
    //                 label: 'test',
    //                 fn: async () => {
    //                   // let _b = await systemIns.createPageDesign('t_SdOrder') //
    //                   // console.log(_b, 'testB') //
    //                   systemIns.routeOpen('t_SdOrder') //
    //                 },
    //               },
    //             ]}
    //           ></er-button-group>
    //         </div>
    //         <div class="flex-1">{_showCom}</div>
    //       </div>
    //     </div>
    //   )
    // }

     app.hooks({
    around: [
      async (context, next) => {
        console.log('这个是环绕钩子') //
        await next()
      }, //
    ],
  })

   return () => (
      <div
        style={{
          height: '100vh',
          width: '100vw',
        }}
      >
        <div class="w-full h-full bg-black"></div>
      </div>
    )


     // let _res = await systemIns.createPageEditDesign('t_SdOrder') //
                        // systemIns.openDialog({
                        //   title: '编辑页面',
                        //   width: '1000px',
                        //   height: '500px', //b
                        //   createFn: () => {
                        //     return {
                        //       component: pageCom,
                        //       props: {
                        //         formIns: _res,
                        //       }, //
                        //     }//
                        //   },
                        // })

                        {/* <div class="flex items-center justify-center flex-grow">
                <img
                  src="illustration.png"
                  alt="Illustration"
                  class="object-contain w-full"
                />
              </div>
              <div class="flex mt-6 space-x-6">
                <div class="flex items-center space-x-2">
                  <img src="windows-icon.png" alt="Windows" class="w-5 h-5" />
                  <span class="text-sm">Windows</span>
                </div>
                <div class="flex items-center space-x-2">
                  <img src="mac-icon.png" alt="Mac" class="w-5 h-5" />
                  <span class="text-sm">Mac</span>
                </div>
              </div> */}


               let btnGText = (
        <div class="" style={{ height: '30px' }}>
          <er-button-group
            items={[
              {
                label: '当前真实表设计',
                fn: async () => {
                  let currentPage = systemIns.getCurrentPageDesign()
                  let rTName = currentPage.getRealTableName()
                  await system.designTableColumns(rTName) //
                },
              },
              //
              {
                label: '进入设计', //
                fn: async () => {
                  let currentPage = systemIns.getCurrentPageDesign()
                  currentPage.setCurrentDesign(true) //
                },
              },
              {
                label: '离开设计',
                fn: async () => {
                  let cp = systemIns.getCurrentPageDesign()
                  cp.setCurrentDesign(false) //
                },
              },
              {
                label: '保存设计',
                fn: async () => {
                  let currentPage = systemIns.getCurrentPageDesign()
                  currentPage.saveTableDesign()
                },
              },
              {
                label: '进入编辑页面',
                fn: async () => {
                  systemIns.routeOpen('t_SdOrder---edit') //
                },
              },
              {
                label: '打印layout', //
                fn: async () => {
                  let currentPage = systemIns.getCurrentPageDesign()
                  let layout = currentPage.getLayoutData()
                  console.log(layout) //
                  console.log(currentPage, 'testPage') //
                },
              },
              {
                label: '当前页面设计',
                fn: async () => {
                  await systemIns.designCurrentPageConfig() //
                },
              },
            ]}
          ></er-button-group>
        </div>
      )

      {
        dragHeaderMode: 'column',
        validateDragOrderOnEnd: (start, end) => {
          let col1 = start.col
          let row1 = start.row
          let col2 = end.col
          let row2 = end.row
          let f = this.getInstance().getHeaderField(col1, row1)
          let f1 = this.getInstance().getHeaderField(col2, row2)
          let f1C = this.getColumns().find((c) => c.getField() == f)
          let f2C = this.getColumns().find((c) => c.getField() == f1)
          if (f1C == f2C) {
            return false //
          }
          let isFrozen = f2C.getIsFrozen()
          let isFrozen1 = f1C.getIsFrozen()
          if (isFrozen || isFrozen1) {
            //
            return false
          }
          nextTick(() => {
            let fs = this.getInstance().columns.map((col, i) => {
              let obj = {
                field: col.field,
                order: i + 1,
              }
              return obj
            })
            this.changeSortOrder(fs as any) //
          })
          return true
        },
      }


      // let icon = createText({
        //   text: t,
        //   fontSize: 15,
        //   cursor: 'pointer', //
        //   x: 0,
        //   y: 0, //
        //   overflow: 'hidden',
        //   fill: 'black',
        //   boundsPadding: [0, 0, 0, 3 + _level * 15], //
        //   lineDashOffset: 0,
        // })
        // let _g2=createGroup({

        // })

        _g1.on('click', () => {
          // this.table.openTreeRow(col, row) //
          // // nextTick(() => {
          // //   _this.table.updateIndexArr.add(_index)
          // // })
          // console.log(args, 'sfjsdklfsdlfsd') //
        })


         // filterChildren(children: any[], row: any) {
  //   let globalValue = this.globalConfig.value
  //   let _children = children
  //   if (globalValue.length > 0) {
  //     _children = _children.filter((v) => {
  //       let _shtml = v['_shtml'] //
  //       let reg = new RegExp(globalValue, 'gi') ////
  //       if (reg.test(_shtml)) {
  //         this.globalRowSet.add(v['_index'])
  //         return true
  //       }
  //       this.globalRowSet.delete(v['_index']) ////
  //       return false
  //     })
  //   }
  //   let _data1 = _children
  //   let sortState = this.sortCache
  //   let _sortState = toRaw(sortState)
  //   let sortconfig = _sortState //自定义的排序配置
  //   //@ts-ignore
  //   let _data3 = _sortConfig
  //     ?.reduce((res, item, i) => {
  //       const field = item.field
  //       const type = item.type
  //       let order = item.order
  //       const colType: string = 'number' //类型//
  //       const _data4 = combineAdjacentEqualElements(
  //         res, //
  //         field,
  //         i, //
  //         // colType,
  //         // type,
  //         type,
  //         order,
  //       )
  //       return _data4
  //     }, _data1)
  //     .flat(sortconfig?.length) //
  // }

   // systemIns.designSystemNavs().then((res) => {
    //   _config = res
    //   show.value = true
    // })


      /* 
        {
                flex: 1,
                width: '100%',
                overflow: 'hidden', //
                borderLeft: '1px solid RGB(225, 228, 232)',
                borderRight: '1px solid RGB(225, 228, 232)',
                borderTop: '1px solid RGB(225, 228, 232)',
                boxSizing: 'border-box',
              }
      
      */

      // async getDefaultPageLayout(name?: string) {
  //   let http = this.getHttp()
  //   let _data = await http.post(
  //     'entity',
  //     'getDefaultPageLayout',
  //     {
  //       tableName: name,
  //     }, //
  //   ) //
  //   return _data //
  // }
   // getFieldsDesignConfig() {
  //   // let _fieldConfig = JSON.parse(JSON.stringify(fieldsConfig))
  //   // return _fieldConfig
  // }

  // let showSearchIcon = computed(() => {
    //   let s = formitem.getIsShowSearchIcon()
    //   return s
    // })


    // let _pcLayout = this._pcLayout
    // if (_pcLayout != null) {
    //   return _pcLayout //
    // }


     // let fConfig = {
        //   itemSpan: 12,
        //   items: [
        //     {
        //       label: '标题', //
        //       field: 'title',
        //       editType: 'string', //
        //     },
        //     {
        //       label: '值更新事件',
        //       filed: 'itemChange',
        //       editType: 'code', //
        //     },
        //     {
        //       label: '默认值',
        //       field: 'defaultValue',
        //       type: 'code', //
        //     },
        //     {
        //       label: '默认值类型',
        //       field: 'defaultValueType',
        //       type: 'select',
        //       options: {
        //         options: [
        //           {
        //             label: '函数类型',
        //             value: 'function',
        //           },
        //           {
        //             label: '普通类型',
        //             value: 'normal',
        //           },
        //         ],
        //       },
        //     },
        //     {
        //       label: '编辑类型',
        //       field: 'editType',
        //       type: 'select',
        //       options: {
        //         options: [
        //           {
        //             label: '输入框',
        //             value: 'string',
        //           },
        //         ],
        //       },
        //     },
        //   ],
        //   data: _config, //
        //   height: 500,
        //   width: 900,
        // }

        // _col1 = _col1.sort((a, b) => {
    //   let isFrozen = b.isFrozen
    //   if (isFrozen === true) {
    //     return -1
    //   }
    //   return 0
    // })
    // _col1 = _col1.sort((a, b) => {
    //   let isLeftFrozen = a.isLeftFrozen
    //   if (isLeftFrozen === true) {
    //     return -1
    //   }
    //   return 0
    // })
    // _col1=_col1.sort((a,b)=>{
    // })


    
// export const fieldsConfig = [
//   {
//     name: '预设字段',
//     id: 'defaultField',
//     children: [
//       {
//         type: 'input',
//         label: '邮箱',
//         icon: 'email',
//         key: '',
//         id: '',
//         options: {
//           clearable: true,
//           renderType: 2,
//           disabled: false,
//           showPassword: false,
//           defaultValue: '',
//           placeholder: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//         },
//       },
//       {
//         type: 'input',
//         label: '手机号',
//         icon: 'cellphone',
//         key: '',
//         id: '',
//         options: {
//           clearable: true,
//           renderType: 4,
//           disabled: false,
//           showPassword: false,
//           defaultValue: '',
//           placeholder: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//         },
//       },
//       {
//         type: 'input',
//         label: '网址',
//         icon: 'url',
//         key: '',
//         id: '',
//         options: {
//           clearable: true,
//           renderType: 5,
//           disabled: false,
//           showPassword: false,
//           defaultValue: '',
//           placeholder: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//         },
//       },
//       {
//         type: 'region',
//         label: '省市区',
//         icon: 'location',
//         key: '',
//         id: '',
//         options: {
//           placeholder: '',
//           required: false,
//           isShowLabel: true,
//           labelWidth: 100,
//           defaultValue: '',
//           selectType: 3,
//           filterable: true,
//         },
//       },
//       {
//         type: 'input',
//         label: '身份证号',
//         icon: 'ID',
//         key: '',
//         id: '',
//         options: {
//           clearable: true,
//           renderType: 3,
//           disabled: false,
//           showPassword: false,
//           defaultValue: '',
//           placeholder: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//         },
//       },
//     ],
//   },
//   {
//     name: '基础字段',
//     id: 'field',
//     children: [
//       {
//         type: 'input',
//         label: '单行文本',
//         icon: 'input',
//         key: '',
//         id: '',
//         options: {
//           clearable: true,
//           isShowWordLimit: false,
//           renderType: 1,
//           disabled: false,
//           showPassword: false,
//           defaultValue: '',
//           placeholder: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//           min: null,
//           max: null,
//         },
//       },
//       // {
//       //   type: 'textarea',
//       //   label: '多行文本',
//       //   icon: 'textarea',
//       //   key: '',
//       //   id: '',
//       //   options: {
//       //     clearable: true,
//       //     isShowWordLimit: false,
//       //     rows: 6,
//       //     defaultValue: '',
//       //     placeholder: '',
//       //     disabled: false,
//       //     labelWidth: 100,
//       //     isShowLabel: true,
//       //     required: false,
//       //     min: null,
//       //     max: null
//       //   }
//       // },
//       {
//         type: 'number',
//         label: '数字',
//         icon: 'numbers',
//         key: '',
//         id: '',
//         options: {
//           min: 0,
//           max: null,
//           step: 1,
//           precision: 0,
//           disabled: false,
//           controls: true,
//           controlsPosition: true,
//           defaultValue: null,
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//           minlength: null,
//           maxlength: null,
//         },
//       },
//       {
//         type: 'radio',
//         label: '单选框',
//         icon: 'radio',
//         key: '',
//         id: '',
//         options: {
//           dataKey: '',
//           displayStyle: 'block',
//           defaultValue: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           disabled: false,
//           required: false,
//         },
//       },
//       {
//         type: 'checkbox',
//         label: '复选框',
//         icon: 'checkbox',
//         key: '',
//         id: '',
//         options: {
//           dataKey: '',
//           displayStyle: 'block',
//           defaultValue: [],
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//           disabled: false,
//         },
//       },
//       {
//         type: 'select',
//         label: '下拉框',
//         icon: 'dropdown0',
//         key: '',
//         id: '',
//         options: {
//           dataKey: '',
//           filterable: true,
//           multiple: false,
//           defaultValue: '',
//           placeholder: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           disabled: false,
//           clearable: true,
//           required: false,
//         },
//       },
//       {
//         type: 'time',
//         label: '时间',
//         icon: 'time',
//         key: '',
//         id: '',
//         options: {
//           clearable: true,
//           format: 'HH:mm:ss',
//           valueFormat: 'HH:mm:ss',
//           defaultValue: null,
//           placeholder: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//           disabled: false,
//         },
//       },
//       {
//         type: 'date',
//         label: '日期',
//         icon: 'calendar',
//         key: '',
//         id: '',
//         options: {
//           isShowWordLimit: false,
//           clearable: true,
//           format: 'YYYY-MM-DD',
//           defaultValue: null,
//           startTime: null,
//           endTime: null,
//           placeholder: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           type: 'date',
//           required: false,
//           disabled: false,
//         },
//       },
//       {
//         type: 'rate',
//         label: '评分',
//         icon: 'rating',
//         key: '',
//         id: '',
//         options: {
//           max: 5,
//           allowHalf: false,
//           defaultValue: 0,
//           labelWidth: 100,
//           isShowLabel: true,
//           disabled: false,
//         },
//       },
//       // {
//       //   type: 'color',
//       //   label: '颜色',
//       //   icon: 'color-filling',
//       //   key: '',
//       //   id: '',
//       //   options: {
//       //     showAlpha: false,
//       //     defaultValue: '',
//       //     placeholder: '',
//       //     labelWidth: 100,
//       //     isShowLabel: true,
//       //     required: false,
//       //     requiredHint: '',
//       //     validation: '',
//       //     validationHint: '',
//       //     minlength: null,
//       //     maxlength: null
//       //   }
//       // },
//       {
//         type: 'switch',
//         label: '开关',
//         icon: 'switch',
//         key: '',
//         id: '',
//         options: {
//           defaultValue: true,
//           labelWidth: 100,
//           isShowLabel: true,
//           disabled: false,
//         },
//       },
//       {
//         type: 'slider',
//         label: '滑块',
//         icon: 'slider',
//         key: '',
//         id: '',
//         options: {
//           min: 0,
//           max: 100,
//           step: 1,
//           defaultValue: 0,
//           placeholder: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//           disabled: false,
//         },
//       },
//       {
//         type: 'html',
//         label: '富文本编辑器',
//         icon: 'html',
//         key: '',
//         id: '',
//         options: {
//           defaultValue: '',
//           placeholder: '',
//           action: '',
//           size: 1,
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//           disabled: false,
//         },
//       },
//       {
//         type: 'cascader',
//         label: '级联框',
//         icon: 'cascader',
//         key: '',
//         id: '',
//         options: {
//           filterable: true,
//           multiple: false,
//           checkStrictly: false,
//           defaultValue: '',
//           placeholder: '',
//           labelWidth: 100,
//           isShowLabel: true,
//           required: false,
//           disabled: false,
//           clearable: true,
//         },
//       },
//       {
//         type: 'uploadfile',
//         label: '上传文件',
//         icon: 'upload',
//         key: '',
//         id: '',
//         options: {
//           isShowLabel: true,
//           labelWidth: 100,
//           defaultValue: [],
//           multiple: false,
//           action: '',
//           limit: 1,
//           size: 5,
//           accept: '.png,.jpg',
//           disabled: false,
//           required: false,
//         },
//       },
//       {
//         type: 'signature',
//         label: '签名',
//         icon: 'signature',
//         key: '',
//         id: '',
//         options: {
//           required: false,
//           isShowLabel: true,
//           labelWidth: 100,
//           defaultValue: '',
//           penColor: 'rgb(0, 0, 0)',
//           action: '',
//           disabled: false,
//         },
//       },
//     ],
//   },
//   {
//     name: '容器',
//     id: 'container',
//     children: [
//       {
//         type: 'grid',
//         label: 'grid',
//         icon: 'grid',
//         id: '',
//         columns: [
//           {
//             id: '', //
//             options: {
//               span: 12,
//               offset: 0,
//               pull: 0,
//               push: 0,
//             },
//             type: 'col',
//             list: [],
//           },
//         ],
//         options: {
//           gutter: 0,
//           justify: 'start',
//           align: 'top',
//         },
//       },
//       {
//         type: 'table',
//         label: '表格布局',
//         icon: 'tableStokeP2',
//         id: '',
//         rows: [
//           {
//             type: 'tr',
//             columns: [
//               {
//                 type: 'td',
//                 options: {
//                   colspan: 1,
//                   rowspan: 1,
//                   isMerged: false,
//                 },
//                 list: [],
//                 style: {},
//               },
//               // {
//               //   type: 'td',
//               //   options: {
//               //     colspan: 1,
//               //     rowspan: 1,
//               //     isMerged: false
//               //   },
//               //   list: [],
//               //   style: {}
//               // }
//             ],
//           },
//           // {
//           //   type: 'tr',
//           //   columns: [
//           //     {
//           //       type: 'td',
//           //       options: {
//           //         colspan: 1,
//           //         rowspan: 1,
//           //         isMerged: false
//           //       },
//           //       list: [],
//           //       style: {}
//           //     },
//           //     {
//           //       type: 'td',
//           //       options: {
//           //         colspan: 1,
//           //         rowspan: 1,
//           //         isMerged: false
//           //       },
//           //       list: [],
//           //       style: {}
//           //     }
//           //   ]
//           // }
//         ],
//         options: {
//           width: 100,
//           widthType: '%',
//         },
//       },
//       {
//         type: 'tabs',
//         label: '标签页',
//         icon: 'label',
//         id: '',
//         columns: [],
//         options: {
//           type: '',
//           tabPosition: 'top',
//           align: 'top',
//           hidden: false,
//         },
//       },
//       {
//         type: 'collapse',
//         label: '折叠面板',
//         icon: 'collapse',
//         id: '',
//         columns: [],
//         options: {
//           defaultValue: [],
//           accordion: false,
//         },
//       },
//       {
//         type: 'divider',
//         label: '分割线',
//         icon: 'divider',
//         key: '',
//         id: '',
//         options: {
//           contentPosition: 'center',
//           filterable: true,
//           defaultValue: 'divider',
//           labelWidth: 100,
//           labelHidden: true,
//           required: false,
//         },
//       },
//       // {
//       //   type: 'subform',
//       //   label: '子表单',
//       //   icon: 'subform',
//       //   id: '',
//       //   list: [
//       //     []
//       //   ],
//       //   options: {
//       //     defaultValue: [],
//       //     isShowLabel: true,
//       //     required: false,
//       //     disabled: false
//       //   }
//       // }
//     ],
//   },
// ]


 {
          type: 'rate',
          label: '评分',
          icon: 'rating',
          key: '',
          id: '',
          options: {
            max: 5,
            allowHalf: false,
            defaultValue: 0,
            labelWidth: 100,
            isShowLabel: true,
            disabled: false,
          },
        },
        // {
        //   type: 'color',
        //   label: '颜色',
        //   icon: 'color-filling',
        //   key: '',
        //   id: '',
        //   options: {
        //     showAlpha: false,
        //     defaultValue: '',
        //     placeholder: '',
        //     labelWidth: 100,
        //     isShowLabel: true,
        //     required: false,
        //     requiredHint: '',
        //     validation: '',
        //     validationHint: '',
        //     minlength: null,
        //     maxlength: null
        //   }
        // },
        {
          type: 'switch',
          label: '开关',
          icon: 'switch',
          key: '',
          id: '',
          options: {
            defaultValue: true,
            labelWidth: 100,
            isShowLabel: true,
            disabled: false,
          },
        },
        {
          type: 'slider',
          label: '滑块',
          icon: 'slider',
          key: '',
          id: '',
          options: {
            min: 0,
            max: 100,
            step: 1,
            defaultValue: 0,
            placeholder: '',
            labelWidth: 100,
            isShowLabel: true,
            required: false,
            disabled: false,
          },
        },
        {
          type: 'html',
          label: '富文本编辑器',
          icon: 'html',
          key: '',
          id: '',
          options: {
            defaultValue: '',
            placeholder: '',
            action: '',
            size: 1,
            labelWidth: 100,
            isShowLabel: true,
            required: false,
            disabled: false,
          },
        },

         let allT2 = [
      {
        label: '首页',
        value: 'home',
        tableName: 'home',
      }, {
        label: '登录',
        value: 'login',
        tableName: 'login',//
      }
    ]

     // console.log(_r2, '_r2') //
    // let _r=ins.getCellRelativeRect(addR.col, addR.row)
    // console.log(_r,'_r')//
    // console.log(rect, 'testRect') ////
    // let _rect = {
    //   bounds: {
    //     x1: 930,
    //     y1: 70,
    //     x2: 1030,
    //     y2: 100,
    //   },
    //   bottom: 100,
    //   height: 30,
    //   left: 930,//
    //   right: 1030,
    //   top: 70,
    //   width: 100,
    // }


     // let getFlatParent = (row, arr = []) => {
    //   let pIndex = row['_parentIndex']
    //   if (pIndex == null) {
    //     arr.push(row)
    //   } else {
    //     let pRow = dMap[pIndex]
    //     getFlatParent(pRow, arr) //
    //   }
    //   return arr //
    // }

    generateEditPageLayout(row) {
    let oldFields = row.fields //
    let dEnF = oldFields
      .filter((row) => {
        //
        return row.type == 'entity' && row?.options?.tableType == 'detail'
      }) //
      .map((row) => {
        let _row = _.cloneDeep(row)
        return _row
      })
    let dEnF2 = dEnF.map((row) => {
      let fIns = row.id
      if (fIns == null) {
        row.id = this.uuid()
        fIns = row.id //
      }
      let obj = {
        ...this.createNodeIdKey('tabsCol'),
        label: 'Tab 1',
        list: [
          {
            ...this.createNodeIdKey('inline'),
            style: {},
            columns: [fIns],
          },
        ],
        style: {},
        options: {},
        innerId: fIns,
      }
      return obj
    })
    let fId = this.uuid()
    let fField = {
      id: fId,
      key: `dform_${fId}`,
      type: 'dform',
      options: {},
    }
    let detailLayout = {
      id: 'f6qNjbhckRKxcgbyzimpA',
      key: 'inline_f6qNjbhckRKxcgbyzimpA',
      type: 'inline',
      columns: [
        {
          id: 'NFcD7gLoRJ0UQJcRGAP1I',
          key: 'grid_NFcD7gLoRJ0UQJcRGAP1I',
          type: 'grid',
          options: {
            gutter: 0,
            justify: 'start',
            align: 'top',
          },
          style: {
            width: '100%',
          },
          columns: [
            {
              id: '0Ifq8JGCuqIYsIEJEcOE4',
              key: 'col_0Ifq8JGCuqIYsIEJEcOE4',
              type: 'col',
              list: [
                {
                  type: 'inline',
                  columns: [
                    {
                      id: 'mJp7crngSZBQiiMhqIJ1N',
                      key: 'tabs_mJp7crngSZBQiiMhqIJ1N',
                      icon: 'label',
                      type: 'tabs',
                      label: '标签页',
                      style: {
                        width: '100%',
                      },
                      columns: [...dEnF2],
                      options: {
                        type: '',
                        align: 'top',
                        hidden: false,
                        tabPosition: 'top',
                        defaultValue: dEnF2[0]?.id, //
                      },
                    },
                  ],
                },
              ],
              options: {
                span: 24, //
                offset: 0,
                push: 0,
                pull: 0,
                style: {},
              },
            },
          ],
        },
      ],
    }
    if (dEnF2.length == 0) {
      detailLayout = null
    }
    const editLayout = {
      layout: {
        pc: [
          {
            id: 'yWTdNJ14jZVhBpu1kiSHB',
            key: 'inline_yWTdNJ14jZVhBpu1kiSHB',
            type: 'inline',
            columns: [
              {
                id: 'LFhDBVgwITtxF-8qbD1Sk',
                key: 'grid_LFhDBVgwITtxF-8qbD1Sk',
                type: 'grid',
                options: {
                  gutter: 0,
                  justify: 'start',
                  align: 'top',
                },
                style: {
                  width: '100%',
                },
                columns: [
                  {
                    id: 'S9B-oByUkfc2LoAISnY3H',
                    key: 'col_S9B-oByUkfc2LoAISnY3H',
                    type: 'col',
                    list: [
                      {
                        type: 'inline',
                        columns: [
                          {
                            type: 'tabs',
                            label: '标签页',
                            icon: 'label',
                            id: 'nWcXBEOYl2M980Eg8OyJj',
                            columns: [
                              {
                                id: '_yNuSux3VBlbqnoWdXvYb',
                                type: 'tabsCol',
                                label: 'Tab 1',
                                list: [
                                  {
                                    type: 'inline',
                                    columns: [fId],
                                    style: {},
                                    id: 'n5BkoBMEBOeokN55IDx-M',
                                    key: 'inline_n5BkoBMEBOeokN55IDx-M',
                                  },
                                ],
                                style: {},
                                options: {},
                                key: 'tabsCol__yNuSux3VBlbqnoWdXvYb',
                              },
                            ],
                            options: {
                              type: '',
                              tabPosition: 'top',
                              align: 'top',
                              hidden: false,
                              defaultValue: '_yNuSux3VBlbqnoWdXvYb',
                            },
                            style: {
                              width: '100%',
                            },
                            key: 'tabs_nWcXBEOYl2M980Eg8OyJj',
                          },
                        ],
                      },
                    ],
                    options: {
                      span: 24,
                      offset: 0,
                      push: 0,
                      pull: 0,
                      style: {},
                    },
                  },
                ],
              },
            ],
          },
        ],
        mobile: [
          // {
          //   type: 'inline',
          //   columns: ['61fuq2KoXI-LXZ-d_ep95'],
          // },
          // {
          //   type: 'inline',
          //   columns: ['KRg51faFSk3H2piRFbrQg'],
          // },
        ],
      },
      data: {},
      config: {
        isSync: true,
        pc: {
          size: 'default',
          labelPosition: 'left',
          completeButton: {
            text: '提交',
            color: '',
            backgroundColor: '',
          },
        },
        mobile: {
          labelPosition: 'left',
          completeButton: {
            text: '提交',
            color: '',
            backgroundColor: '',
          },
        },
        id: '3H1haKaSUMIocpYwWqD4z',
        type: 'root',
      },
      fields: [fField, ...dEnF],
      logic: {},
    }
    if (detailLayout != null) {
      editLayout.layout.pc.push(detailLayout) //
    }
    return editLayout //
  }

  if (row == null) {
      let _data1 = await http.find('entity', { tableName: name })
      let _row = _data1[0]
      let row2 = this.generateEditPageLayout(_row)
      return row2 //
      //转换
    }

     // let _cols1 = _cols.map((item) => {
    //   return {
    //     value: item.field,
    //     label: item.title || item.field,
    //   }
    // })
    // columnSelect[tableName] = _cols1 //
    // columnSelect[_key] = true //
 {
        label: '宽度',
        field: 'width',
        type: 'string',
        tabTitle: titles[0],
      },

    //新增一行数据
        // let tableName = page.getTableName() //
        // let tRef: Table = page.getRef(tableName) //
        // if (tRef == null) {
        //   return
        // }
        // tRef.addRows(1) //


           if (disabledDefaultFn == 'scanDisabled') {
          }


            {
            label: '新增状态禁用',
            value: 'addDisabled',
          },


           pageDesign.use('getTableData', async (context, next) => {
      let fArg = context.args[0]
      let instance: PageDesign = context.instance
      let query = fArg.query
      let tableName = fArg.tableName
      let _tName = instance.getTableName()
      let _d1 = {}
      if (tableName == _tName) {
        let _d = instance.getSearchBindData() //
        let _dn = Object.entries(_d)
        if (_dn.length > 0 && _dn.map((d) => d[1]).some((d) => d != null)) {
          _d1 = _d
        }
      } //
      let searchWhere = instance.getSearchWhere(_d1) //
      let result = _.merge({}, query, searchWhere)
      fArg.query = result //
      instance.setCurrentLoading(true)
      //获取全局的查询条件
      await next().finally(() => {
        setTimeout(() => {
          instance.setCurrentLoading(false) //
        }, 200)
      }) //
      instance.setCurrentView() //
    })

     // {
        //   label: '保存',
        //   fn: async (config) => {
        //     let p: Table = config.parent
        //     let d = p.getFlatTreeData()
        //     let changeData = d.filter((item) => {
        //       let _rowState = item['_rowState']
        //       return _rowState == 'change'
        //     })
        //     // console.log('sfsdss', changeData)//
        //     await this.getHttp().patch('navs', changeData) //
        //     this.confirmMessage('更新菜单成功') ////
        //     this.clearCacheValue('getMenuData') //
        //     await this.getMenuData() //
        //   },
        // },

        ||
              _.get(
                state.fieldsLogicState.get(element),
                'visible',
                undefined,
              ) !== 0


                // let _slots = _attrs['_slots']
      // let _obj = null
      // if (Array.isArray(_slots)) {
      //   _obj = _slots.reduce((res, cur) => {
      //     let _item = slots[cur]
      //     if (_item) {
      //       res[cur] = _item
      //     }
      //     return res
      //   }, {})
      // } ////

      onBeforeUnmount(() => {
      const index = _.findIndex(state.validateStates, {
        data: { id: props.data.id },
      })
      if (index !== -1) {
        state.validateStates.splice(index, 1)
      }
    })



    {_slots.default()}
          {ER.props.dragMode === 'icon' && unref(isEditModel) && <div class={[ns.e('topLeft')]}>{props.hasDrag && <Icon class={['ER-handle', ns.e('dragIcon')]} icon="Rank"></Icon>}</div>}
          {unref(isEditModel) && (
            <div class={[ns.e('bottomRight')]}>
              <Icon
                class={['handle', ns.e('selectParent')]}
                onClick={withModifiers(
                  (e) => {
                    handleAction(5)
                  },
                  ['stop']
                )}
                icon="top"
              ></Icon>
              {props.hasDel && (
                <Icon
                  class={[ns.e('copy')]}
                  onClick={withModifiers(
                    (e) => {
                      handleAction(1)
                    },
                    ['stop']
                  )}
                  icon="delete"
                ></Icon>
              )}
              {props.data.type == 'Sform' && (
                <Icon
                  class={[ns.e('copy')]}
                  onClick={withModifiers(
                    (e) => {
                      handleAction(7)
                    },
                    ['stop']
                  )}
                  icon="config"
                ></Icon>
              )}
              {props.data.type == 'dform' && (
                <Icon
                  class={[ns.e('copy')]}
                  onClick={withModifiers(
                    (e) => {
                      handleAction(8)
                    },
                    ['stop']
                  )} //
                  icon="config"
                ></Icon> //设置子表
              )}
              {props.hasAddCol && (
                <Icon
                  class={[ns.e('addCol')]}
                  onClick={withModifiers(
                    (e) => {
                      handleAction(6)
                    },
                    ['stop']
                  )}
                  icon="plus"
                ></Icon>
              )}
              {/* {isShowCopy.value && (
                <Icon
                  class={[ns.e('copyIcon')]}
                  onClick={withModifiers(
                    (e) => {
                      handleAction(2) //
                    },
                    ['stop']
                  )}
                  icon="copy"
                ></Icon>
              )} */}
              {isShowWidthScale.value && (
                <div ref={widthScaleElement}>
                  <Icon class={[ns.e('widthScale')]} icon="dragWidth"></Icon>
                </div>
              )}
              {isShowHeightScale.value && (
                <div ref={heightScaleElement}>
                  <Icon class={[ns.e('widthScale')]} icon="dragHeight"></Icon>
                </div>
              )}
            </div>
          )}

          {unref(isEditModel) && props.hasMask && maskNode}


      // let s = props.hasWidthScale && !(ER.props.layoutType === 1 && !isPc.value)
// let fConfig = computed(() => {
    //   // debugger //
    //   let _config = formitem.getFormConfig() //
    //   return _config
    // })

    let config = this.config //
        let system = this.getSystem()
        let tableName = this.getTableName()
        let pageEditType = config.pageEditType
        if (pageEditType == 'page') {
            system.routeOpen(`${tableName}---edit`, async (d: editPageDesign) => {
                await d.addMainTableRow() //
            })
        }
        if (pageEditType == 'default') {
            await this.addTableRows() //
        }//

        async getPageSearchLayout(name?: string) {
    let http = this.getHttp()
    let reg = /search$/
    let name1: any = null
    if (reg.test(name)) {
      name1 = name
    } else {
      name1 = `${name}---search`
    }
    let data = await http.find('entity', { tableName: name1 }) //
    let row = data[0] //
    return row //
  }

    // console.log(_data, 'testData') //


          console.log('更新了footer') //
//

 // let onHiddenColumn = ccnfig.onColumnHidden //
    // if (typeof onHiddenColumn == 'function') {
    //   onHiddenColumn({
    //     column: _col, //
    //     table: this, //
    //     originColumn: _col.config, //
    //     tableName: this.getTableName(),
    //   }) //
    // } //

    // let com: Table = item.getRef('fieldCom')
        // let tableName = com.getTableName()
        // let t1 = com
        // let d = t1.getFlatTreeData()
        // let changeD = d.filter((row) => {
        //   let rowState = row['_rowState']
        //   return rowState == 'add' || rowState == 'change'
        // })


        // let id = this.id
    // let obj: any = {
    //   id: id,
    //   key: this.getKey(),
    // }
    // obj.options = obj.options || {}
    // const type = this.getType()
    // obj.type = obj.type || type
    // const style = this.getStyle()
    // obj.style = obj.style || style //
    // config.options = config.options || {}

     // .map((t) => {
    //   return t.getRef('fieldCom')
    // })
    // .filter((t) => {
    //   let _t: Table = t
    //   if (_t == null) {
    //     return false
    //   }
    //   return true
    // })

     let _d = await system.confirmTable({
        requiredValidate: true,
        validateFn: async (config) => {
          return '校验失败'
        },
        columns: [],
        data: [
          {
            a: 1,
          },
        ],
      }) //
      console.log(_d, 'testD') //

       // async confirmEditEntity(config) {
  //   let editDesign = await this.createPageEditDesign(config)
  // }



  // if (searchOperator == null) {
      //   searchOperator='$eq'
      //   let _v = data[searchF]
      //   if (_v != null) {
      //     obj[searchF] = _v //
      //     _arr.push(obj) //
      //   }
      // } else {
      // let _value = data[searchF]
      // if (_value != null) {
      //   let _obj = this.buildWhereInOperator({
      //     value: _value,
      //     field: searchF,
      //     operator: searchOperator,
      //   })
      //   _arr.push(_obj)
      // }
      // }


      // watch(
    //   () => {
    //     return state.store
    //   },
    //   (newValue) => {},
    //   {
    //     deep: true,
    //   },
    // )


    // if (l == 2) {
      //   map = system.tableEditMap
      // } else {
      //   map = system.tableMap
      // }

      // let addR = ins.getCellAddress((row) => {
    //   return row['_index'] == _index //
    // }, field) //

     // let _rowIndex = row['_index']
    // let addR = ins.getCellAddrByFieldRecord(field, _index1) //
     // {
      //   field: 'editType',
      //   label: '编辑类型',
      //   tabTitle: titles[1],
      //   type: 'code', //
      //   options: {},
      // },
      // let config = this.config
      // let beforeEditCell = config.onBeforeEditCell
      // if (typeof beforeEditCell == 'function') {
      //   let re = ins.getRecordByCell(col, row)
      //   let f = ins.getBodyField(col, row)
      //   let _status = beforeEditCell({
      //     row: re,
      //     field: f,
      //     value: value,
      //   })
      //   if (_status == false && isTitle == false) {
      //     return false
      //   }
      // } 
       // setTimeout(() => {
      //   ins.clearSelected()
      // }, 300)
      // setTimeout(() => {
      //   console.time('setColWidth')
      //   // ins.clearSelected()//
      //   console.timeEnd('setColWidth')//
      // }, 1000)
      // ins.selectCell(_templateEditCell.col, _templateEditCell.row) //
      // setTimeout(() => {
      //   ins.clearSelected() //
      // }, 50)
       // let _isTree = this.getIsTree()
      // if (_isTree == true) {
      //   container = null //
      // }


       container.on('mouseover', () => {
      // let oldColor = container.attribute.background
      // container._oldColor = oldColor
      // container.setAttribute('background', _this.getHoverColor()) ///
    })
    container.on('mouseout', () => {
      // let color = container._oldColor
      // if (record == _this.table.tableData.curRow) {
      //   color = _this.getCurrentRowColor() //
      // }//
      // container.setAttribute('background', color) ////
    })


    // let allRowIndex = Object.entries(currentIndexContain).map(
      //   ([keys, value]) => {
      //     value = value || {} //
      //     let _value = Object.values(value).map((row) => row['currentRowIndex'])
      //     let _arr1 = _value.filter((v, i) => _value.indexOf(v) == i) //
      //     if (_arr1.length == 1) {
      //       return _arr1[0]
      //     }
      //   },
      // )


      // let length = _this.table.templateProps.data.length
    // let _length = length / 5
    // rowStart = rowStart - _length
    // if (rowStart < 0) {
    //   rowStart = 0 //
    // }
    // rowEnd = rowEnd + _length //
    // if (_row >= rowStart && _row <= rowEnd) {
    //   //显示在视图上
    //   let _arr = currentIndexContain[_index]
    //   if (_arr == null) {
    //     currentIndexContain[_index] = {}
    //     _arr = currentIndexContain[_index] //
    //   }
    //   let field = _this.getField()
    //   _arr[field] = container //
    // } else {
    //   currentIndexContain[_index] = null
    // }


     // let set: Set<string> = _containerMap[id2]
    // if (set == null) {
    //   _containerMap[id2] = new Set()
    //   set = _containerMap[id2]
    // }
    // let id2 = `${id}_set`



  if (typeof fieldFormat == 'function') {
        try {
          // let _index = record._index
          // if (this.effectPool[_index] == null) {
          //   console.log('執行了一些東西') //
          //   this.effectPool[`${_index}`] = watch(
          //     () => {
          //       let value = '' //
          //       if (typeof fieldFormat == 'function') {
          //         let value1 = fieldFormat({
          //           row: record,
          //           col: this,
          //           table: _table,
          //           field: field,
          //         })
          //         if (value1 != null) {
          //           value = value1
          //         }
          //       }
          //       return value //
          //     },
          //     (newV) => {
          //       console.log(newV, '新增了') //
          //       _table.updateIndexArr.add(_index) //
          //     },
          //   )
          // } //
          // value = fieldFormat({
          //   row: record,
          //   col: this,
          //   table: _table,
          //   field: field,
          // })
        } catch (error) {
          //
        }
      }
      if (value === 0) {
        value = '0' //
      }

       let formatFn = (config) => {
      let record=config.row
      let value = record[field] //
    
      return value
    }

     let field = this.getField() //
    let _table = this.table
     // let _arr = _containerMap[`${id}_arr`]
    // console.log(Object.keys(map).length, 'test')//

     {
          label: '导出',
          fn: async () => {
            //添加行//
            tableIns.updateCanvas() //
          },
        },
        {
          label: '启用加载状态',
          fn: async () => {
            //
            tableIns.setCurrentLoading(true)
            // tableIns.expandAllTreeRow() //
          },
        },
        {
          label: '禁用加载状态',
          fn: async () => {
            //
            tableIns.setCurrentLoading(false)
            // tableIns.expandAllTreeRow() //
          },
        },
        {
          label: '刷新', //
          fn: async () => {
            //
            // tableIns.updateCanvas()
            // tableIns.validateData({}) //
            // let _res = await tableIns.validate() //
            // console.log(_res, 'test_row') //
            tableIns.updateCanvas() //
          },
        },
        {
          label: '加载新数据', //
          fn: async () => {
            let _data = JSON.parse(JSON.stringify(tableIns.getData()))
            let _arr = []
            if (_data.length > 10000) {
              _arr = _data.slice(0, 10000) //
            } else {
              Array(10)
                .fill(null)
                .forEach((item, i) => {
                  _arr.push(...JSON.parse(JSON.stringify(_data)))
                })
            }
            tableIns.setData(_arr) //
          },
        },
        {
          label: 'logthis', //
          fn: async () => {
            // console.log('logthis', tableIns) //
            // console.log(Object.keys(tableIns.dataMap).length) //
            tableIns.clearCache()
          },
        },

         // system.confirmForm({
      //   ...formConfig,//
      // })
      // let _ins: PageDesign = btn.getRef('page')
      // _ins
      //   .validate()
      //   .then(() => {})
      //   .catch(() => {
      //     console.log('报错了') //
      //   })














export const formConfig = {
  // 对应：RoySimpleTextIn 表单配置
  RoySimpleTextIn: [
    {
      label: '字体',
      field: 'fontFamily',
      span: 24,
      type: 'select',
      options: {
        options: [
          { label: '默认', value: 'default' },
          { label: '宋体', value: 'simsun' },
          { label: '黑体', value: 'simhei' },
          { label: '楷体', value: 'kaiti' },
          { label: '仿宋', value: 'fangsong' },
          { label: '微软雅黑', value: 'microsoft yahei' }
        ]
      }
    },
    {
      label: '字体颜色',
      field: 'color',
      span: 24,
      type: 'color',
      options: {
        // 对应原先 $colorPicker，若需额外配置可在此添加
      }
    },
    {
      label: '字体大小（pt）',
      field: 'fontSize',
      span: 24,
      type: 'number',
      options: {
        min: 10,
        max: 120,
        size: 'mini'
      }
    },
    {
      label: '行高',
      field: 'lineHeight',
      span: 24,
      type: 'select',
      options: {
        options: [
          { value: '1',   label: '1'   },
          { value: '1.5', label: '1.5' },
          { value: '2',   label: '2'   },
          { value: '2.5', label: '2.5' },
          { value: '3',   label: '3'   }
        ]
      }
    },
    {
      label: '排列',
      field: '', // 对应原先 btnRadioGroup 里每项包含两个 field：justifyContent/alignItems
      span: 24,
      type: 'btnRadioGroup',
      options: [
        {
          field: 'justifyContent',
          // 对应水平对齐那一组按钮
          options: [
            { type: 'icon', content: 'ri-align-left',   value: 'flex-start', label: '水平居左' },
            { type: 'icon', content: 'ri-align-center', value: 'center',     label: '水平居中' },
            { type: 'icon', content: 'ri-align-right',  value: 'flex-end',   label: '水平居右' }
          ]
        },
        {
          field: 'alignItems',
          // 对应垂直对齐那一组按钮
          options: [
            { type: 'icon', content: 'ri-align-left rotate-90',   value: 'flex-start', label: '垂直居上'   },
            { type: 'icon', content: 'ri-align-center rotate-90', value: 'center',     label: '垂直居中'   },
            { type: 'icon', content: 'ri-align-right rotate-90',  value: 'flex-end',   label: '垂直居下'   }
          ]
        }
      ]
    },
    {
      label: '文字样式',
      field: '', // 对应原先 btnRadioGroup 里每项包含 fontWeight/fontStyle/isUnderLine/isDelLine
      span: 24,
      type: 'btnRadioGroup',
      options: [
        {
          field: 'fontWeight',
          isRadio: false, // 可多选
          options: [
            { type: 'icon', content: 'ri-bold',       value: 'bold',    label: '粗体' }
          ]
        },
        {
          field: 'fontStyle',
          isRadio: false,
          options: [
            { type: 'icon', content: 'ri-italic',     value: 'italic',  label: '斜体' }
          ]
        },
        {
          field: 'isUnderLine',
          isRadio: false,
          options: [
            { type: 'icon', content: 'ri-underline', value: true,      label: '下划线' }
          ]
        },
        {
          field: 'isDelLine',
          isRadio: false,
          options: [
            { type: 'icon', content: 'ri-strikethrough', value: true,   label: '删除线' }
          ]
        }
      ]
    },
    {
      label: '背景颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // $colorPicker 可自行扩展
      }
    },
    {
      label: '边距',
      field: 'padding',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 20,
        size: 'mini'
      }
    }
  ],

  // 对应：RoyImage 表单配置
  RoyImage: [
    {
      label: '圆角',
      field: 'borderRadius',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 10000,
        size: 'mini'
      }
    },
    {
      label: '边框类型',
      field: 'borderType',
      span: 24,
      type: 'select',
      options: {
        options: [
          { label: '无',     value: 'none'   },
          { label: '实线',   value: 'solid'  },
          { label: '线虚线', value: 'dashed' },
          { label: '点虚线', value: 'dotted' }
        ]
      }
    },
    {
      label: '边框颜色',
      field: 'borderColor',
      span: 24,
      type: 'color',
      options: {
        // $colorPicker
      }
    },
    {
      label: '边框宽度',
      field: 'borderWidth',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 4,
        size: 'mini'
      }
    },
    {
      label: '旋转角度（°）',
      field: 'rotate',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 360,
        size: 'mini'
      }
    },
    {
      label: '元素位置',
      field: 'elementPosition',
      span: 24,
      type: 'radio',
      options: {
        options: [
          { label: '跟随全局配置（默认）', value: 'default' },
          { label: '固定位置',           value: 'fixed'   },
          { label: '重复位置',           value: 'repeated'}
        ]
      }
    }
  ],

  // 对应：RoyQRCode 表单配置
  RoyQRCode: [
    {
      label: '宽度',
      field: 'width',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '高度',
      field: 'height',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '背景颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '边框类型',
      field: 'borderType',
      span: 24,
      type: 'select',
      options: {
        options: [
          { label: '无',     value: 'none'   },
          { label: '实线',   value: 'solid'  },
          { label: '线虚线', value: 'dashed' },
          { label: '点虚线', value: 'dotted' }
        ]
      }
    },
    {
      label: '边框颜色',
      field: 'borderColor',
      span: 24,
      type: 'color',
      options: {
        // $colorPicker
      }
    },
    {
      label: '边框宽度',
      field: 'borderWidth',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 4,
        size: 'mini'
      }
    },
    {
      label: '旋转角度（°）',
      field: 'rotate',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 360,
        size: 'mini'
      }
    },
    {
      label: '元素位置',
      field: 'elementPosition',
      span: 24,
      type: 'radio',
      options: {
        options: [
          { label: '跟随全局配置（默认）', value: 'default' },
          { label: '固定位置',           value: 'fixed'   },
          { label: '重复位置',           value: 'repeated'}
        ]
      }
    }
  ],

  // 对应：RoyBarCode 表单配置
  RoyBarCode: [
    {
      label: '宽度',
      field: 'width',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '高度',
      field: 'height',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '背景颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '旋转角度（°）',
      field: 'rotate',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 360,
        size: 'mini'
      }
    },
    {
      label: '元素位置',
      field: 'elementPosition',
      span: 24,
      type: 'radio',
      options: {
        options: [
          { label: '跟随全局配置（默认）', value: 'default' },
          { label: '固定位置',           value: 'fixed'   },
          { label: '重复位置',           value: 'repeated'}
        ]
      }
    }
  ]
};

















      export const formConfig = {
  RoyCircle: [
    {
      label: '宽度',
      field: 'width',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '高度',
      field: 'height',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '背景颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // 此处可添加 color-picker 需要的其他配置
      }
    },
    {
      label: '边框类型',
      field: 'borderType',
      span: 24,
      type: 'select',
      options: {
        options: [
          { label: '无', value: 'none' },
          { label: '实线', value: 'solid' },
          { label: '线虚线', value: 'dashed' },
          { label: '点虚线', value: 'dotted' }
        ]
      }
    },
    {
      label: '边框颜色',
      field: 'borderColor',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '边框宽度',
      field: 'borderWidth',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 4,
        size: 'mini'
      }
    },
    {
      label: '旋转角度（°）',
      field: 'rotate',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 360,
        size: 'mini'
      }
    },
    {
      label: '元素位置',
      field: 'elementPosition',
      span: 24,
      type: 'radio',
      options: {
        options: [
          { label: '跟随全局配置（默认）', value: 'default' },
          { label: '固定位置', value: 'fixed' },
          { label: '重复位置', value: 'repeated' }
        ]
      }
    }
  ],

  RoyLine: [
    {
      label: '宽度',
      field: 'width',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '粗细',
      field: 'height',
      span: 24,
      type: 'select',
      options: {
        options: [
          { label: '极细', value: 0.5 },
          { label: '细', value: 1 },
          { label: '正常', value: 1.5 },
          { label: '粗', value: 2 },
          { label: '极粗', value: 4 },
          { label: '粗粗粗', value: 6 }
        ]
      }
    },
    {
      label: '颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '旋转角度（°）',
      field: 'rotate',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 360,
        size: 'mini'
      }
    },
    {
      label: '元素位置',
      field: 'elementPosition',
      span: 24,
      type: 'radio',
      options: {
        options: [
          { label: '跟随全局配置（默认）', value: 'default' },
          { label: '固定位置', value: 'fixed' },
          { label: '重复位置', value: 'repeated' }
        ]
      }
    }
  ],

  RoyStar: [
    {
      label: '大小',
      field: 'height',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '样式',
      field: 'icon',
      span: 24,
      type: 'select',
      options: {
        options: [
          { label: '实心五角星', value: 'icon-shiwujiaoxing' },
          { label: '空心五角星', value: 'icon-kongwujiaoxing' },
          { label: '圆润五角星', value: 'icon-shoucang' },
          { label: '双线五角星', value: 'icon-wujiaoxing' }
        ]
      }
    },
    {
      label: '旋转角度（°）',
      field: 'rotate',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 360,
        size: 'mini'
      }
    },
    {
      label: '元素位置',
      field: 'elementPosition',
      span: 24,
      type: 'radio',
      options: {
        options: [
          { label: '跟随全局配置（默认）', value: 'default' },
          { label: '固定位置', value: 'fixed' },
          { label: '重复位置', value: 'repeated' }
        ]
      }
    }
  ],

  RoySimpleTable: [
    {
      label: '背景颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '边框颜色',
      field: 'borderColor',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '边框宽度',
      field: 'borderWidth',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 4,
        size: 'mini'
      }
    }
    // 如果需要 “元素位置” 的话，可按照之前示例补充
  ],

  RoyComplexTable: [
    {
      label: '背景颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '边框颜色',
      field: 'borderColor',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '边框宽度',
      field: 'borderWidth',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 4,
        size: 'mini'
      }
    },
    {
      label: '字体',
      field: 'fontFamily',
      span: 24,
      type: 'select',
      options: {
        options: [
          { label: '默认', value: 'default' },
          { label: '宋体', value: 'simsun' },
          { label: '黑体', value: 'simhei' },
          { label: '楷体', value: 'kaiti' },
          { label: '仿宋', value: 'fangsong' },
          { label: '微软雅黑', value: 'microsoft yahei' }
        ]
      }
    },
    {
      label: '字体颜色',
      field: 'color',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '字体大小（pt）',
      field: 'fontSize',
      span: 24,
      type: 'number',
      options: {
        min: 10,
        max: 120,
        size: 'mini'
      }
    }
    // 如果需要 “元素位置” 的话，可按照之前示例补充
  ],

  RoyTextIn: [
    {
      label: '背景颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '边距',
      field: 'padding',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 20,
        size: 'mini'
      }
    }
  ]
};







export const formConfig = {
  // 对应：RoySimpleTextIn 表单配置
  RoySimpleTextIn: [
    {
      label: '字体',
      field: 'fontFamily',
      span: 24,
      type: 'select',
      options: {
        options: [
          { label: '默认', value: 'default' },
          { label: '宋体', value: 'simsun' },
          { label: '黑体', value: 'simhei' },
          { label: '楷体', value: 'kaiti' },
          { label: '仿宋', value: 'fangsong' },
          { label: '微软雅黑', value: 'microsoft yahei' }
        ]
      }
    },
    {
      label: '字体颜色',
      field: 'color',
      span: 24,
      type: 'color',
      options: {
        // 对应原先 $colorPicker，若需额外配置可在此添加
      }
    },
    {
      label: '字体大小（pt）',
      field: 'fontSize',
      span: 24,
      type: 'number',
      options: {
        min: 10,
        max: 120,
        size: 'mini'
      }
    },
    {
      label: '行高',
      field: 'lineHeight',
      span: 24,
      type: 'select',
      options: {
        options: [
          { value: '1',   label: '1'   },
          { value: '1.5', label: '1.5' },
          { value: '2',   label: '2'   },
          { value: '2.5', label: '2.5' },
          { value: '3',   label: '3'   }
        ]
      }
    },
    {
      label: '排列',
      field: '', // 对应原先 btnRadioGroup 里每项包含两个 field：justifyContent/alignItems
      span: 24,
      type: 'btnRadioGroup',
      options: [
        {
          field: 'justifyContent',
          // 对应水平对齐那一组按钮
          options: [
            { type: 'icon', content: 'ri-align-left',   value: 'flex-start', label: '水平居左' },
            { type: 'icon', content: 'ri-align-center', value: 'center',     label: '水平居中' },
            { type: 'icon', content: 'ri-align-right',  value: 'flex-end',   label: '水平居右' }
          ]
        },
        {
          field: 'alignItems',
          // 对应垂直对齐那一组按钮
          options: [
            { type: 'icon', content: 'ri-align-left rotate-90',   value: 'flex-start', label: '垂直居上'   },
            { type: 'icon', content: 'ri-align-center rotate-90', value: 'center',     label: '垂直居中'   },
            { type: 'icon', content: 'ri-align-right rotate-90',  value: 'flex-end',   label: '垂直居下'   }
          ]
        }
      ]
    },
    {
      label: '文字样式',
      field: '', // 对应原先 btnRadioGroup 里每项包含 fontWeight/fontStyle/isUnderLine/isDelLine
      span: 24,
      type: 'btnRadioGroup',
      options: [
        {
          field: 'fontWeight',
          isRadio: false, // 可多选
          options: [
            { type: 'icon', content: 'ri-bold',       value: 'bold',    label: '粗体' }
          ]
        },
        {
          field: 'fontStyle',
          isRadio: false,
          options: [
            { type: 'icon', content: 'ri-italic',     value: 'italic',  label: '斜体' }
          ]
        },
        {
          field: 'isUnderLine',
          isRadio: false,
          options: [
            { type: 'icon', content: 'ri-underline', value: true,      label: '下划线' }
          ]
        },
        {
          field: 'isDelLine',
          isRadio: false,
          options: [
            { type: 'icon', content: 'ri-strikethrough', value: true,   label: '删除线' }
          ]
        }
      ]
    },
    {
      label: '背景颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // $colorPicker 可自行扩展
      }
    },
    {
      label: '边距',
      field: 'padding',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 20,
        size: 'mini'
      }
    }
  ],

  // 对应：RoyImage 表单配置
  RoyImage: [
    {
      label: '圆角',
      field: 'borderRadius',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 10000,
        size: 'mini'
      }
    },
    {
      label: '边框类型',
      field: 'borderType',
      span: 24,
      type: 'select',
      options: {
        options: [
          { label: '无',     value: 'none'   },
          { label: '实线',   value: 'solid'  },
          { label: '线虚线', value: 'dashed' },
          { label: '点虚线', value: 'dotted' }
        ]
      }
    },
    {
      label: '边框颜色',
      field: 'borderColor',
      span: 24,
      type: 'color',
      options: {
        // $colorPicker
      }
    },
    {
      label: '边框宽度',
      field: 'borderWidth',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 4,
        size: 'mini'
      }
    },
    {
      label: '旋转角度（°）',
      field: 'rotate',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 360,
        size: 'mini'
      }
    },
    {
      label: '元素位置',
      field: 'elementPosition',
      span: 24,
      type: 'radio',
      options: {
        options: [
          { label: '跟随全局配置（默认）', value: 'default' },
          { label: '固定位置',           value: 'fixed'   },
          { label: '重复位置',           value: 'repeated'}
        ]
      }
    }
  ],

  // 对应：RoyQRCode 表单配置
  RoyQRCode: [
    {
      label: '宽度',
      field: 'width',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '高度',
      field: 'height',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '背景颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '边框类型',
      field: 'borderType',
      span: 24,
      type: 'select',
      options: {
        options: [
          { label: '无',     value: 'none'   },
          { label: '实线',   value: 'solid'  },
          { label: '线虚线', value: 'dashed' },
          { label: '点虚线', value: 'dotted' }
        ]
      }
    },
    {
      label: '边框颜色',
      field: 'borderColor',
      span: 24,
      type: 'color',
      options: {
        // $colorPicker
      }
    },
    {
      label: '边框宽度',
      field: 'borderWidth',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 4,
        size: 'mini'
      }
    },
    {
      label: '旋转角度（°）',
      field: 'rotate',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 360,
        size: 'mini'
      }
    },
    {
      label: '元素位置',
      field: 'elementPosition',
      span: 24,
      type: 'radio',
      options: {
        options: [
          { label: '跟随全局配置（默认）', value: 'default' },
          { label: '固定位置',           value: 'fixed'   },
          { label: '重复位置',           value: 'repeated'}
        ]
      }
    }
  ],

  // 对应：RoyBarCode 表单配置
  RoyBarCode: [
    {
      label: '宽度',
      field: 'width',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '高度',
      field: 'height',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        size: 'mini'
      }
    },
    {
      label: '背景颜色',
      field: 'background',
      span: 24,
      type: 'color',
      options: {
        // 可留空
      }
    },
    {
      label: '旋转角度（°）',
      field: 'rotate',
      span: 24,
      type: 'number',
      options: {
        min: 0,
        max: 360,
        size: 'mini'
      }
    },
    {
      label: '元素位置',
      field: 'elementPosition',
      span: 24,
      type: 'radio',
      options: {
        options: [
          { label: '跟随全局配置（默认）', value: 'default' },
          { label: '固定位置',           value: 'fixed'   },
          { label: '重复位置',           value: 'repeated'}
        ]
      }
    }
  ]
};
 <div class="fork-me">
      <a
        href="https://github.com/ROYIANS/print-template-designer"
        target="_blank"
      >
        <i class="ri-github-line"></i>
        Give me a Star!
      </a>
    </div>

    await toast(
    '欢迎使用ROYIANS的打印模板设计器，仅个人学习使用',
    'success',
    3000,
  )
  await toast('当前网页预览的是最新开发分支，请留意', 'warning', 3000)
  console.log('contributed by ROYIANS@Little-Dreamland﹢')



   <RoyModal
      v-if="showEditor"
      v-model:show="showEditor"
      height="70%"
      title="长文本编辑"
      width="60%"
      @close="handleTextClosed"
    >
      <div class="roy-wang-editor" @mousedown="handleMouseDown">
       
      </div>
    </RoyModal>

    // import Vue from 'vue'
// import layer from '@/printTemplate/stores/modules/layer.js'
// import compose from '@/printTemplate/stores/modules/compose.js'
// import snapshot from '@/printTemplate/stores/modules/snapshot.js'
// import copy from '@/printTemplate/stores/modules/copy.js'
// import lock from '@/printTemplate/stores/modules/lock.js'
// import store from '@/printTemplate/stores/index.js'

// export const state = {
//   ...compose.state,
//   ...snapshot.state,
//   ...copy.state,
//   // 编辑器模式 edit preview
//   editMode: 'edit',
//   pageConfig: {
//     // 页面大小
//     pageSize: 'A4',
//     // 页面方向 l 横向长 p 纵向长
//     pageDirection: 'p',
//     // 页面位置布局 fixed 固定 relative 相对
//     pageLayout: 'fixed',
//     // 页面长度：mm
//     pageWidth: 210,
//     // 页面高度：mm
//     pageHeight: 297,
//     // 页面当前高度: mm （流式布局）
//     pageCurHeight: 297,
//     // 页面下边距 mm
//     pageMarginBottom: 8,
//     // 页面上边距 mm
//     pageMarginTop: 8,
//     // 页面标题/模板标题
//     title: '新建模板',
//     // 默认缩放比例：100%
//     scale: 1,
//     // 页面背景
//     background: '#ffffff',
//     // 默认字体颜色
//     color: '#212121',
//     // 默认字号
//     fontSize: 12,
//     // 默认字体
//     fontFamily: 'simhei',
//     // 默认行高
//     lineHeight: 1
//   },
//   // 是否在编辑器中，用于判断复制、粘贴组件时是否生效，如果在编辑器外，则无视这些操作
//   isInEditor: false,
//   componentData: [],
//   dataSource: [],
//   dataSet: {},
//   curComponent: null,
//   curTableCell: null,
//   curComponentIndex: null,
//   // 点击画布时是否点中组件，主要用于取消选中组件用。
//   // 如果没点中组件，并且在画布空白处弹起鼠标，则取消当前组件的选中状态
//   isClickComponent: false,
//   globalCount: 0,
//   paletteCount: 0,
//   componentsCount: 0,
//   curTableSettingId: null
// }
// export const getters = {}
// export const mutations = {
//   ...layer.mutations,
//   ...compose.mutations,
//   ...snapshot.mutations,
//   ...copy.mutations,
//   ...lock.mutations,
//   setClickComponentStatus(state, status) {
//     state.isClickComponent = status
//   },

//   setEditMode(state, mode) {
//     state.editMode = mode
//   },

//   setInEditorStatus(state, status) {
//     state.isInEdiotr = status
//   },

//   setCanvasStyle(state, style) {
//     state.canvasStyleData = style
//   },

//   setCurComponent(state, { component, index }) {
//     state.curComponent = component
//     state.curComponentIndex = index
//     state.curTableCell = null
//   },

//   setCurTableCell(state, { component }) {
//     state.curTableCell = component
//   },

//   setPageSize(state, { pageSize, w, h }) {
//     state.pageConfig.pageSize = pageSize
//     const reverseWH = state.pageConfig.pageDirection !== 'p'
//     state.pageConfig.pageWidth = reverseWH ? h : w
//     state.pageConfig.pageHeight = reverseWH ? w : h
//   },

//   togglePageDirection(state) {
//     const direction = state.pageConfig.pageDirection
//     state.pageConfig.pageDirection = direction === 'p' ? 'l' : 'p'
//   },

//   setPageConfig(state, pageConfig) {
//     state.pageConfig = pageConfig
//     store.commit('printTemplateModule/rulerThings/setRect', {
//       w: pageConfig.pageDirection === 'p' ? pageConfig.pageWidth : pageConfig.pageHeight,
//       h: pageConfig.pageDirection === 'p' ? pageConfig.pageHeight : pageConfig.pageWidth
//     })
//     store.commit('printTemplateModule/rulerThings/setReDrawRuler')
//   },

//   updateDataValue(state, { data, key, value }) {
//     data[key] = value
//   },

//   setPropValue({ componentData }, { propValue, id }) {
//     if (componentData.length) {
//       let newComponentValue = null
//       let newComponentIndex = null
//       for (let i = 0; i < componentData.length; i++) {
//         if (componentData[i].id === id) {
//           newComponentIndex = i
//           newComponentValue = componentData[i]
//           newComponentValue.propValue = propValue
//         }
//       }
//       if (newComponentIndex !== null) {
//         Vue.set(componentData, newComponentIndex, newComponentValue)
//         store.commit('printTemplateModule/recordSnapshot')
//       }
//     }
//   },

//   setComponentValue({ componentData }, { key, value, id }) {
//     if (componentData.length) {
//       let newComponentValue = null
//       let newComponentIndex = null
//       for (let i = 0; i < componentData.length; i++) {
//         if (componentData[i].id === id) {
//           newComponentIndex = i
//           newComponentValue = componentData[i]
//           newComponentValue[key] = value
//         }
//       }
//       if (newComponentIndex !== null) {
//         Vue.set(componentData, newComponentIndex, newComponentValue)
//         store.commit('printTemplateModule/recordSnapshot')
//       }
//     }
//   },

//   setBindValue({ componentData }, { bindValue, id }) {
//     if (componentData.length) {
//       let newComponentValue = null
//       let newComponentIndex = null
//       for (let i = 0; i < componentData.length; i++) {
//         if (componentData[i].id === id) {
//           newComponentIndex = i
//           newComponentValue = componentData[i]
//           newComponentValue.bindValue = bindValue
//         }
//       }
//       if (newComponentIndex !== null) {
//         Vue.set(componentData, newComponentIndex, newComponentValue)
//         store.commit('printTemplateModule/recordSnapshot')
//       }
//     }
//   },

//   setDataSource(state, dataSource) {
//     state.dataSource = dataSource
//   },

//   setDataSet(state, dataSet) {
//     state.dataSet = dataSet
//   },

//   setCurTableSettingId(state, id) {
//     state.curTableSettingId = id
//   },

//   setShapeStyle({ curComponent }, { top, left, width, height, rotate }) {
//     if (!isNaN(top)) {
//       curComponent.style.top = Math.round(top)
//     }
//     if (!isNaN(left)) {
//       curComponent.style.left = Math.round(left)
//     }
//     if (!isNaN(width)) {
//       curComponent.style.width = Math.round(width)
//     }
//     if (!isNaN(height)) {
//       curComponent.style.height = Math.round(height)
//     }
//     if (!isNaN(rotate)) {
//       curComponent.style.rotate = Math.round(rotate)
//     }
//     if (top || left) {
//       // FIXME: 只在坐标变化后触发，如果是宽高变化，则在外部的监听器中已经做了处理，这里无需重复执行。
//       store.commit('printTemplateModule/setShapePosition', { top, left, width, height })
//     }
//   },

//   setShapePosition({ curComponent }, { top, left, width, height }) {
//     if (!curComponent || !curComponent.position) {
//       return
//     }

//     let originWidth = curComponent.position.rx - curComponent.position.lx
//     let originHeight = curComponent.position.by - curComponent.position.ty

//     // 调整大小和位置后修改 position 信息
//     curComponent.position = {
//       ...curComponent.position,
//       lx: Math.round(!isNaN(left) ? left : curComponent.position.lx),
//       ty: Math.round(!isNaN(top) ? top : curComponent.position.ty),
//       rx: Math.round(curComponent.position.lx + (width ?? originWidth)),
//       by: Math.round(curComponent.position.ty + (height ?? originHeight))
//     }
//   },

//   setShapeSingleStyle({ curComponent }, { key, value }) {
//     curComponent.style[key] = value
//   },

//   setComponentData(state, componentData = []) {
//     Vue.set(state, 'componentData', componentData)
//   },

//   addComponent(state, { component, index }) {
//     // 初始化 position 信息
//     component.position = {
//       lx: component.style.left,
//       ty: component.style.top,
//       rx: isNaN(component.style.width) ? -Infinity : component.style.left + component.style.width,
//       by: isNaN(component.style.height) ? -Infinity : component.style.top + component.style.height
//     }

//     if (component.position.rx === -Infinity || component.position.by === -Infinity) {
//       setTimeout(() => {
//         const comEle = document.getElementById(`roy-component-${component.id}`)
//         const rect = comEle.getBoundingClientRect()
//         component.position = {
//           ...component.position,
//           rx: component.position.lx + rect.width,
//           by: component.position.ty + rect.height
//         }
//       }, 100)
//     }

//     if (index !== undefined) {
//       state.componentData.splice(index, 0, component)
//     } else {
//       state.componentData.push(component)
//     }
//   },

//   deleteComponent(state, index) {
//     if (index === undefined) {
//       index = state.curComponentIndex
//     }

//     if (index === state.curComponentIndex) {
//       state.curComponentIndex = null
//       state.curComponent = null
//     }

//     if (/\d/.test(index)) {
//       state.componentData.splice(index, 1)
//     }
//   },

//   setGlobalCount(state) {
//     state.globalCount++
//   },

//   setPaletteCount(state) {
//     state.paletteCount++
//   },

//   setComponentsCount(state) {
//     state.componentsCount++
//   }
// }
// export const actions = {}

// store/modules/printTemplate.js

// import Vue from 'vue'
// import toast from '@/printTemplate/utils/toast'

// const swap = (arr, i, j) => {
//   const temp = arr[i]
//   Vue.set(arr, i, arr[j])
//   Vue.set(arr, j, temp)
// }

// export default {
//   mutations: {
//     upComponent(state) {
//       const { componentData, curComponentIndex } = state
//       // 上移图层 index，表示元素在数组中越往后
//       if (curComponentIndex < componentData.length - 1) {
//         swap(componentData, curComponentIndex, curComponentIndex + 1)
//         state.curComponentIndex = curComponentIndex + 1
//       } else {
//         toast('已经到顶了')
//       }
//     },

//     downComponent(state) {
//       const { componentData, curComponentIndex } = state
//       // 下移图层 index，表示元素在数组中越往前
//       if (curComponentIndex > 0) {
//         swap(componentData, curComponentIndex, curComponentIndex - 1)
//         state.curComponentIndex = curComponentIndex - 1
//       } else {
//         toast('已经到底了')
//       }
//     },

//     topComponent(state) {
//       const { componentData, curComponentIndex, curComponent } = state
//       // 置顶
//       if (curComponentIndex < componentData.length - 1) {
//         componentData.splice(curComponentIndex, 1)
//         componentData.push(curComponent)
//         state.curComponentIndex = componentData.length - 1
//       } else {
//         toast('已经到顶了')
//       }
//     },

//     bottomComponent(state) {
//       const { componentData, curComponentIndex, curComponent } = state
//       // 置底
//       if (curComponentIndex > 0) {
//         componentData.splice(curComponentIndex, 1)
//         componentData.unshift(curComponent)
//         state.curComponentIndex = 0
//       } else {
//         toast('已经到底了')
//       }
//     }
//   },
//   actions: {}
// }


// import Vue from 'vue'

// export default {
//   mutations: {
//     lock({ curComponent }) {
//       Vue.set(curComponent, 'isLock', true)
//     },

//     unlock({ curComponent }) {
//       Vue.set(curComponent, 'isLock', false)
//     }
//   }
// }
 // let _format = column.getFormat()
    // _value = _format({
    //   row: record,
    //   col: column,
    //   field: column.getField(),
    //   table: column.table,
    // })


 // let _length = 200 //
      // rowStart = rowStart - _length
      // if (rowStart < 0) {
      //   rowStart = 0 //
      // }
      // rowEnd = rowEnd + _length

      // let currentIndexContain = _table.currentIndexContain
      // //显示在视图上
      // let _arr = currentIndexContain[_index]
      // if (_arr == null) {
      //   currentIndexContain[_index] = {}
      //   _arr = currentIndexContain[_index] //
      // }
      // let field = _this.getField()
      // _arr[field] = container //
      // } else {
      // let currentIndexContain = _table.currentIndexContain //
      // delete currentIndexContain[_index]
      // }


       // console.log(fitem,item,'tseetitem')//
                // let addCols = config.addCols || []
                // let updateCols = config.updateCols || []
                // let allCols = [...addCols, ...updateCols]
                // item.config.columns = allCols //



                   {
        type: 'table',
        label: '表格布局',
        icon: 'tableStokeP2',
        id: '',
        rows: [
          {
            type: 'tr',
            columns: [
              {
                type: 'td',
                options: {
                  colspan: 1,
                  rowspan: 1,
                  isMerged: false,
                },
                list: [],
                style: {},
              },
            ],
          },
        ],
        options: {
          width: 100,
          widthType: '%',
        },
      },
       // if (1 == 1) {
    //   let _columns = columns.map((col) => {
    //     return { field: col.getField(), width: 100 }
    //   })
    //   return _columns //
    // }
      //   let dropCom = (
      //     <DropdownCom
      //       v-slots={{
      //         default: () => {
      //           return com
      //         },
      //         dropdown: () => {
      //           return <div class="h-300 w-200 bg-red"></div>
      //         },
      //       }}
      //     ></DropdownCom>
      //   )
      //   let _com = dropCom //

       // let tRef: Table = this.getRef(tableName)
    // let curRow = null
    // let _tableName = this.getTableName()
    // if (tRef == null) {
    //   curRow = this.tableDataMap[_tableName]?.curRow ////
    // } else {
    //   curRow = tRef.getCurRow()
    // }
    // return curRow //

     let minRow = Math.min(startX.value, r)
      let maxRow = Math.max(startX.value, r)
      let minCol = Math.min(startY.value, c)
      let maxCol = Math.max(startY.value, c)
      let changed = true

      // 🚀 不断扩展合并范围直到稳定

      // 🚀 迭代扩展区域，直到稳定
      while (changed) {
        changed = false

        for (let row = minRow; row <= maxRow; row++) {
          for (let col = minCol; col <= maxCol; col++) {
            const layout = layoutDetail?.[row - 1]?.[col - 1]
            if (!layout || layout.colSpan === 0 || layout.rowSpan === 0)
              continue

            const rowSpan = layout.rowSpan ?? 1
            const colSpan = layout.colSpan ?? 1

            const rowEnd = row + rowSpan - 1
            const colEnd = col + colSpan - 1

            const rowStart = row
            const colStart = col

            if (rowStart < minRow) {
              minRow = rowStart
              changed = true
            }
            if (colStart < minCol) {
              minCol = colStart
              changed = true
            }
            if (rowEnd > maxRow) {
              maxRow = rowEnd
              changed = true
            }
            if (colEnd > maxCol) {
              maxCol = colEnd
              changed = true
            }
          }
        }
      }

      // ✅ 最终结果是扩展后的矩形区域

      // let startLayout = tableLayout?.[startX.value - 1]?.[startY.value - 1]
      // if (startLayout?.colSpan > 1) {
      //   c = c + startLayout.colSpan - 1
      // }
      // if (startLayout?.rowSpan > 1) {
      //   r = r + startLayout.rowSpan - 1 //
      // }
      // if (layout?.colSpan > 1) {
      //   c = c + layout.colSpan - 1
      // }
      // if (layout?.rowSpan > 1) {
      //   r = r + layout.rowSpan - 1
      // }

       // endX.value = r
        // endY.value = c
        // endX.value = maxRow
        // endY.value = maxCol



         for (let rr = 1; rr <= tableConfig.rows; rr++) {
          const idx = (rr - 1) * tableConfig.cols + (c - 1)
          const info = tableConfig.layoutDetail[idx]
          if (info.colSpan === curConfig.colSpan) {
            tableData[`${rr}-${c}`].width =
              (rect.width + dX) / Number(props.scale)
          }
        }
        // 同一行高度
        for (let cc = 1; cc <= tableConfig.cols; cc++) {
          const idx = (r - 1) * tableConfig.cols + (cc - 1)
          const info = tableConfig.layoutDetail[idx]
          if (info.rowSpan === curConfig.rowSpan) {
            tableData[`${r}-${cc}`].height =
              (rect.height + dY) / Number(props.scale)
          }
        }

         // const startIndex = (sx - 1) * tableConfig.cols + (sy - 1)
      // const groupId = tableConfig.layoutDetail[startIndex].groupId
      // if (!groupId) return
      // tableConfig.layoutDetail.forEach((info) => {
      //   if (info.groupId === groupId) {
      //     info.rowSpan = 1
      //     info.colSpan = 1
      //     delete info.groupId
      //   }
      // })


      // if (this.runClearSelect == true) {
        //   this.getInstance().clearSelected()
        //   this.runClearSelect = false //
        // }


         // if (show.value == false) {
      //   return null
      // }
      // if (1 == 1) {
      //   let com = (
      //     <div class="h-400 w-400">
      //       <TableCom
      //         {..._config}
      //         showHeaderButtons={true}
      //         buttons={[
      //           {
      //             label: '更新',
      //             fn: async (config) => {
      //               console.log('更新') //
      //               let table: Table = config.parent //
      //               // console.log(config) ////
      //               let fData = table.getFlatTreeData()
      //               let _data = fData.filter((item) => {
      //                 let _rowState = item['_rowState']
      //                 return _rowState == 'change'
      //               })
      //               console.log(_data) //
      //             },
      //           },
      //         ]}
      //       ></TableCom>
      //     </div>
      //   )
      //   return com //
      // }

       // systemIns.getHttp().registerEvent('permissions patched', () => {
    //   //   debugger //
    //   console.log('权限修改了') //
    //   //   systemIns.getMenuData() //
    // }) //

     // let tMapData = this.getTableRefData(tableName) //
    // let row = config.row
    // tMapData['curRow'] = row //


    if (tableName == 't_PurOrder') {
      debugger //
    } ////


     let _data = this.getLayoutData()
    //@ts-ignore
    _data.tableName = this.getMainTableName()
    let http = this.getHttp()
    let _res = await http.create('entity', _data) // //






















    <template>
  <div class="flex flex-col h-screen">
    <!-- Header -->
    <header class="flex items-center justify-between px-5 text-white bg-blue-600 shadow-md h-60">
      <!-- Logo -->
      <div class="text-2xl font-bold">MyApp Platform</div>
      <!-- Navigation Menu -->
      <el-menu
        mode="horizontal"
        :default-active="activeHeader"
        background-color="transparent"
        text-color="#ffffff"
        active-text-color="#ffe58f"
        class="flex-1 mx-10"
      >
        <el-menu-item index="1" class="px-4">Home</el-menu-item>
        <el-menu-item index="2" class="px-4">About</el-menu-item>
        <el-menu-item index="3" class="px-4">Contact</el-menu-item>
      </el-menu>
      <!-- User Module -->
      <div class="flex items-center ml-5">
        <template v-if="isLoggedIn">
  <div class="flex items-center space-x-2">
    <el-dropdown
      split-button
      type="primary"
      @click="logout"
      placement="bottom-end"
      class="h-40 px-4 rounded-lg"
    >
      <span class="flex items-center space-x-2">
        <img :src="user.avatar" alt="avatar" class="w-40 h-40 rounded-full" />
        <span class="font-medium">{{ user.name }}</span>
      </span>
      <template #dropdown>
        <el-dropdown-menu>
          <el-dropdown-item command="profile">个人中心</el-dropdown-item>
          <el-dropdown-item command="support">联系客服</el-dropdown-item>
          <el-dropdown-item divided command="author">联系作者</el-dropdown-item>
          <el-dropdown-item command="promo">获取优惠</el-dropdown-item>
          <el-dropdown-item command="logout">退出登录</el-dropdown-item>
        </el-dropdown-menu>
      </template>
    </el-dropdown>
  </div>
</template>
        <template v-else>
          <el-button type="primary" size="small" @click="login">Login</el-button>
        </template>
      </div>
    </header>

    <!-- Main Layout -->
    <div class="flex flex-1">
      <!-- Sidebar Menu -->
      <aside class="bg-gray-100 w-200">
        <el-menu :default-active="activeSidebar" class="w-full">
          <el-menu-item index="1" class="flex items-center h-40 px-4"><i class="mr-2 el-icon-menu"></i>Dashboard</el-menu-item>
          <el-menu-item index="2" class="flex items-center h-40 px-4"><i class="mr-2 el-icon-setting"></i>Settings</el-menu-item>
          <el-menu-item index="3" class="flex items-center h-40 px-4"><i class="mr-2 el-icon-user"></i>Profile</el-menu-item>
          <el-menu-item index="4" class="flex items-center h-40 px-4"><i class="mr-2 el-icon-document"></i>Reports</el-menu-item>
        </el-menu>
      </aside>

      <!-- Content Area -->
      <main class="flex-1 p-5 overflow-auto bg-gray-50">
        <div class="grid grid-cols-[repeat(auto-fill,minmax(200px,1fr))] gap-20">
          <el-card v-for="app in apps" :key="app.id" class="transition-transform transform hover:-translate-y-2">
            <div class="flex items-center mb-2">
              <i :class="app.icon + ' text-24 mr-2'" />
              <span class="text-lg font-semibold">{{ app.name }}</span>
            </div>
            <div class="mb-4 text-sm text-gray-600">{{ app.description }}</div>
            <div class="text-right"><el-button type="primary" size="small">Open</el-button></div>
          </el-card>
        </div>
      </main>
    </div>

    <!-- Footer -->
    <footer class="flex items-center justify-center h-40 text-gray-500 bg-gray-100">
      © 2025 MyApp Platform
    </footer>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue';

interface AppItem {
  id: number;
  name: string;
  description: string;
  icon: string;
}

// 应用列表数据
const apps = ref<AppItem[]>([
  { id: 1, name: 'Analytics', description: 'View data insights', icon: 'el-icon-data-analysis' },
  { id: 2, name: 'Tasks', description: 'Manage your tasks', icon: 'el-icon-check' },
  { id: 3, name: 'Messages', description: 'Check your messages', icon: 'el-icon-message' },
  { id: 4, name: 'Settings', description: 'Configure your preferences', icon: 'el-icon-setting' }
]);

// 菜单激活状态
const activeHeader = ref('1');
const activeSidebar = ref('1');

// 用户登录状态及信息
const isLoggedIn = ref(false);
const user = ref({ name: 'User Name', avatar: 'https://via.placeholder.com/40' });

// 登录与登出方法 (替换为实际逻辑)
function login() {
  isLoggedIn.value = true;
}

function logout() {
  isLoggedIn.value = false;
}

function handleCommand(command: string) {
  if (command === 'profile') {
    // 跳转到个人中心
    console.log('Go to profile');
  } else if (command === 'logout') {
    logout();
  }
}
</script>


 <!-- <el-menu-item index="2" class="flex items-center h-40 px-4">
            <i class="mr-2 el-icon-setting"></i>
            Settings
          </el-menu-item>
          <el-menu-item index="3" class="flex items-center h-40 px-4">
            <i class="mr-2 el-icon-user"></i>
            Profile
          </el-menu-item>
          <el-menu-item index="4" class="flex items-center h-40 px-4">
            <i class="mr-2 el-icon-document"></i>
            Reports 
          </el-menu-item> -->
          // const routes: RouteRecordRaw[] = []
  // Object.entries(pages).forEach(([filePath, module]) => {
  //   // filePath 示例: '../views/user/profile/index.vue'
  //   // 拆分：['..','views','user','profile','index.vue'] -> 取 ['user','profile']
  //   const segments = filePath.split('/').slice(2, -1)
  //   console.log(segments, 'segments')
  //   let appName=segments[1]
  //   // 如果没有 segments，说明是 views/index.vue -> 根路由
  //   if (segments.length === 0) {
  //     routes.push({
  //       path: '/',
  //       name: 'home',
  //       component: module.default,
  //     })
  //     return
  //   }

  //   // 递归插入到 routes 中
  //   let parentArray = routes
  //   segments.forEach((seg, idx) => {
  //     const isLast = idx === segments.length - 1
  //     const routePath = idx === 0 ? `/${seg}` : seg
  //     let route = parentArray.find((r) => r.path === routePath)
  //     if (!route) {
  //       route = {
  //         path: routePath,
  //         name: seg,
  //         // 只有最末层才挂载 component
  //         component: isLast ? module.default : undefined,
  //         children: [],
  //       }
  //       parentArray.push(route)
  //     } else if (isLast) {
  //       // 如果上次只创建了空壳，这里补上 component
  //       route.component = module.default
  //     }

  //     // 下一层挂载在 children
  //     if (!route.children) route.children = []
  //     parentArray = route.children
  //   })
  // })

  // router.addRoute('pageIndex', {
      //   path: 'companyHome',
      //   name: 'companyHome', //
      //   component: () => import('@/pages/platform/home/erpHome.vue'), //
      //   meta: {
      //     icon: 'CreditCardOutlined',
      //   },
      // })


       // chunkFileNames: (chunk) => {
    //   return 'assets/' + chunk.name + '.[hash]' + '.' + timestamp + '.js'
    // },
    // assetFileNames: (asset) => {
    //   const name = asset.name
    //   if (name && (name.endsWith('.css') || name.endsWith('.js'))) {
    //     const names = name.split('.')
    //     const extname = names.splice(names.length - 1, 1)[0]
    //     return `assets/${names.join('.')}.[hash].${timestamp}.${extname}`
    //   }
    //   return 'assets/' + asset.name
    // },
    if (nextForm != null && formIns.isDesign == true) {
        com = <Everright-form-editor formIns={nextForm}></Everright-form-editor>
      } ////


      if (nextForm != null && formIns.isDesign == true) {
        com = <Everright-form-editor formIns={nextForm}></Everright-form-editor>
      }



  


         if (store.length == 1) {
          let n0 = store[0]
          let pContext = n0.context
          let pp = pContext.parent
          if (pp.type == 'col') {
            let pp1 = pp.context.parent
            if (pp1.type == 'grid') {
              let pp1columns = pp1.columns
              if (pp1columns.length == 1) {
                let pp1Context = pp1?.context // is inline
                let pppparent = pp1Context?.parent //is Array
                let ppppContext = pppparent?.context
                let ppppparent = ppppContext?.parent
                if (ppppparent == ER.state.store) {
                  //
                  // debugger
                  newElement = ER.wrapElement(
                    _.cloneDeep(oldEl),
                    inserRowIndex !== '',
                    true,
                    isBlock,
                    true,
                  )
                  inserRowIndex = ppppparent.findIndex(
                    (node) => node.id == pppparent.id,
                  )
                  store = ER.state.store //
                  preP = ER.state.store //
                  // ER.state.store.splice(inserRowIndex, 0, newElement) //
                }
              }
            }
          }
        }

        let isInRootDiv = false
      if (inserRowIndex !== '') {
        let store = []
        store = Array.isArray(prevSortable?.options?.parent)
          ? prevSortable?.options.parent
          : prevSortable?.options?.parent?.list
        // 在指定的索引位置插入新元素
        let _store = ER.state.store
        if (_store == store) {
          isInRootDiv = true //
        }
      } //

      // state.store = newData
        // state.store.forEach((e) => {
        //   utils.addContext({ node: e, parent: state.store, form: this }) //
        // })


        {/* <router-view
                  v-slots={{
                    default: (config) => {
                      const { Component, route } = config
                      if (!Component) {
                        return <div></div>
                      }
                      const FullPath = route.fullPath
                      let _com = (
                        <KeepAlive>
                          <Component key={FullPath} />
                        </KeepAlive>
                      ) //
                      return _com
                    },
                  }}
                ></router-view> */}

                // let _data = data.map((_row) => {
      //   let row = { ..._row } //
      //   let children = row.columns || []
      //   let list = row.list || []
      //   let rows = row.rows || []
      //   children = [...children, ...list, ...rows]
      //   if (Array.isArray(children) && children.length > 0) {
      //     return [row, ...fn(children)]
      //   }
      //   return [row]
      // })
      // return _data.flat()
      // let design = this.getMainPageDesign()
    // if (design && tableName != null) {
    //   if (isProps == false) {
    //     design.setCurRow(row, tableName)
    //   }
    // }

    /* 
      async function fn() {
    let tRef = this.getRef('t_CustomerCls')
    let curRow = tRef.getCurRow()
    let _curRow = null
    if (curRow == null) {
        this.getSystem().confirmMessage('请选择一行进行编辑')
        return 
        // _curRow = {
        //     cParentClsNo: '0'
        // }
    } else {
        // let id = curRow['cClsNo']
        // _curRow = {
        //     cParentClsNo: id
        // }
    }
    await this.confirmEditEntity({
        tableName: 't_CustomerCls',
        curRow: _curRow,
        editType: "edit"
    })
}
    */

    let realTableName = this.getRealTableName()
    let erpTable = await this.getHttp().find('sys_ErpTable', {
      tableName: realTableName,
    }) //
    // console.log(erpTable) //
    let row = erpTable[0]
    let _obj: any = {}
    Object.entries(row).forEach(([key, value]) => {
      try {
        let _v = JSON.parse(value as any)
        if (typeof _v == 'object' || Array.isArray(_v)) {
          //
          value = _v //
        }
      } catch (error) {}
      _obj[key] = value //
    })
    let _columns = this.getTableConfig().columns
    _columns = JSON.parse(JSON.stringify(_columns))
    // console.log(_obj) ////
    let columns = _obj.columns || []


    // let _columns = this.getTableConfig().columns
    // _columns = JSON.parse(JSON.stringify(_columns))

     function handleEventMessageClick() {
      alert('点击了Event消息')
    }

    function handleSetValue() {
      naiveChatRef.value?.setValue('you wife is charming')
    }

    function handleAvatarRounded() {
      rounded.value = rounded.value === 4 ? 40 : 4
    }

       // let createContactId = 10011
    // function handleAddContact() {
    //   createContactId += 1
    //   naiveChatRef.value?.appendContact({
    //     id: createContactId,
    //     nickname: `好友${createContactId}`,
    //     avatar: '',
    //     index: 'H',
    //   })
    // }
 const userInfo = {
      nickname: 'King',
      avatar:
        'https://thirdwx.qlogo.cn/mmopen/vi_32/RMksZlPP4myx9pbGzt3PmV2FNIpia8hVHpUXbHM0RfbJtsSMEWCLicbvGuJRMpoAam3sZclNo0YtOnvJ0a8eMtyQ/132',
      id: 1000,
    }


      <div style={{ display: 'flex', gap: '12px', padding: '20px 0' }}>
            {/* <button onClick={handleAddContact}>添加一个联系人</button> */}
            {/* <button onClick={handleSendEventMessage}>发送一条Event消息</button> */}
            {/* <button onClick={handleSetValue}>给输入框插入内容</button> */}
            {/* <button onClick={handleAvatarRounded}>切换头像形状</button> */}
            {/* <button onClick={handleAppendMessage}>梁老师发来一条消息</button>
            <button onClick={handleRemoveMessage}>删除一条消息</button>
            <button onClick={handleSendMessage}>发送一条消息</button> */}
            {/* <button onClick={handleUpdateMessage}>修改一条消息</button> */}
            {/* <button onClick={handleUpdateContact}>修改联系人</button> */}
          </div>

          {/* <div style={{ display: 'flex', gap: '12px' }}>
            <button onClick={handleAddContact}>添加一个联系人</button>
            <button onClick={handleSendEventMessage}>发送一条Event消息</button>
            <button onClick={handleSetValue}>给输入框插入内容</button>
            <button onClick={handleAvatarRounded}>切换头像形状</button>
          </div> */}

          <div
            style={{ marginTop: '50px', textAlign: 'center', color: '#4B5563' }}
          >
            {/* 你可以在此处添加更多内容 */}
          </div>

          // router.addRoute('pageIndex', {
//   path: 'companyHome',
//   name: 'companyHome', //
//   component: () => import('@/pages/platform/home/erpHome.vue'), //
//   meta: {
//     icon: 'CreditCardOutlined',
//   },
// })
// nextTick(() => {
//   router.push({
//     name: 'companyHome',
//   })
// })

 // let t = createText({
    //   text: value, //
    //   fontSize: 14,
    //   fill: 'black',
    //   fontWeight: 'bold',
    // })
    // container.add(t) //
    /*

      */

    // let _index = record['_index'] //
    // let scrollConfig = _table.getInstance().getBodyVisibleRowRange() ////
    // let rowStart = scrollConfig?.rowStart
    // let rowEnd = scrollConfig?.rowEnd
    // if (rowStart == null || rowEnd == null) {
    //   rowStart = 0
    //   rowEnd = 0
    // }
    // let _row = row
    // let currentIndexContain = _table.currentIndexContain
    // container['currentRowIndex'] = row //
    // container['updateCanvas'] = () => {

       // {
    //   label: '登录方式',
    //   field: 'loginType',
    //   type: 'select',
    //   required: true,
    //   options: {
    //     options: [
    //       { label: '邮箱登录', value: 'email' },
    //       { label: '用户名登录', value: 'username' },
    //     ],
    //   },
    // },
    // { field: 'email', type: 'string', label: '邮箱', required: true },


     // {
        //   field: 'companyName',
        //   label: '公司名称',
        //   required: true,
        // },
        // {
        //   field: 'companyCnName',
        //   label: '公司中文名',
        //   required: true,
        // },


        /* 
feathers: {
    provider: 'socketio',
    headers: {
      host: 'localhost:3031',
      connection: 'Upgrade',
      pragma: 'no-cache',
      'cache-control': 'no-cache',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36 Edg/137.0.0.0',    
      upgrade: 'websocket',
      origin: 'http://localhost:3003',
      'sec-websocket-version': '13',
      'accept-encoding': 'gzip, deflate, br, zstd',
      'accept-language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,fr;q=0.5',
      cookie: 'session=U2FsdGVkX1/8m7tAhv2rq4Pbjsd8DSbsri1CXZ3/DrkZ6xv/YGE1bbXA5gosoyewwOyoHKvqmvgKOrhcWetEn8hw7P8nOxCE1QuIIdo6bY07MOCnERli9o5lpoOGozUB/x4XbJmg3UApx5guO+cX/g==; Hm_lvt_52eb07460b7dc3e27bb80c78c0988671=1743073927',
      'sec-websocket-key': 'Afbxp7rAlhCjcDFzQXLMDA==',
      'sec-websocket-extensions': 'permessage-deflate; client_max_window_bits',
      authorization: 'eyJhbGciOiJIUzI1NiIsInR5cCI6ImFjY2VzcyJ9.eyJpYXQiOjE3NTAwNDc3MjQsImV4cCI6MTc1MDEzNDEyNCwiYXVkIjoiaHR0cHM6Ly95b3VyZG9tYWluLmNvbSIsInN1YiI6IjEiLCJqdGkiOiJiM2Q3ODZhOC0wNTQ4LTRkZGMtYTIyYS00NTc4Y2RjZGUxN2YifQ.f0nLDh680HhW0MyK-Nrz_aEgmTG1QovFqx_1GvUgh0Q'
    },
    authentication: {
      strategy: 'jwt',
      accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6ImFjY2VzcyJ9.eyJpYXQiOjE3NTAwNDc3MjQsImV4cCI6MTc1MDEzNDEyNCwiYXVkIjoiaHR0cHM6Ly95b3VyZG9tYWluLmNvbSIsInN1YiI6IjEiLCJqdGkiOiJiM2Q3ODZhOC0wNTQ4LTRkZGMtYTIyYS00NTc4Y2RjZGUxN2YifQ.f0nLDh680HhW0MyK-Nrz_aEgmTG1QovFqx_1GvUgh0Q'
    },
    user: {
      id: 1,
      createdAt: '2025-05-24 09:13:24',
      updatedAt: '2025-05-24 09:13:24',
      username: 'dxf',
      email: '1151685410@qq.com',
      password: '$2b$10$mtmxQd1lFzh6ORBsVOsfvOzH2XN107xINOtc3AmggeDO9.CfXztXm',
      appName: null,
      companyName: 'newC',
      companyCnName: '新公司',
      companyType: null,
      companyId: null,
      phone: null,
      avatar: '/images/7332066ce14ee350ac57f9d74393a604d7c7ba4fdd3e15f3a47daa59bbc647f9.jpg',
      companyLogo: '/images/7332066ce14ee350ac57f9d74393a604d7c7ba4fdd3e15f3a47daa59bbc647f9.jpg'
    }
  },


*/

// try {
      //   let res = await this?.client?.authenticate({
      //     strategy: 'jwt',
      //     accessToken: token, //
      //     _unUseCaptcha: true,
      //   }) //
      //   system.confirmMessage('登录成功') //
      //   system.loginInfo = res //
      //   return res
      // } catch (error) {
      //   console.error(error, '登录失败')
      //   localStorage.removeItem('feathers-jwt') //
      // }

      // export const client: any = {
//   get: () => {
//     return {
//       emit: () => {},
//     }
//   },
//   authenticate: () => {},
// } //

 // let f = layoutConfig.fields
    // debugger//
    // f = f.filter((e) => e.type != null) //
    // layoutConfig.layout.pc=[layoutConfig.layout.pc[0]]
    // layoutConfig.layout.mobile=[layoutConfig.layout.mobile[0]]//
    // layoutConfig.fields = f //





















    
  @for $i from 1 through 2000 {
    .w-#{$i} {
      width: #{$i}px;
    }
  }
  .h-full {
    height: 100%;
  }
  @for $i from 1 through 2000 {
    .h-#{$i} {
      height: #{$i}px !important;
    }
  }
  @for $i from 1 through 2000 {
    .pl-#{$i} {
      padding-left: #{$i}px !important;
    }
  } 
  @for $i from 1 through 2000 {
    .pr-#{$i} {
      padding-right: #{$i}px !important;
    }
  }
  @for $i from 1 through 2000 {
    .pt-#{$i} {
      padding-top: #{$i}px !important;
    }
  }
  @for $i from 1 through 2000 {
    .pb-#{$i} {
      padding-bottom: #{$i}px !important;
    }
  }

  @for $i from 1 through 2000 {
    .ml-#{$i} {
      margin-left: #{$i}px !important;
    }
  }
  @for $i from 1 through 2000 {
    .mr-#{$i} {
      margin-right: #{$i}px !important;
    }
  }
  @for $i from 1 through 2000 {
    .mt-#{$i} {
      margin-top: #{$i}px !important;
    }
  }
  @for $i from 1 through 2000 {
    .mb-#{$i} {
      margin-bottom: #{$i}px !important;
    }
  }
   @for $i from 1 through 2000 {
    .p-#{$i} {
      padding: #{$i}px !important;
    }
  }
 @for $i from 1 through 2000 {
    .space-y-#{$i} {
      padding: #{$i}px !important;
    }
  }
   //
              // let com = (
              //   <div class="pl-10 pr-10 -mb-px text-blue-500 cursor-pointer focus:outline-none">
              //     <div>{item.getLabel()}</div>
              //   </div>
              // )

              <template>
  <mainVue></mainVue>
</template>
<script setup lang="ts">
import { system } from '@/system'
import { onMounted } from 'vue'
import mainVue from '../index.vue'
onMounted(async () => {
  let http = system.getHttp()
  http.registerEvent('permissions created', (data) => {})
})
</script>



 <header class="flex items-center justify-between px-6 py-4 bg-white shadow">
            <div
              onClick={() => {
                system.getRouter().back() ////
              }}
              class="flex items-center text-blue-600 cursor-pointer hover:text-blue-800"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="w-20 h-20 mr-1"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 19l-7-7 7-7"
                />
              </svg>
              <span>返回</span>
            </div>
            <div class="flex items-center space-x-3">
              <span class="text-gray-700">欢迎</span>
              <span class="font-medium">13798134216</span>
              <img alt="头像" class="w-32 h-32 rounded-full" />
            </div>
          </header>

          // import tailwindcss from '@tailwindcss/postcss'
// import autoprefixer from 'autoprefixer'
// module.exports = {
//   plugins: [tailwindcss(), autoprefixer()], //
// }
// postcss.config.cjs
// const tailwindcss = require('@tailwindcss/postcss')
// const autoprefixer = require('autoprefixer')

// module.exports = {
//   plugins: [tailwindcss(), autoprefixer()],
// }

// let formSize = _this.getFontSize()
    // let svg = createSvgTextString(`${_value}`, width, height, 12) //
    // console.log(svg, 'svg') //
    // let locationName = createImage({
    //   x: 0,
    //   y: 0,
    //   //     image: `<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
    //   //   <text x="0" y="${
    //   //     height / 2 - formSize / 2
    //   //   }" font-family="Arial" font-size="${formSize}px" fill="black">
    //   //     ${`${_value}`}
    //   //   </text>
    //   // </svg>`,
    //   image:svg,//
    // })

     <!-- 第三方登录按钮 -->
        <!-- <div class="flex justify-center space-x-6">
          <button type="button">
            <img
              alt="WeChat"
              class="w-10 h-10"
            />
          </button>
          <button type="button">
            <img
              alt="QQ"
              class="w-10 h-10"
            />
          </button>
        </div> -->




































        <template>
  <div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div
      class="flex w-full max-w-4xl overflow-hidden bg-white rounded-lg shadow-lg"
    >
      <!-- 左侧宣传/Logo 区 -->
      <div
        class="flex-col hidden w-1/2 text-white lg:flex bg-gradient-to-br from-blue-500 to-blue-600"
      >
        <div class="w-full h-full">
          <img alt="Bangboss" class="h-full mb-6" />
        </div>
      </div>
      <div class="flex flex-col w-full h-full p-8 lg:w-1/2">
        <h2 class="mb-8 text-3xl font-bold text-gray-900">登录</h2>
        <div>
          <er-form ref="fins" v-bind="loginFConfig" />
        </div>
        <div class="flex justify-center w-full my-4" v-html="code"></div>
        <div class="flex items-center justify-between mb-6">
          <label class="flex items-center text-gray-700">
            <input
              type="checkbox"
              class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
            />
            <span class="ml-2">记住我</span>
          </label>
          <div
            class="text-blue-600 cursor-pointer"
            @click="system.routeTo('register')"
          >
            忘记密码?
          </div>
        </div>
        <button
          @click="loginFn"
          class="w-full py-2 mb-8 font-medium text-white transition-colors bg-blue-600 rounded hover:bg-blue-700"
        >
          登录
        </button>
        <div class="flex items-center mb-8 text-gray-500">
          <span class="flex-1 border-t"></span>
          <span class="px-4 text-sm">
            <span
              class="text-blue-600 cursor-pointer"
              @click="system.routeTo('register')"
            >
              立即注册
            </span>
          </span>
          <span class="flex-1 border-t"></span>
        </div>
       
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { reactive, ref, onMounted } from 'vue'
import { system } from '@/system'

interface Company {
  appName: string
  appCnName?: string
  companyName: string
  companyCnName?: string
  userid: number
}

const data = reactive({
  appName: 'platform',
  userid: 0,
  loginType: 'email',
  email: '1151685410@qq.com',
  password: '1',
  _unUseCaptcha: true,
})

const loginFConfig: any = reactive({
  labelWidth: 70,
  data,
  items: [
    {
      label: '登录方式',
      field: 'loginType',
      type: 'select',
      required: true,
      options: {
        options: [
          { label: '邮箱登录', value: 'email' },
          { label: '用户名登录', value: 'username' },
        ],
      },
    },
    { field: 'email', type: 'string', label: '邮箱', required: true },
    {
      field: 'password',
      type: 'string',
      label: '密码',
      required: true,
      options: { password: true },
    },
    {
      field: 'userid',
      type: 'select',
      label: '公司',
      required: true,
      options: { options: [] },
    },
    {
      field: 'appName',
      type: 'select',
      label: '应用',
      required: true,
      options: { options: [] },
    },
    { field: '_captcha', label: '验证码', type: 'string' },
  ],
  itemSpan: 24,
})

async function getCompanyFn() {
  const all: Company[] = await system.getAllRegisterCompany()
  loginFConfig.items[3].options.options = all.map((item) => ({
    label: item.companyCnName || item.companyName,
    value: item.userid,
  }))
  loginFConfig.items[4].options.options = all.map((item) => ({
    label: item.appCnName || item.appName,
    value: item.appName,
  }))
}

onMounted(getCompanyFn)

const code = ref<string>('')
const cdata = ref<string>('')

async function loadCaptcha() {
  const res = await system.createCaptcha('authentication_create')
  code.value = res.data
  cdata.value = res.text
}

onMounted(loadCaptcha)

const fins = ref<any>(null)

async function loginFn() {
  const form = fins.value as any
  await form.validate()
  await system.loginUser(data)
}
</script>


{/* <button
              onClick={() => {
                console.log(_reg2.value, 'testReg2') //
              }}
            >
              测试1
            </button> */}






















            <template>
  <div class="flex flex-col h-screen">
    <!-- Header -->
    <header
      class="flex items-center justify-between px-5 text-white bg-blue-600 shadow-md h-60"
    >
      <!-- Logo -->
      <div class="text-2xl font-bold">低代码应用中心</div>
      <!-- Navigation Menu -->
      <el-menu
        mode="horizontal"
        :default-active="activeHeader"
        background-color="transparent"
        text-color="#ffffff"
        active-text-color="#ffe58f"
        class="flex-1 mx-10"
      >
        <el-menu-item index="1" class="px-4">Home</el-menu-item>
        <el-menu-item index="2" class="px-4">About</el-menu-item>
        <el-menu-item index="3" class="px-4">Contact</el-menu-item>
      </el-menu>
      <!-- User Module -->
      <div class="flex items-center ml-5">
        <template v-if="isLoggedIn">
          <div class="flex items-center space-x-2">
            <el-dropdown
              type="primary"
              @click="handleCommand"
              placement="bottom-end"
              class="h-40 px-4 rounded-lg"
            >
              <span class="flex items-center space-x-2">
                <span class="font-medium text-white">
                  {{ systemIns.getUserName() }}
                </span>
              </span>
              <template #dropdown>
                <el-dropdown-menu>
                  <el-dropdown-item command="profile" @click="(e) => {}">
                    个人中心
                  </el-dropdown-item>
                  <el-dropdown-item command="support">
                    联系客服
                  </el-dropdown-item>
                  <el-dropdown-item divided command="author">
                    联系作者
                  </el-dropdown-item>
                  <el-dropdown-item command="promo">获取优惠</el-dropdown-item>
                  <el-dropdown-item
                    @click="
                      (e) => {
                        systemIns.logout() //
                      }
                    "
                    command="logout"
                  >
                    退出登录
                  </el-dropdown-item>
                </el-dropdown-menu>
              </template>
            </el-dropdown>
          </div>
        </template>
        <template v-else>
          <el-button type="primary" size="small" @click="login">
            Login
          </el-button>
        </template>
      </div>
    </header>

    <!-- Main Layout -->
    <div class="flex flex-1">
      <!-- Sidebar Menu -->
      <aside class="bg-gray-100 w-200">
        <el-menu :default-active="activeSidebar" class="w-full">
          <el-menu-item index="1" class="flex items-center h-40 px-4">
            <i class="mr-2 el-icon-menu"></i>
            应用列表
          </el-menu-item>
        </el-menu>
      </aside>

      <!-- Content Area -->
      <main class="flex-1 p-5 overflow-auto bg-gray-50">
        <div
          class="grid grid-cols-[repeat(auto-fill,minmax(200px,1fr))] gap-20"
        >
          <el-card
            v-for="app in apps"
            :key="app.id"
            class="transition-transform transform hover:-translate-y-2"
          >
            <div class="flex items-center mb-2">
              <i :class="app.icon + ' text-24 mr-2'" />
              <span class="text-lg font-semibold">{{ app.cnName }}</span>
            </div>
            <div class="mb-4 text-sm">{{ app.description }}</div>
            <div class="text-right">
              <el-button
                type="primary"
                @click="() => systemIns.installApp(app.name)"
                size="small"
              >
                安装
              </el-button>
              <el-button
                type="primary"
                @click="() => systemIns.openApp(app.name)"
                size="small"
              >
                进入
              </el-button>
            </div>
          </el-card>
        </div>
      </main>
    </div>

    <!-- Footer -->
    <footer
      class="flex items-center justify-center h-40 text-gray-500 bg-gray-100"
    >
      © 2025 MyApp Platform
    </footer>
  </div>
</template>

<script setup lang="ts">
import { System } from '@/system'
import { onMounted } from 'vue'
import { computed, inject } from 'vue'
import { ref } from 'vue' //
let systemIns: System = inject('systemIns') //
interface AppItem {
  id: number
  name: string
  description: string
  icon: string
  cnName: string //
} //
onMounted(async () => {
  let allApp = await systemIns.getAllApps()
  console.log(allApp) //
})
// 应用列表数据
const apps = ref<AppItem[]>([
  {
    id: 1,
    name: 'erp',
    cnName: '低代码ERP应用配置',
    description: '配置化构建应用', //
    icon: 'el-icon-data-analysis',
  },
])

// 菜单激活状态
const activeHeader = ref('1')
const activeSidebar = ref('1')

// 用户登录状态及信息
const isLoggedIn = computed(() => {
  let loginInfo = systemIns.loginInfo
  if (loginInfo) {
    return true
  }
  return false
})

let user = computed(() => {
  let loginInfo = systemIns.loginInfo
  if (loginInfo) {
    return loginInfo
  }
  return {} //
})

// 登录与登出方法 (替换为实际逻辑)
function login() {
  systemIns.routeTo('/login') //
}

function logout() {
  systemIns.logout() //
}

function handleCommand(command: string) {
  // if (command === 'profile') {
  //   // 跳转到个人中心
  //   console.log('Go to profile')
  // } else if (command === 'logout') {
  //   logout() //
  // }
}
</script>


// {
      //   label: '同步应用数据',
      //   fn: async () => {
      //     //
      //     let appName = await system.getCurrentApp() //
      //     if (appName == 'platform') {
      //       return
      //     }
      //     let http = system.getHttp()
      //     await http.post('entity', 'syncTableData', [
      //       'navs',
      //       'entity',
      //       'columns', //
      //     ])
      //     this.confirmMessage('同步成功')
      //   },
      // },

       {/* <div class="py-1">
                          <div
                            href="#"
                            class="block px-4 py-2 text-sm text-gray-800 hover:bg-gray-100"
                          >
                            个人中心
                          </div>
                        </div> */}


                         let pageDesign = this.getCurrentPageDesign()
              // await pageDesign.setCurrentDesign() //
              let config = pageDesign.config
              let _config = _.cloneDeep(config)
              let _p: any = pageDesign
              let _construct = _p.__proto__.constructor
              // console.log(_construct) //
              let newD = new _construct(_config)
              newD.setLayoutData(_config) //
              newD.setCurrentDesign(true) //
              let dialogConfig = {
                title: '页面整体设计',
                width: 1,
                height: 1,
                createFn: () => {
                  return {
                    component: pageCom,
                    props: {
                      formIns: newD,
                    },
                  }
                },
                confirmFn: () => {},
              }
              await this.openDialog(dialogConfig) //

               // let http = this.getHttp() //
      // let _res = await http.create('users', data) //
      // let row = _res[0] //
      // return row //

      // console.log(allCompany, 'testCompany')//
      // const all: any[] = await system.getAllRegisterCompany()
      // loginFConfig.items[3].options.options = all.map((item) => ({
      //   label: item.companyCnName || item.companyName,
      //   value: item.userid,
      // }))
      // loginFConfig.items[4].options.options = all.map((item) => ({
      //   label: item.appCnName || item.appName,
      //   value: item.appName,
      // }))

       // {
        //   label: '登录方式',
        //   field: 'loginType',
        //   type: 'select',
        //   required: true,
        //   options: {
        //     options: [
        //       { label: '邮箱登录', value: 'email' },
        //       { label: '用户名登录', value: 'username' },
        //     ],
        //   },
        // },


         {/* <button type="button"></button>
                  <div class="h-40">
                    <button
                      type="button"
                      class="h-full px-4 py-2 ml-10 text-blue-500 transition border border-blue-500 rounded hover:bg-blue-50"
                    >
                      修改密码
                    </button>
                    <button
                      onClick={() => {
                        system.updateUserInfo() //
                      }}
                      class="h-full px-6 py-2 ml-10 text-white transition bg-blue-600 rounded hover:bg-blue-700"
                    >
                      保存
                    </button>
                  </div> */}


                  /* 
let _data = await this.getHttp().find('navs')
    let tableConfig = {
      showHeaderButtons: false, //
      enableDragRow: true,
      treeConfig: {
        id: 'id',
        parentId: 'pid',
        rootId: 0,
      },
      contextItems: [
        {
          label: '添加菜单',
          fn: async (config) => {
            let p = config.parent
            console.log('parent', p) //
          },
        },
        {
          label: '添加子菜单', //
          fn: async () => {},
        },
      ],
      buttons: [],
      columns: [
        {
          field: 'id',
          title: 'id',
          tree: true,
          frozen: 'left',
        },
        {
          field: 'navname', //
          title: '导航名称',
          editType: 'string', //
          width: 200, //
        },
        {
          field: 'tableName',
          editType: 'string', //
          title: '表格或者视图名称',
        },
        {
          field: 'status',
          title: '是否启用', //
          editType: 'boolean', //
        },
      ],
      data: _data,
      height: 600,
      width: 800, //
      dragRowFn: (config) => {
        return true //
      },
      confirmFn: async (dialog) => {
        let data = dialog.getRef('innerCom').getFlatTreeData()
        // console.log(data, 'testData')//
        let _data1 = data.filter((item) => {
          return item['_rowState'] == 'change'
        })
        // console.log(_data1)//
        let http = this.getHttp()
        await http.patch('navs', _data1) //
        this.confirmMessage('更新菜单成功') ////
        this.clearCacheValue('getMenuData') //
        await this.getMenuData() //
      },
      dragRowAfterFn: (config) => {
        let data = config.data
        data.forEach((item, i) => {
          item['_rowState'] = 'change'
          item['sort'] = Number(i) + 1 ////
        })
      },
      showRowSeriesNumber: true,
    }
    await this.confirmTable(tableConfig) //
    return tableConfig


*/
 //
    // let config = this.config
    // let onColumnResize = config.onColumnResize
    // if (typeof onColumnResize == 'function') {
    //   onColumnResize(_config) //
    // }
    // console.log(_config, 'onColumnResize') //

     // if(currentResizeField==f){
          //   console.log('缓存', _con) ////
          // }
          // console.log('缓存', _con) //
           // let com = (
                //   <buttonGroupCom
                //     buttonWidth={40}
                //     items={[
                //       {
                //         label: '<<',
                //         fn: () => {
                //           tableIns.jumpToSearchNext(true) //
                //         }, //
                //       },
                //       {
                //         label: '>>',
                //         fn: () => {
                //           tableIns.jumpToSearchNext() //
                //         },
                //       },
                //       {
                //         label: 'X',
                //         fn: () => {
                //           tableIns.showGlobalSearch(false) //
                //         },
                //       },
                //     ]}
                //   ></buttonGroupCom>
                // )

                 // console.log(
          //   isProxy(record),
          //   'isProxy(record)',
          //   isProxy(config.column),
          // )


          //  @for $i from 1 through 2000 {
//     .space-y-#{$i} {
//       padding: #{$i}px !important;
//     }
//   }

/* 
<template>
  <div class="w-full h-full">
    <lowcode>
      <template #default="path">
        <keep-alive>
          <design :key="path" ></design>
        </keep-alive>
      </template>
    </lowcode>
  </div>
</template>
<script setup lang="ts">
import design from './design'
import lowcode from './lowcode'
</script>
<style lang="scss"></style>


*/




// @for $i from 1 through 2000 {
//   .w-#{$i} {
//     width: #{$i}px;
//   }
// }
// @for $i from 1 through 2000 {
//   .h-#{$i} {
//     height: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .pl-#{$i} {
//     padding-left: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .pr-#{$i} {
//     padding-right: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .pt-#{$i} {
//     padding-top: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .pb-#{$i} {
//     padding-bottom: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .px-#{$i} {
//     padding-top: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .py-#{$i} {
//     padding-bottom: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .ml-#{$i} {
//     margin-left: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .mr-#{$i} {
//     margin-right: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .mt-#{$i} {
//     margin-top: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .mb-#{$i} {
//     margin-bottom: #{$i}px !important;
//   }
// }
// @for $i from 1 through 2000 {
//   .p-#{$i} {
//     padding: #{$i}px !important;
//   }
// }
// 定义一个属性映射：class prefix → CSS 属性（可带 !important）

 // return (
                  //   <ElDropdownMenu
                  //     onClick={(e) => {
                  //       console.log(e)
                  //       let command = e.command

                  //     }}
                  //   >
                  //     <ElDropdownItem command="profile">
                  //       个人中心
                  //     </ElDropdownItem>
                  //     <ElDropdownItem command="support">
                  //       联系客服
                  //     </ElDropdownItem>
                  //     <ElDropdownItem divided command="author">
                  //       联系作者
                  //     </ElDropdownItem>
                  //     <ElDropdownItem command="promo">获取优惠</ElDropdownItem>
                  //     <ElDropdownItem command="logout">退出登录</ElDropdownItem>
                  //   </ElDropdownMenu>
                  // )


                   /*   let com=<div class="flex flex-col h-screen">
    <header
      class="flex items-center justify-between px-5 text-white bg-blue-600 shadow-md h-60"
    >
      <div class="text-2xl font-bold">低代码应用中心</div>
      <el-menu
        mode={"horizontal"}
        // :default-active="activeHeader"
        default-active="1"
        background-color="transparent"
        text-color="#ffffff"
        active-text-color="#ffe58f"
        class="flex-1 mx-10"
      >
        <el-menu-item index="1" class="px-4">Home</el-menu-item>
        <el-menu-item index="2" class="px-4">About</el-menu-item>
        <el-menu-item index="3" class="px-4">Contact</el-menu-item>
      </el-menu>
      <div class="flex items-center ml-5">
        <template v-if="isLoggedIn">
          <div class="flex items-center space-x-2">
            <el-dropdown
              type="primary"
              @click="handleCommand"
              placement="bottom-end"
              class="h-40 px-4 rounded-lg"
            >
              <span class="flex items-center space-x-2">
                <span class="font-medium text-white">
                  {{ systemIns.getUserName() }}
                </span>
              </span>
              <template #dropdown>
                <el-dropdown-menu>
                  <el-dropdown-item command="profile" @click="(e) => {}">
                    个人中心
                  </el-dropdown-item>
                  <el-dropdown-item command="support">
                    联系客服
                  </el-dropdown-item>
                  <el-dropdown-item divided command="author">
                    联系作者
                  </el-dropdown-item>
                  <el-dropdown-item command="promo">获取优惠</el-dropdown-item>
                  <el-dropdown-item
                    @click="
                      (e) => {
                        systemIns.logout() //
                      }
                    "
                    command="logout"
                  >
                    退出登录
                  </el-dropdown-item>
                </el-dropdown-menu>
              </template>
            </el-dropdown>
          </div>
        </template>
        <template v-else>
          <el-button type="primary" size="small" @click="login">
            Login
          </el-button>
        </template>
      </div>
    </header>

    <div class="flex flex-1">
      <!-- Sidebar Menu -->
      <aside class="bg-gray-100 w-200">
        <el-menu :default-active="activeSidebar" class="w-full">
          <el-menu-item index="1" class="flex items-center h-40 px-4">
            <i class="mr-2 el-icon-menu"></i>
            应用列表
          </el-menu-item>
        </el-menu>
      </aside>

      <main class="flex-1 p-5 overflow-auto bg-gray-50">
        <div
          class="grid grid-cols-[repeat(auto-fill,minmax(200px,1fr))] gap-20"
        >
          <el-card
            v-for="app in apps"
            :key="app.id"
            class="transition-transform transform hover:-translate-y-2"
          >
            <div class="flex items-center mb-2">
              <i :class="app.icon + ' text-24 mr-2'" />
              <span class="text-lg font-semibold">{{ app.cnName }}</span>
            </div>
            <div class="mb-4 text-sm">{{ app.description }}</div>
            <div class="text-right">
              <el-button
                type="primary"
                @click="() => systemIns.installApp(app.name)"
                size="small"
              >
                安装
              </el-button>
              <el-button
                type="primary"
                @click="() => systemIns.openApp(app.name)"
                size="small"
              >
                进入
              </el-button>
            </div>
          </el-card>
        </div>
      </main>
    </div>

    <footer
      class="flex items-center justify-center h-40 text-gray-500 bg-gray-100"
    >
      © 2025 MyApp Platform
    </footer>
  </div> */

   /* 
      
          <ElMenuItem index="1" class="px-4">
            Home
          </ElMenuItem>
          <ElMenuItem index="2" class="px-4">
            About
          </ElMenuItem>
          <ElMenuItem index="3" class="px-4">
            Contact
          </ElMenuItem>
      */


       "gulp": "^4.0.2",
    "gulp-clean": "^0.4.0",
    "gulp-rename": "^2.0.0",
    "gulp-replace": "^1.1.4",

     if (1 == 1) {
      return //
    }
    // if (status == false) {
    //   return //
    // }

     //
              // let com = (
              //   <div class="pl-10 pr-10 -mb-px text-blue-500 cursor-pointer focus:outline-none">
              //     <div>{item.getLabel()}</div>
              //   </div>
              // )

              //
                          // <div class="flex items-center h-30">
                          //   <div>{label}</div>
                          // </div>

                          // if (pre) {
    //   systemIns.routeOpen(pre.name) //
    // } else if (config.next) {
    //   systemIns.routeOpen(config.next.name) //
    // }

     //@ts-ignore
                // let com= (
                //   //@ts-ignore
                //   <Selection
                //     class={[ns.e('area'), 'h-full']}
                //     tag="el-tab-pane"
                //     label={element.label}
                //     name={element.id}
                //     data={element}
                //     v-slots={{
                //       label: (item) => {
                //         let label = element.label || '选项'
                //         return (
                //           //
                //           <div class="flex items-center h-30">
                //             <div>{label}</div>
                //           </div>
                //         )
                //       }, //
                //     }}
                //     _slots={['label']}
                //     parent={props.data}
                //   >
                //     <LayoutDragGable
                //       class={['h-full', ..._class]}
                //       data-layout-type={'tabs-col'}
                //       data={element.list}
                //       {...opt}
                //       parent={element}
                //     />
                //   </Selection>
                // )
                // return com

                 // let _tables = this.config.tables || []
    // _tables.splice(0, _tables.length, ...tables) //
     // refreshEdges(_config?: any) {
  //   let tables = this.config?.tables || []
  //   let edges: Edge[] = []
  //   for (const sourceTable of tables) {
  //     const sourceTableId = sourceTable.id || sourceTable.name //
  //     const fields = sourceTable.fields || []

  //     for (const field of fields) {
  //       if (field.isForeign && field.ref) {
  //         let sourceFieldName = field.name || field.fieldName
  //         let targetTableId = field.ref.table
  //         let targetFieldName = field.ref.field //
  //         if (!targetTableId || !targetFieldName) continue

  //         edges.push({
  //           id: `e-${sourceTableId}-${sourceFieldName}-to-${targetTableId}-${targetFieldName}`,
  //           source: sourceTableId,
  //           sourceHandle: `field-${sourceFieldName}`,
  //           target: targetTableId,
  //           targetHandle: `field-${targetFieldName}`,
  //           type: 'default',
  //           animated: false,
  //           label: `${sourceFieldName} → ${targetFieldName}`,
  //         })
  //       }
  //     } //
  //   } //
  //   nextTick(() => {
  //     this.templateProps.edges = edges
  //   })
  // }
  // // 文件名：ERNode.tsx

// import { defineComponent } from 'vue'
// import { Handle, Position } from '@vue-flow/core'

// export default defineComponent({
//   name: 'ERNode',
//   props: {
//     data: {
//       type: Object, //
//       required: true,
//     },
//   },
//   setup(props) {
//     return () => {
//       let com = (
//         <div class="bg-white border border-gray-300 rounded-md shadow-md w-60">
//           {/* 表头 */}
//           <div class="py-1 font-bold text-center text-blue-800 bg-blue-100 rounded-t">
//             {props.data.label}
//           </div>

//           {/* 字段列表 */}
//           <ul class="px-2 py-1 space-y-1 text-sm">
//             {props.data.columns.map((field) => (
//               <li
//                 key={field.field}
//                 class="relative flex items-center px-2 py-1 bg-white rounded hover:bg-gray-100"
//               >
//                 {/* 左侧 Handle */}
//                 <Handle
//                   type="target"
//                   id={`field-${field.field}`}
//                   position={Position.Left}
//                   class="absolute left-0 w-4 h-4 -translate-y-1/2 bg-green-500 border border-white rounded-full top-1/2"
//                 />

//                 {/* 图标 */}
//                 {field.isPrimary ? (
//                   <span class="mr-1 text-red-500">🔑</span>
//                 ) : field.isForeign ? (
//                   <span class="mr-1 text-green-500">🔗</span>
//                 ) : null}

//                 {/* 字段名 + 类型 */}
//                 <span class="flex-1">{field.field}</span>
//                 <span class="text-xs text-gray-400">{field.type}</span>

//                 {/* 右侧 Handle */}
//                 <Handle
//                   type="source"
//                   id={`field-${field.field}`}
//                   position={Position.Right}
//                   class="absolute right-0 w-4 h-4 -translate-y-1/2 bg-blue-500 border border-white rounded-full top-1/2"
//                 />
//               </li>
//             ))}
//           </ul>
//         </div>
//       )
//       return com //
//     }
//   },
// })

// if (system.hasInitRoutes === false) {
      //   return
      // } //
      // let dArr = diaArr.value.map((d) => {
      //   return <dialogCom dialogIns={d}></dialogCom>
      // })

      // 保存视图信息（可用于 setTransform）

    // console.log(viewportTransform)
    // 设置数据（可用于后续 VueFlow 渲染）
    // this.templateProps.nodes = layoutedNodes
    // this.templateProps.edges = edges
    // console.log('layoutedNodes', edges) //

    // let rawNodes = this.getNodes(true)
    // let edges = this.getEdges(true)
    // let oldNodes = this.getNodes()
    // let oldEdges = this.getEdges()
    // // 创建 dagre 图
    // let g = new dagre.graphlib.Graph()
    // g.setDefaultEdgeLabel(() => ({}))
    // g.setGraph({
    //   rankdir: 'LR',
    //   nodesep: 100,
    //   ranksep: 100,
    // })

    // // 设置节点尺寸（用于布局）
    // rawNodes.forEach((node) => {
    //   g.setNode(node.id, {
    //     width: 240,
    //     height: 60 + (node.data.fields?.length || 0) * 28,
    //   })
    // })

    // // 设置边
    // edges.forEach((edge) => {
    //   g.setEdge(edge.source, edge.target)
    // })

    // // 计算布局
    // dagre.layout(g)

    // // 更新节点位置
    // let layoutedNodes = rawNodes.map((node) => {
    //   let pos = g.node(node.id)
    //   return {
    //     ...node,
    //     position: {
    //       x: pos.x - 120, // 左上角对齐
    //       y: pos.y - 30,
    //     },
    //   }
    // })
    // // ===== 计算自定义视图偏移与缩放 =====
    // let allX = layoutedNodes.map((n) => n.position.x)
    // let allY = layoutedNodes.map((n) => n.position.y)

    // let allRight = layoutedNodes.map((n) => n.position.x + 240)
    // let allBottom = layoutedNodes.map(
    //   (n) => n.position.y + (60 + (n.data.fields?.length || 0) * 28),
    // )

    // let minX = Math.min(...allX)
    // let maxX = Math.max(...allRight)
    // let minY = Math.min(...allY)
    // let maxY = Math.max(...allBottom)

    // let contentWidth = maxX - minX
    // let contentHeight = maxY - minY

    // let container: HTMLDivElement = this.getRef('container')
    // let containerRect = container.getBoundingClientRect()
    // let viewportWidth = containerRect.width
    // let viewportHeight = containerRect.height

    // let zoomX = viewportWidth / (contentWidth + 100)
    // let zoomY = viewportHeight / (contentHeight + 100)
    // let zoom = Math.min(zoomX, zoomY, 1) // 最大缩放为1，防止放大

    // // 计算偏移
    // let offsetX = (viewportWidth - contentWidth * zoom) / 2 - minX * zoom
    // let offsetY = (viewportHeight - contentHeight * zoom) / 2 - minY * zoom

    // this.setNodes(layoutedNodes) // 设置节点
    // this.setEdges(edges) // 设置边
    // let viewportTransform = {
    //   x: offsetX,
    //   y: offsetY,
    //   zoom,
    // }
    // if (isNaN(viewportTransform.x) || isNaN(viewportTransform.y)) {
    //   return //
    // }
    // this.templateProps.viewport = viewportTransform
    // this.getInstance().setTransform(viewportTransform) //
     {/* <ElButton
                        type="primary"
                        class="bg-blue-500"
                        onClick={() => systemIns.installApp(app.name)}
                        size="small"
                      >
                        <div class="is-disabled">安装</div>
                      </ElButton> */}
                       // const rawNodes: any[] = this.getNodes(true)
    // const edges: Edge[] = this.getEdges(true)

    // // 根据 isInPanel 分组
    // const oldNodes = rawNodes.filter((n) => n.isInPanel)
    // let newNodes = rawNodes.filter((n) => !n.isInPanel)

    // // 布局参数
    // const NODE_WIDTH = 240
    // const HEADER_HEIGHT = 60
    // const ROW_HEIGHT = 28
    // const H_SPACING = 100

    // // 计算旧节点最大 X 边界
    // const maxOldX =
    //   oldNodes.length > 0
    //     ? Math.max(...oldNodes.map((n) => n.position.x + NODE_WIDTH))
    //     : 0

    // // 只对 newNodes 布局
    // if (newNodes.length > 0) {
    //   const g = new dagre.graphlib.Graph()
    //   g.setDefaultEdgeLabel(() => ({}))
    //   // 水平排版，新节点内部间距可调
    //   g.setGraph({ rankdir: 'LR', nodesep: 50, ranksep: 50 })

    //   // 设置尺寸并加入 graph
    //   newNodes.forEach((node) => {
    //     const cols = node.data?.data?.columns ?? []
    //     const nodeHeight = HEADER_HEIGHT + cols.length * ROW_HEIGHT
    //     g.setNode(node.id, { width: NODE_WIDTH, height: nodeHeight })
    //   })
    //   // 仅添加新节点之间的边
    //   edges
    //     .filter(
    //       (e) =>
    //         newNodes.some((n) => n.id === e.source) &&
    //         newNodes.some((n) => n.id === e.target),
    //     )
    //     .forEach((e) => g.setEdge(e.source, e.target))

    //   // 执行 dagre 布局
    //   dagre.layout(g)

    //   // 计算布局后的坐标，并偏移到旧节点右侧
    //   newNodes = newNodes.map((node) => {
    //     const pos = g.node(node.id)
    //     const cols = node.data?.data?.columns ?? []
    //     const nodeHeight = HEADER_HEIGHT + cols.length * ROW_HEIGHT
    //     return {
    //       ...node,
    //       position: {
    //         x: maxOldX + H_SPACING + (pos.x - NODE_WIDTH / 2),
    //         y: pos.y - nodeHeight / 2,
    //       },
    //     }
    //   })
    // }

    // // 合并并应用
    // const layouted = [...oldNodes, ...newNodes]
    // this.setNodes(layouted)
    // this.setEdges(edges)
     // let item = config.item
            // let name = item.name
            // let page = systemIns.getTargetDesign(name) //
            // page.tabHidden = true
            // let pre = config.pre
            // let modelValue = config.modelValue
            // if (modelValue != item.name) {
            //   return //
            // }
            // if (pre) {
            //   systemIns.routeOpen(pre.name) //
            // } else if (config.next) {
            //   //
            //   systemIns.routeOpen(config.next.name) //
            // }


              com = withDirectives(
        <div
          class=""
          style={{
            height: '500px',
            width: '100%',
          }}
        ></div>,
        [
          [
            {
              mounted: (el) => {
                // import * as VTableGantt from '@visactor/vtable-gantt';
                function formatDate(date) {
                  const year = date.getFullYear()
                  const month = ('0' + (date.getMonth() + 1)).slice(-2)
                  const day = ('0' + date.getDate()).slice(-2)
                  return year + '-' + month + '-' + day
                }

                function createPopup({ date, content }, position, callback) {
                  // 创建弹窗元素
                  const popup = document.createElement('div')
                  popup.className = 'popup'

                  // 设置定位参数
                  popup.style.top = `${position.top}px`
                  popup.style.left = `${position.left}px`
                  popup.style.position = 'absolute'
                  popup.style.background = '#ccc'
                  popup.style.padding = '10px'
                  popup.style.zIndex = '10000'

                  // 日期显示格式化
                  const dateString =
                    typeof date === 'string' ? date : formatDate(date)

                  // 弹窗内容
                  popup.innerHTML = `
      <span class="close-btn" onclick="this.parentElement.remove()">×</span>
      <div>日期：${dateString}</div>
      <input type="text" placeholder="输入内容"  class="popup-input" value="${content}" />
      <button class="confirm-btn">确定</button>
  `

                  const confirmBtn = popup.querySelector('.confirm-btn')
                  confirmBtn.addEventListener('click', () => {
                    //@ts-ignore
                    const inputValue = popup.querySelector('.popup-input').value
                    popup.remove()
                    if (typeof callback === 'function') {
                      callback(inputValue)
                    }
                  })

                  // 添加弹窗到容器
                }

                const records = [
                  {
                    id: 1,
                    title: 'Software Development',
                    developer: 'liufangfang.jane@bytedance.com',
                    progress: 31,
                    priority: 'P0',
                  },
                  {
                    id: 2,
                    title: 'Scope',
                    developer: 'liufangfang.jane@bytedance.com',
                    progress: 60,
                    priority: 'P0',
                  },
                  {
                    id: 3,
                    title: 'Determine project scope',
                    developer: 'liufangfang.jane@bytedance.com',
                    progress: 100,
                    priority: 'P1',
                  },
                  {
                    id: 1,
                    title: 'Software Development',
                    developer: 'liufangfang.jane@bytedance.com',
                    progress: 90,
                    priority: 'P0',
                  },
                  {
                    id: 2,
                    title: 'Scope',
                    developer: 'liufangfang.jane@bytedance.com',
                    start: '07/14/2024',
                    end: '07/24/2024',
                    progress: 60,
                    priority: 'P0',
                  },
                  {
                    id: 3,
                    title: 'Determine project scope',
                    developer: 'liufangfang.jane@bytedance.com',
                    start: '2024-07-10',
                    end: '2024-07-14',
                    progress: 100,
                    priority: 'P1',
                  },
                  {
                    id: 1,
                    title: 'Software Development',
                    developer: 'liufangfang.jane@bytedance.com',
                    start: '2024-07-24',
                    end: '2024-08-04',
                    progress: 31,
                    priority: 'P0',
                  },
                  {
                    id: 2,
                    title: 'Scope',
                    developer: 'liufangfang.jane@bytedance.com',
                    start: '2024.07.06',
                    end: '2024.07.08',
                    progress: 60,
                    priority: 'P0',
                  },
                  {
                    id: 3,
                    title: 'Determine project scope',
                    developer: 'liufangfang.jane@bytedance.com',
                    start: '2024/07/09',
                    end: '2024/07/11',
                    progress: 100,
                    priority: 'P1',
                  },
                  {
                    id: 1,
                    title: 'Software Development',
                    developer: 'liufangfang.jane@bytedance.com',
                    start: '07.24.2024',
                    end: '08.04.2024',
                    progress: 31,
                    priority: 'P0',
                  },
                ]

                const columns = [
                  {
                    field: 'title',
                    title: 'title',
                    width: 200,
                    sort: true,
                  },
                  {
                    field: 'start',
                    title: 'start',
                    width: 150,
                    sort: true,
                  },
                  {
                    field: 'end',
                    title: 'end',
                    width: 150,
                    sort: true,
                  },
                  {
                    field: 'priority',
                    title: 'priority',
                    width: 100,
                    sort: true,
                  },

                  {
                    field: 'progress',
                    title: 'progress',
                    width: 200,
                    sort: true,
                  },
                ]
                const option = {
                  records,
                  taskListTable: {
                    columns: columns,
                    tableWidth: 400,
                    minTableWidth: 100,
                    maxTableWidth: 600,
                  },
                  resizeLineStyle: {
                    lineColor: 'green',
                    lineWidth: 3,
                  },

                  frame: {
                    verticalSplitLineMoveable: true,
                    outerFrameStyle: {
                      borderLineWidth: 2,
                      borderColor: 'red',
                      cornerRadius: 8,
                    },
                    verticalSplitLine: {
                      lineWidth: 3,
                      lineColor: '#e1e4e8',
                    },
                    verticalSplitLineHighlight: {
                      lineColor: 'green',
                      lineWidth: 3,
                    },
                  },
                  grid: {
                    // backgroundColor: 'gray',
                    verticalLine: {
                      lineWidth: 1,
                      lineColor: '#e1e4e8',
                    },
                    horizontalLine: {
                      lineWidth: 1,
                      lineColor: '#e1e4e8',
                    },
                  },
                  defaultHeaderRowHeight: 60,
                  defaultRowHeight: 40,
                  timelineHeader: {
                    verticalLine: {
                      lineWidth: 1,
                      lineColor: '#e1e4e8',
                    },
                    horizontalLine: {
                      lineWidth: 1,
                      lineColor: '#e1e4e8',
                    },
                    backgroundColor: '#EEF1F5',
                    colWidth: 60,
                    scales: [
                      {
                        unit: 'week',
                        step: 1,
                        startOfWeek: 'sunday',
                        format(date) {
                          return `Week ${date.dateIndex}`
                        },
                        style: {
                          fontSize: 20,
                          fontWeight: 'bold',
                          color: 'red',
                          backgroundColor: '#EEF1F5',
                        },
                      },
                      {
                        unit: 'day',
                        step: 1,
                        format(date) {
                          return date.dateIndex.toString()
                        },
                        style: {
                          fontSize: 20,
                          fontWeight: 'bold',
                          color: 'red',
                          backgroundColor: '#EEF1F5',
                        },
                      },
                    ],
                  },
                  minDate: '2024-10-01',
                  maxDate: '2024-10-15',
                  markLine: [
                    {
                      date: '2024-10-06',
                      content: '我的啊啊得的',
                      contentStyle: {
                        color: '#fff',
                        // fontSize: 40
                      },
                      style: {
                        lineWidth: 1,
                        lineColor: 'red',
                      },
                    },
                    {
                      date: '2024-10-08 8:00:00',
                      content: 'mrkLine(date)',
                      position: 'date',
                      contentStyle: {
                        color: '#fff',
                        // fontSize: 40
                      },
                      style: {
                        lineWidth: 1,
                        lineColor: 'blue',
                      },
                    },
                  ],
                  scrollStyle: {
                    visible: 'scrolling',
                  },
                  overscrollBehavior: 'none',
                  markLineCreateOptions: {
                    markLineCreatable: true,
                    markLineCreationHoverToolTip: {
                      position: 'top',
                      tipContent: '创建里程碑',
                      style: {
                        contentStyle: {
                          fill: '#fff',
                        },
                        panelStyle: {
                          background: '#14161c',
                          cornerRadius: 4,
                        },
                      },
                    },
                    markLineCreationStyle: {
                      fill: '#ccc',
                      size: 30,
                      iconSize: 12,
                      svg:
                        '<svg t="1741145302032" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2861" width="200" height="200"><path d="M967.68 558.08v-89.6H542.72V43.52h-87.04v424.96H30.72v89.6h424.96v422.4h87.04V558.08z" fill="" p-id="2862"></path></svg>',
                    },
                  },
                }

                const ganttInstance = new VTableGantt.Gantt(
                  el, //
                  option as any,
                )
                ganttInstance.on(
                  'click_markline_create',
                  ({ data, position }) => {
                    createPopup(
                      { date: data.startDate, content: '' },
                      position,
                      (value) => {
                        ganttInstance.addMarkLine({
                          date: formatDate(data.startDate),
                          content: value,
                          contentStyle: {
                            color: '#fff',
                          },
                          style: {
                            lineWidth: 1,
                            lineColor: 'red',
                          },
                        })
                      },
                    )
                  },
                )
                ganttInstance.on(
                  'click_markline_content',
                  ({ data, position }) => {
                    createPopup(
                      { date: data.date, content: data.content },
                      position,
                      (value) => {
                        ganttInstance.updateCurrentMarkLine({
                          date: data.date,
                          content: value,
                        })
                      },
                    )
                  },
                )
              },
            },
          ],
        ],
      )

      // showRowSeriesNumber={false} //
            // {...menuTConfig} ////
            // data={menuTConfig.data.slice(0, 1)} //
            // treeConfig={null}
            // rowHeight={100} // 
            // treeConfig={null}
            // columns={[
            //   {
            //     field: 'id',
            //     title: 'ID',
            //     width: 250,
            //     calculateType: 'sum', //合计
            //     // editType: 'boolean',
            //     // required: true,
            //   },
            //   {
            //     field: 'email1',
            //     title: 'email',
            //     width: 250,
            //     sort: false,
            //     editType: 'boolean', //
            //     enableSelect: true, //
            //     baseinfoConfig: {
            //       tableName: 't_Item',
            //       bindColumns: [
            //         {
            //           targetKey: 'cInvCode', //
            //         },
            //       ],
            //       searchFields: ['cInvCode'], //
            //     },
            //   },
            // ]}


             // com = ( //
      //   <div class="w-full h-500">
      //     <er-form
      //       platform="pc"
      //       // platform="pc"
      //       ref={_reg3}
      //       isDesign={true} //
      //       {...{
      //         items: [
      //           {
      //             field: 'height',
      //             label: '邮箱', //
      //             // type: 'dform', //
      //             type: 'string', //
      //             span: 24,
      //             options: {
      //               tableName: 'permissions',
      //               bindColumns: [
      //                 {
      //                   field: 'id',
      //                 },
      //               ],
      //               searchColumns: ['subject'], //
      //             },
      //             tabTitle: '权限',
      //           },
      //         ],
      //       }}
      //       // {..._fConfig1} //
      //       data={d1} //
      //     ></er-form>
      //   </div>
      // ) //
      // com = null //
      // com = <SearchDialog pageDesign={pd}></SearchDialog>
      // com = <uploadCom></uploadCom>
      // com = <dialogCom ref={_reg2}></dialogCom>
      // com = <codeEditorCom></codeEditorCom>
      // com = <VxeCheckbox
      //   modelValue={true}
      //   onChange={(value) => {
      //   }}
      // ></VxeCheckbox>
      // com = (
      //   <checkboxCom modelValue={true} onChange={(value) => {
      //   }}></checkboxCom>
      // )//
      // com = (
      //   <div class="h-30">
      //     <inputCom columnSelect={true}></inputCom>
      //   </div>
      // )
      // com=<input type="checkbox" class='vxe-checkbox--input' onChange={(value) => {
      // }}></input>
      // com = (
      //   <tabCom
      //     items={[{ label: 'tab1' }, { label: 'tab2' }]}
      //     v-slots={{
      //       default: (item) => {
      //         return <div>{'测试123123'}</div> //
      //       },
      //     }}
      //   ></tabCom>
      // )
      // com = (
      //   <VxePager
      //     {...{
      //       pageSize: 100, //
      //       currentPage: 2,
      //       pageSizes: [
      //         {
      //           label: '10条每页',
      //           value: 10,
      //         },
      //         {
      //           label: '100条每页',
      //           value: 100,
      //         },
      //         {
      //           label: '500条每页',
      //           value: 500,
      //         },
      //         {
      //           label: '1000条每页',
      //           value: 1000,
      //         },
      //         {
      //           label: '5000条每页',
      //           value: 5000,
      //         },
      //         {
      //           label: '10000条每页',
      //           value: 10000,
      //         },
      //         {
      //           label: '全部',
      //           value: 0,
      //         }, //
      //       ],
      //     }}
      //   ></VxePager>
      // )
      // com = (
      //   <selectCom
      //     modelValue={bind.value}
      //     onChange={(value) => {
      //       console.log(value.value, 'testValue') //
      //       bind.value = value.value //
      //     }}
      //     multiple={true} //
      //     options={[
      //       {
      //         label: '123',
      //         value: '123',
      //       },
      //       {
      //         label: 'sfs',
      //         value: 'sfs', //
      //       },
      //       {
      //         label: 'sfs1',
      //         value: 'sfs1', //
      //       },
      //       {
      //         label: 'sfs2',
      //         value: 'sfs2', //
      //       },
      //     ]}
      //   ></selectCom>
      // )
      // com = <pVue></pVue>
      // com = (
      //   <wangCom
      //     ref={(el) => {
      //       _reg2.value = el._instance//
      //     }}
      //   ></wangCom>
      // )
      // com = (
      //   <button
      //     onClick={() => {
      //       system.openWangEditorDialog({
      //         confirmFn: (dialog) => {
      //           console.log(dialog, 'testDialog') //
      //           console.log('confirmFn') //
      //         },
      //       }) //
      //     }}
      //   >
      //     123132
      //   </button>
      // )
      // com=<auditVue></auditVue>

      // let _fConfig11 = getDesignTableConfig(_item1)
      // com = <erForm {..._config123}></erForm> //
       let locationName = createImage({
      x: 0, //
      y: 0,
      image: `<svg  preserveAspectRatio="xMidYMid meet" viewBox="0 0 120 24" xmlns="http://www.w3.org/2000/svg">
  <text
    x="50%"
    y="16"
    text-anchor="middle"
    font-size="16px"
    fill="#007AFF"
    font-family="sans-serif"
  >
    ${_value}
  </text>
  </svg>
  `, //
      height: height, //
      fill: 'black',
      width: _width1, //
      boundsPadding: _bounds, //
      lineDashOffset: 0,
    })

     //
          // return {
          //   rootContainer: _con,
          //   renderDefault: false, //
          // }

          // let rowStart = scrollConfig.rowStart
      // let rowEnd = scrollConfig.rowEnd
      // let _row = row
      // container['updateCanvas'] = () => {
        let lRow = null
      if (_row == -1) {
        lRow = _data[0]
      } else {
        _row = _row - 1
        lRow = _data[_row]
        if (lRow == null) {
          lRow = _data[_row + 1]
        }
      }
      // this.setCurRow(_row) //
       // let _row = showData[index]
      // if (_row == null) {
      //   _row = showData[index - 1]
      //   if (_row == null) {
      //     return
      //   }
      // }
      let _data = this.getFlatTreeData()
      let _row = _data.findIndex((row) => {
        return row['_index'] == _r[0]['_index']
      })


       // setTimeout(() => {
    //   console.log(record, 'testRecords') //
    // }, 100)
     {/* <ContextmenuItem>
                    <div class="flex items-center h-full">
                      {btn?.getLabel()}
                    </div>
                  </ContextmenuItem> */}



                  let btn = el.config.button //
              let disabled = btn.getDisabled()
              let _class = ['er-h-35', 'items-center', 'flex']
              let _class1 = [
                'h-full w-full er-pl-10 er-pr-10  rounded-md bg-blue-100 text-blue-700 text-sm hover:bg-blue-200 transition',
              ]
              let maskCom = null
              if (disabled == true) {
                // _class.push('is-disabled') //
                _class.push('') //
                _class1.push('is-disabled cursor-not-allowed')
                maskCom = (
                  <div
                    class="absolute top-0 left-0 w-full h-full opacity-0 cursor-not-allowed"
                    onClick={(e) => {
                      e.stopPropagation()
                      e.preventDefault() //
                    }}
                  ></div> //
                )
              } else {
                _class1.push('cursor-pointer')
              }
              let com = (
                <div
                  class={[..._class, 'pt-2 pb-2 pl-1 pr-1 relative']}
                  style={{
                    minWidth: `${btn.getButtonWidth()}px`,
                    position: 'relative',
                    zIndex: 0,
                  }}
                  onClick={() => {
                    runBtnFn(btn)
                  }}
                >
                  <div
                    class={[
                      ..._class1,
                      'flex justify-center items-center h-full w-full',
                    ]}
                  >
                    <button class={[]}>{btn?.getLabel()}</button>
                  </div>
                  {maskCom}
                </div>
              )




               const dropdown = config.dropdown
                        let _com1 = (
                          <div
                            onClick={() => {
                              dropdown.showDropdown() //
                            }}
                            onMouseleave={() => {}}
                            class="flex items-center v-contextmenu"
                            style={{
                              minWidth: `${btn.getButtonWidth()}px`,
                              position: 'relative',
                            }}
                          >
                            <ContextmenuItem>{btn?.getLabel()}</ContextmenuItem>
                          </div>
                        )




                        let disabled = btn.getDisabled()
                                return (
                                  <div
                                    class={[{ 'is-disabled': disabled }]}
                                    style={{ width: '100%' }}
                                    onClick={() => runBtnFn(btn)}
                                  >
                                    {btn.getLabel()}
                                  </div>
                                ) //



                                 {/* <div class="flex flex-row flex-1 w-full overflow-auto">
            <div class='' style={{ height: '100%' }}>{leftM}</div>
            <div class="flex flex-col flex-1 h-full ">
              <div class="w-full bg-white tab-line">{tableTab}</div>
              <div class="flex-1 w-full overflow-auto ">{dCom}</div>
            </div>
          </div> */}


          // let pageHeader = (
      //   <header class="flex items-center h-5 page-header">
      //     <div class="container flex items-center justify-between">
      //       <div class="ml-40">
      //         <er-dropdown
      //           dropMode="hover"
      //           v-slots={{
      //             default: () => {
      //               let com = (
      //                 <div class="flex items-center px-3 py-1 space-x-1 text-white bg-blue-500 rounded-md hover:bg-pink-600">
      //                   <span>系统功能</span>
      //                 </div>
      //               )
      //               return com
      //             },
      //             dropdown: () => {
      //               let btnArr = systemIns.getGlobalDropDown()
      //               let bsComs = btnArr.map((item) => {
      //                 let c = (
      //                   <div class="py-1">
      //                     <div
      //                       class="block px-4 py-2 text-sm text-gray-800 cursor-pointer hover:bg-gray-100"
      //                       onClick={() => {
      //                         let fn = item.fn
      //                         fn() //
      //                       }}
      //                     >
      //                       {item.label}
      //                     </div>
      //                   </div>
      //                 )
      //                 return c
      //               })
      //               let com = (
      //                 <div class="mt-2 transition-opacity bg-white border border-gray-200 rounded-lg shadow-lg w-120">
      //                   {bsComs}
      //                 </div>
      //               )
      //               return com //
      //             },
      //           }}
      //         ></er-dropdown>
      //       </div>
      //       <div class="flex items-center justify-center flex-1 mx-8">
      //         <er-dropdown
      //           class="w-400"
      //           ref={(el) => {
      //             systemIns.registerRef('gSearch', el)
      //           }}
      //           v-slots={{
      //             default: () => {
      //               let com = (
      //                 <input
      //                   onFocus={() => {
      //                     let _ref: Dropdown = systemIns.getRef('gSearch')
      //                     _ref.showDropdown() //
      //                   }}
      //                   placeholder="全局查询"
      //                   class="px-3 border border-gray-300 outline-none w-400 h-35 rounded-l-md"
      //                 />
      //               )
      //               return com
      //             },
      //             dropdown: () => {
      //               let com = <div class="w-400 h-400 bg-red"></div>
      //               return com
      //             },
      //           }}
      //         ></er-dropdown>
      //       </div>

      //       <div class="flex items-center space-x-4">
      //         <img alt="avatar" class="w-8 h-8 rounded-full cursor-pointer" />
      //         <er-dropdown
      //           dropMode="hover"
      //           v-slots={{
      //             default: () => {
      //               let com = (
      //                 <div class="flex items-center px-3 py-1 space-x-1 text-white bg-blue-500 rounded-md hover:bg-pink-600">
      //                   <span>
      //                     {system.getUserInfo()?.user?.username || '登录'}
      //                   </span>
      //                 </div>
      //               )
      //               return com
      //             },
      //             dropdown: () => {
      //               let items = systemIns.getUserDropDown()
      //               let itemsCom = items.map((item) => {
      //                 let com = (
      //                   <div class="py-1">
      //                     <div
      //                       href="#"
      //                       class="block px-4 py-2 text-sm text-gray-800 hover:bg-gray-100"
      //                     >
      //                       {item.label}
      //                     </div>
      //                   </div>
      //                 )
      //                 return com
      //               })
      //               let com = (
      //                 <div
      //                   class="mt-2 transition-opacity bg-white border border-gray-200 rounded-lg shadow-lg w-120 //"
      //                 >
      //                   {itemsCom}
      //                 </div>
      //               )
      //               return com
      //             },
      //           }}
      //         ></er-dropdown>
      //       </div>
      //     </div>
      //   </header>
      // )

      <el-aside :class="[ns.b()]" :width="ER.props.configPanelWidth">
    <el-breadcrumb :class="[ns.e('breadcrumb')]" :separator-icon="() => (
      h('svg', {
        viewBox: '0 0 1024 1024',
        xmlns: 'http://www.w3.org/2000/svg'
      },
        h('path', {
          fill: 'currentColor',
          d: 'M340.864 149.312a30.592 30.592 0 0 0 0 42.752L652.736 512 340.864 831.872a30.592 30.592 0 0 0 0 42.752 29.12 29.12 0 0 0 41.728 0L714.24 534.336a32 32 0 0 0 0-44.672L382.592 149.376a29.12 29.12 0 0 0-41.728 0z'
        })
      )
    )" v-bind="utils.addTestId('configPanel:breadcrumb')">
      <el-breadcrumb-item
        @click="(index !== bars.length - 1 && item.node.value !== 'placeholder') && handleBreadcrumbClick(item.node)"
        v-for="(item, index) in bars" :key="index">
        {{ item.node.value === 'placeholder' ? '...' : item.label }}
      </el-breadcrumb-item>
    </el-breadcrumb>
    <el-form ref="form" :model="target" :rules="rules" label-width="120px" label-position="top">
      <el-scrollbar>
        <div :class="[ns.e('wrap')]">
          <div v-if="isSelectAnyElement">
            <PanelsConfigComponentsPropsPanel :key="target.id" />
          </div>
          <div v-if="isSelectRoot">
            <GlobalConfigPanel></GlobalConfigPanel>
          </div>
        </div>
      </el-scrollbar>
    </el-form>
  </el-aside>

  const pageHeader = (
        <header class="flex items-center justify-between w-full px-1 py-2 bg-white shadow">
          {/* 左侧：功能下拉 */}
          <div class="w-24">
            <er-dropdown
              dropMode="hover"
              v-slots={{
                default: () => (
                  <button class="flex items-center h-10 px-2 text-white transition bg-blue-600 rounded hover:bg-blue-700">
                    <span class="font-medium">系统功能</span>
                    <svg
                      class="w-4 h-4 ml-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 9l-7 7-7-7"
                      />
                    </svg>
                  </button>
                ),
                dropdown: () => (
                  <div class="w-48 mt-2 bg-white border border-gray-200 rounded shadow-lg">
                    {systemIns.getGlobalDropDown().map((item) => (
                      <div
                        class="px-4 py-2 text-gray-700 cursor-pointer hover:bg-gray-100"
                        onClick={item.fn}
                      >
                        {item.label}
                      </div>
                    ))}
                  </div>
                ),
              }}
            />
          </div>

          {/* 中间：全局搜索 */}
          <div class="flex-1 mx-6">
            <er-dropdown
              ref={(el) => systemIns.registerRef('gSearch', el)}
              v-slots={{
                default: () => (
                  <div class="relative">
                    <input
                      type="text"
                      placeholder="全局查询"
                      class="w-full h-10 pl-4 pr-10 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-300"
                      onFocus={() => systemIns.getRef('gSearch').showDropdown()}
                    />
                    <svg
                      class="absolute w-5 h-5 text-gray-400 transform -translate-y-1/2 right-3 top-1/2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M21 21l-4.35-4.35m0 0A7.5 7.5 0 1 0 6.65 6.65a7.5 7.5 0 0 0 10.6 10.6z"
                      />
                    </svg>
                  </div>
                ),
                dropdown: () => (
                  <div class="w-full mt-1 bg-white border border-gray-200 rounded shadow-lg">
                    {/* 下拉内容 */}
                  </div>
                ),
              }}
            />
          </div>

          {/* 右侧：头像 + 用户下拉 */}
          <div class="flex items-center space-x-4">
            <img
              src=""
              alt="avatar"
              class="w-10 h-10 border border-gray-300 rounded-full"
            />
            <er-dropdown
              dropMode="hover"
              v-slots={{
                default: () => (
                  <button class="flex items-center px-4 py-2 text-white transition bg-blue-600 rounded hover:bg-blue-700">
                    <span class="font-medium">
                      {system.getUserInfo()?.user?.username || '登录'}
                    </span>
                    <svg
                      class="w-4 h-4 ml-2"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M19 9l-7 7-7-7"
                      />
                    </svg>
                  </button>
                ),
                dropdown: () => (
                  <div class="mt-2 bg-white border border-gray-200 rounded shadow-lg w-44">
                    {systemIns.getUserDropDown().map((item) => (
                      <div
                        class="px-4 py-2 text-gray-700 cursor-pointer hover:bg-gray-100"
                        onClick={item.fn}
                      >
                        {item.label}
                      </div>
                    ))}
                  </div>
                ),
              }}
            />
          </div>
        </header>
      )
      // {
      //   label: '添加子按钮',
      //   fn: (config) => {
      //     let _t: Table = config.parent
      //     let curRow = _t.getCurRow()
      //     if (curRow == null) {
      //       return
      //     }
      //   }, //
      // },

       // let tConfig = this.getTableConfig(tableName)
    // console.log(tConfig, 'test_config')//

      let tableName = table.getTableName()
        let fConfig = {
          title: '同步列',
          height: 200,
          width: 300,
          itemSpan: 24, //
          data: {
            tableName: tableName,
          },
          items: [
            {
              label: '表名',
              field: 'tableName',
              disabled: false, //
              visible: true,
              required: true,
            },
          ],
        }
        let system = table.getSystem()
        let data = await system.confirmForm(fConfig)
        // console.log(data) //
        let _tableName = data.tableName
        let _columns = await table.getSystem().getOldErpTableColumns(_tableName)
        if (_columns.length == 0) {
          return
        }
        let allCols = table.getFlatColumns().map((col) => {
          return col.config
        })
        for (const col of _columns) {
          let f = col.field
          let c = allCols.find((c) => {
            return c.field == f
          })
          let keys = [
            {
              key: 'title',
              myKey: 'title',
            },
            {
              key: 'width',
              myKey: 'width',
            },
          ]
          if (c) {
            for (let key of keys) {
              if (col[key.key] != null) {
                c[key.myKey] = col[key.key]
              }
            } //
          }
        }


        {
          label: '更换ID',
          fn: async () => {
            // let data = tableIns.getData()
            // let d0 = data[0]
            // d0['id'] = d0['id'] + 1 //
            tableIns.updateCanvas() //
          },
        },



         // {
      //   label: '切换平台',
      //   fn: async () => {
      //     let currentDesign = system.getCurrentPageDesign()
      //     let plat = currentDesign.getCurrentPlatform() //
      //     if (plat == 'pc') {
      //       currentDesign.switchPlatform('mobile')
      //     } else {
      //       currentDesign.switchPlatform('pc')
      //     }
      //   },
      // },
      // {
      //   label: '同步当前列',
      //   fn: async () => {
      //     let currentPageDesign = system.getCurrentPageDesign()
      //     await currentPageDesign.syncErpTableColumns() //
      //   },
      // },
      // {
      //   label: '打印页面',
      //   fn: async () => {
      //     let pageDesign = system.getCurrentPageDesign()
      //     let layout = pageDesign.getLayoutData()
      //     // console.log(layout) //
      //     console.log(system, 'testSystem') //
      //   },
      // },
      // {
      //   label: '实体管理',
      //   fn: async () => {
      //     //
      //     this.routeTo('/admin/realTable')
      //   },
      // },

       getAllApp() {
    let allApp = this.systemApp
    if (allApp == null || !Array.isArray(allApp)) {
      return []
    }
    return allApp
  }

  async getInstallApp() {
    let http = this.getHttp()
    let _data = await http.post('company', 'getInstallApp') //
    return _data //
  }

   async getAllApps() {
    if ((await this.getIsLogin()) == false) {
      this.allApp = []
      return //
    }
    let userInfo = this.getUserInfo()
    let user = userInfo.user
    let id = user.id //
    let allCompany = await this.getHttp().find('company', {
      userid: id,
    })
    this.allApp = allCompany //
    return allCompany //
  }
   async getAllAppCompany(config) {
    //
    let http = this.getHttp()
    let res = await http.post('company', 'getAllAppCompany', config) //
    let _res = res //
    return _res
  }

   // debugger //
      // this.systemApp = _data

       // Any status codes that falls outside the range of 2xx cause this function to trigger
      // Do something with response error

      // {
        //   field: 'userid',
        //   type: 'select',
        //   label: '公司',
        //   required: true,
        //   options: { options: [] },
        // },
        // {
        //   field: 'appName',
        //   type: 'select',
        //   label: '应用',
        //   required: true,
        //   options: { options: [] },
        // },


          // {
        //   label: '登录方式',
        //   field: 'loginType',
        //   type: 'select',
        //   required: true,
        //   options: {
        //     options: [
        //       { label: '邮箱登录', value: 'email' },
        //       { label: '用户名登录', value: 'username' },
        //     ],
        //   },
        // },



         // {
        //   field: 'userid',
        //   type: 'select',
        //   label: '公司',
        //   required: true,
        //   options: { options: [] },
        // },
        // {
        //   field: 'appName',
        //   type: 'select',
        //   label: '应用',
        //   required: true,
        //   options: { options: [] },
        // },

         // const all: any[] = await system.getAllRegisterCompany()
      // loginFConfig.items[3].options.options = all.map((item) => ({
      //   label: item.companyCnName || item.companyName,
      //   value: item.userid,
      // }))
      // loginFConfig.items[4].options.options = all.map((item) => ({
      //   label: item.appCnName || item.appName,
      //   value: item.appName,
      // }))

      reactive({
      appName: 'platform',
      // userid: 0,
      loginType: 'email',
      email: '1151685410@qq.com',
      password: '1',
      _unUseCaptcha: true,
    })
    

    /* 
    reactive({
      labelWidth: 70,
      data,
      items: [
        { field: 'email', type: 'string', label: '账号', required: true },
        {
          field: 'password', 
          type: 'string',
          label: '密码',
          required: true,
          options: { password: true },
        },

        { field: '_captcha', label: '验证码', type: 'string' },
      ],
      itemSpan: 24,
    })
    */


      async function loadCaptcha() {
      const res = await system.createCaptcha('authentication_create')
      code.value = res.data
      cdata.value = res.text
    }
    onMounted(loadCaptcha)


     // com = (
      //   <flowCom
      //     {...comText()}
      //     isERDiagram={true} //
      //     getRemoteTables={true}
      //   ></flowCom>
      // ) //

      {/* <div style={{ height: '500px', width: '100%' }} class="">
            <erTable
              isGantt={true}
              // {...getOptions()} //
              data={getGanttRecords()}
              columns={getGanttColumns()}
            ></erTable>
          </div> */}


           // sys.openDialog({
    //   height: 600,
    //   width: 1200,
    //   createFn, //
    //   confirmFn: (dialog: Dialog) => {
    //     let com: CodeEditor = dialog.getRef('innerCom')
    //     let bindValue = com.getBindValue() //
    //     let updateFn = config?.updateFn
    //     this.disableHideCell = false
    //     if (typeof updateFn == 'function') {
    //       // this.updateBindData({ value: bindValue }) ////
    //       updateFn({ value: bindValue })
    //     }
    //   },
    //   closeFn: () => {
    //     this.disableHideCell = false //
    //   },
    // })

     // let createFn = () => {
    //   //
    //   return {
    //     component: codeEditorCom,
    //     props: {
    //       ...codeConfig,
    //       modelValue: value,
    //       tableName,
    //     },
    //   }
    // }

    // console.log(_items, 'items123132') //
                        // let menu = (
                        //   <ContextmenuCom
                        //     ref={(el) => btn.registerRef('contextmenu', el)}
                        //     isTeleport={false}
                        //     items={_items} //
                        //     alwaysShow={true}
                        //     v-slots={{
                        //       itemSlot: (item) => {
                        //         const btn = item.button
                        //         let _com = getBtnCom(btn)
                        //         return _com
                        //       },
                        //       subItemSlot: (item) => {
                        //         const btn = item.button
                        //         // return <div class={{}}>{btn.getLabel()}</div>
                        //         let _com = getBtnCom(btn)
                        //         return _com //
                        //       },
                        //     }}
                        //   ></ContextmenuCom>
                        // )
                         // let showData = this.getData() //
    // let ins = this.getInstance()